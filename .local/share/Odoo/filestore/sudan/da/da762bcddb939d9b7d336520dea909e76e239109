)]}'
{"version": 3, "sources": ["/mail/static/src/core/web/wysiwyg.js", "/web/static/src/legacy/js/core/class.js", "/web/static/src/legacy/js/core/dialog.js", "/web/static/src/legacy/js/core/minimal_dom.js", "/web/static/src/legacy/js/core/dom.js", "/web/static/src/legacy/js/core/mixins.js", "/web/static/src/legacy/js/core/service_mixins.js", "/web/static/src/legacy/js/core/widget.js", "/web/static/src/legacy/utils.js", "/web_editor/static/lib/cropperjs/cropper.js", "/web_editor/static/lib/jquery-cropper/jquery-cropper.js", "/web_editor/static/lib/jQuery.transfo.js", "/web_editor/static/lib/webgl-image-filter/webgl-image-filter.js", "/web_editor/static/lib/DOMPurify.js", "/web_editor/static/src/js/editor/odoo-editor/src/OdooEditor.js", "/web_editor/static/src/js/editor/odoo-editor/src/utils/constants.js", "/web_editor/static/src/js/editor/odoo-editor/src/utils/sanitize.js", "/web_editor/static/src/js/editor/odoo-editor/src/utils/serialize.js", "/web_editor/static/src/js/editor/odoo-editor/src/tablepicker/TablePicker.js", "/web_editor/static/src/js/editor/odoo-editor/src/powerbox/patienceDiff.js", "/web_editor/static/src/js/editor/odoo-editor/src/powerbox/Powerbox.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/align.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/commands.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/deleteBackward.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/deleteForward.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/enter.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/shiftEnter.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/shiftTab.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/tab.js", "/web_editor/static/src/js/editor/odoo-editor/src/commands/toggleList.js", "/web_editor/static/src/js/editor/drag_and_drop.js", "/web_editor/static/src/js/wysiwyg/linkDialogCommand.js", "/web_editor/static/src/js/wysiwyg/MoveNodePlugin.js", "/web_editor/static/src/js/wysiwyg/PeerToPeer.js", "/web_editor/static/src/js/wysiwyg/conflict_dialog.js", "/web_editor/static/src/js/wysiwyg/get_color_picker_template_service.js", "/web_editor/static/src/js/editor/perspective_utils.js", "/web_editor/static/src/js/editor/image_processing.js", "/web_editor/static/src/js/editor/custom_colors.js", "/web_editor/static/src/js/wysiwyg/widgets/alt_dialog.js", "/web_editor/static/src/js/wysiwyg/widgets/chatgpt_alternatives_dialog.js", "/web_editor/static/src/js/wysiwyg/widgets/chatgpt_dialog.js", "/web_editor/static/src/js/wysiwyg/widgets/chatgpt_prompt_dialog.js", "/web_editor/static/src/js/wysiwyg/widgets/color_palette.js", "/web_editor/static/src/js/wysiwyg/widgets/image_crop.js", "/web_editor/static/src/js/wysiwyg/widgets/link.js", "/web_editor/static/src/js/wysiwyg/widgets/link_dialog.js", "/web_editor/static/src/js/wysiwyg/widgets/link_popover_widget.js", "/web_editor/static/src/js/wysiwyg/widgets/link_tools.js", "/web_editor/static/src/js/editor/toolbar.js", "/web_editor/static/src/js/wysiwyg/wysiwyg_jquery_extention.js", "/web_editor/static/src/js/wysiwyg/wysiwyg.js", "/web_editor/static/src/js/wysiwyg/wysiwyg_iframe.js"], "mappings": "AAAA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtcA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3IA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlaA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjhbA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClxtchohlvnjvQA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjZA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtvknljLA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpEA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpFA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC/BA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChhNA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtbjqBA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACVA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACrlGA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzmBA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACdA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC/CA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACxtpiCA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC/UA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACxsBA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7LA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1UA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzhBA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzrnmsourcesContent": ["/** @odoo-module **/\n\nimport { renderToElement } from \"@web/core/utils/render\";\nimport { Wysiwyg } from \"@web_editor/js/wysiwyg/wysiwyg\";\nimport { closestBlock, setCursorEnd } from \"@web_editor/js/editor/odoo-editor/src/OdooEditor\";\nimport { patch } from \"@web/core/utils/patch\";\nimport { MentionList } from \"@mail/core/web/mention_list\";\nimport { url } from \"@web/core/utils/urls\";\nimport { usePopover } from \"@web/core/popover/popover_hook\";\nimport { isEventHandled } from \"@web/core/utils/misc\";\n\npatch(Wysiwyg.prototype, {\n    setup() {\n        super.setup();\n        if (this.inDiscuss) {\n            this.mentionList = usePopover(MentionList, {\n                position: `bottom-start`,\n                onClose: () => this.focus(),\n            });\n            this.triggerMentionList = this.triggerMentionList.bind(this);\n        }\n    },\n    get inDiscuss() {\n        return this.props.options.recordInfo?.res_model === \"mail.compose.message\";\n    },\n    async startEdition() {\n        const res = await super.startEdition(...arguments);\n        // Only enable mention list in full chatter mode web editor\n        if (this.inDiscuss) {\n            this.odooEditor.document.addEventListener(\"keydown\", this.triggerMentionList, true);\n            this.odooEditor.document.addEventListener(\"click\", this.triggerMentionList, true);\n        }\n        return res;\n    },\n    destroy() {\n        super.destroy();\n        if (this.inDiscuss && this.odooEditor) {\n            this.odooEditor.document.removeEventListener(\"keydown\", this.triggerMentionList, true);\n            this.odooEditor.document.removeEventListener(\"click\", this.triggerMentionList, true);\n        }\n    },\n    async triggerMentionList(ev) {\n        if (!this.inDiscuss) {\n            return;\n        }\n        // Let event be handled by bubbling handlers and other handlers from Odoo Editor first.\n        await new Promise((resolve) => setTimeout(resolve, 0));\n        const selection = this.odooEditor.document.getSelection();\n        if (\n            this.isSelectionInEditable() &&\n            selection.isCollapsed &&\n            selection.rangeCount &&\n            !this.mentionList.isOpen &&\n            (ev.key === \"@\" || ev.key === \"#\")\n        ) {\n            this.stepBeforeMention = this.odooEditor._historySteps.length - 2;\n            const closest = closestBlock(this.odooEditor.document.getSelection().anchorNode);\n            this.mentionList.open(closest, {\n                type: ev.key === \"@\" ? \"partner\" : \"channel\",\n                onSelect: this.selectMention.bind(this),\n            });\n        } else if (!isEventHandled(ev, \"MentionList.onKeydown\")) {\n            this.mentionList.close();\n        }\n    },\n    selectMention(ev, option) {\n        if (!this.inDiscuss) {\n            return;\n        }\n        this.mentionList.close();\n        const mentionBlock = renderToElement(\"mail.Wysiwyg.mentionLink\", {\n            option,\n            href: `${url(\"/web\")}#model=${option.partner ? \"res.partner\" : \"discuss.channel\"}&id=${\n                option.partner ? option.partner.id : option.channel.id\n            }`,\n        });\n        const nameNode = document.createTextNode(`${option.partner ? \"@\" : \"#\"}${option.label}`);\n        const space = document.createTextNode(\"\\u00A0\");\n        mentionBlock.appendChild(nameNode);\n        this.odooEditor.historyRevertUntil(this.stepBeforeMention);\n        this.odooEditor.execCommand(\"insert\", mentionBlock);\n        this.odooEditor.execCommand(\"insert\", space);\n        setCursorEnd(space, false);\n        this.odooEditor.historyStep();\n    },\n});\n", "/** @odoo-module **/\n/**\n * Improved John Resig's inheritance, based on:\n *\n * Simple JavaScript Inheritance\n * By John Resig http://ejohn.org/\n * MIT Licensed.\n *\n * Adds \"include()\"\n *\n * Defines The Class object. That object can be used to define and inherit classes using\n * the extend() method.\n *\n * Example::\n *\n *     var Person = Class.extend({\n *      init: function(isDancing){\n *         this.dancing = isDancing;\n *       },\n *       dance: function(){\n *         return this.dancing;\n *       }\n *     });\n *\n * The init() method act as a constructor. This class can be instanced this way::\n *\n *     var person = new Person(true);\n *     person.dance();\n *\n *     The Person class can also be extended again:\n *\n *     var Ninja = Person.extend({\n *       init: function(){\n *         this._super( false );\n *       },\n *       dance: function(){\n *         // Call the inherited version of dance()\n *         return this._super();\n *       },\n *       swingSword: function(){\n *         return true;\n *       }\n *     });\n *\n * When extending a class, each re-defined method can use this._super() to call the previous\n * implementation of that method.\n *\n * @class Class\n */\nfunction OdooClass(){}\n\nvar initializing = false;\n// eslint-disable-next-line no-undef\nvar fnTest = /xyz/.test(function(){xyz();}) ? /\\b_super\\b/ : /.*/;\n\n/**\n * Subclass an existing class\n *\n * @param {Object} prop class-level properties (class attributes and instance methods) to set on the new class\n */\nOdooClass.extend = function() {\n    var _super = this.prototype;\n    // Support mixins arguments\n    var args = [...arguments];\n    args.unshift({});\n\n    const prop = {};\n    args.forEach((arg) => {\n        Object.assign(prop, arg);\n    });\n\n    // Instantiate a web class (but only create the instance,\n    // don't run the init constructor)\n    initializing = true;\n    var This = this;\n    var prototype = new This();\n    initializing = false;\n\n    // Copy the properties over onto the new prototype\n    Object.keys(prop).forEach((name) => {\n        // Check if we're overwriting an existing function\n        prototype[name] = typeof prop[name] == \"function\" &&\n                          fnTest.test(prop[name]) ?\n                (function(name, fn) {\n                    return function() {\n                        var tmp = this._super;\n\n                        // Add a new ._super() method that is the same\n                        // method but on the super-class\n                        this._super = _super[name];\n\n                        // The method only need to be bound temporarily, so\n                        // we remove it when we're done executing\n                        var ret = fn.apply(this, arguments);\n                        this._super = tmp;\n\n                        return ret;\n                    };\n                })(name, prop[name]) :\n                prop[name];\n    });\n\n    // The dummy class constructor\n    function Class() {\n        if(this.constructor !== OdooClass){\n            throw new Error(\"You can only instanciate objects with the 'new' operator\");\n        }\n        // All construction is actually done in the init method\n        this._super = null;\n        if (!initializing && this.init) {\n            var ret = this.init.apply(this, arguments);\n            if (ret) { return ret; }\n        }\n        return this;\n    }\n    Class.include = function (properties) {\n        Object.keys(properties).forEach((name) => {\n            if (typeof properties[name] !== 'function'\n                    || !fnTest.test(properties[name])) {\n                prototype[name] = properties[name];\n            } else if (typeof prototype[name] === 'function'\n                       && prototype.hasOwnProperty(name)) {\n                prototype[name] = (function (name, fn, previous) {\n                    return function () {\n                        var tmp = this._super;\n                        this._super = previous;\n                        var ret = fn.apply(this, arguments);\n                        this._super = tmp;\n                        return ret;\n                    };\n                })(name, properties[name], prototype[name]);\n            } else if (typeof _super[name] === 'function') {\n                prototype[name] = (function (name, fn) {\n                    return function () {\n                        var tmp = this._super;\n                        this._super = _super[name];\n                        var ret = fn.apply(this, arguments);\n                        this._super = tmp;\n                        return ret;\n                    };\n                })(name, properties[name]);\n            }\n        });\n    };\n\n    // Populate our constructed prototype object\n    Class.prototype = prototype;\n\n    // Enforce the constructor to be what we expect\n    Class.constructor = Class;\n\n    // And make this class extendable\n    Class.extend = this.extend;\n\n    return Class;\n};\n\nexport default OdooClass;\n", "/** @odoo-module **/\n\nimport dom from \"@web/legacy/js/core/dom\";\nimport Widget from \"@web/legacy/js/core/widget\";\nimport { _t } from \"@web/core/l10n/translation\";\nimport { renderToElement } from \"@web/core/utils/render\";\nimport { uniqueId } from \"@web/core/utils/functions\";\n\n/**\n * A useful class to handle dialogs.\n * Attributes:\n *\n * ``$footer``\n *   A jQuery element targeting a dom part where buttons can be added. It\n *   always exists during the lifecycle of the dialog.\n **/\nvar Dialog = Widget.extend({\n    tagName: 'main',\n    custom_events: Object.assign({}, Widget.prototype.custom_events, {\n        focus_control_button: '_onFocusControlButton',\n        close_dialog: '_onCloseDialog',\n    }),\n    events: Object.assign({}, Widget.prototype.events, {\n        'keydown .modal-footer button': '_onFooterButtonKeyDown',\n    }),\n    /**\n     * @param {Widget} parent\n     * @param {Object} [options]\n     * @param {string} [options.title=Odoo]\n     * @param {string} [options.subtitle]\n     * @param {string} [options.size=large] - 'extra-large', 'large', 'medium'\n     *        or 'small'\n     * @param {boolean} [options.fullscreen=false] - whether or not the dialog\n     *        should be open in fullscreen mode (the main usecase is mobile)\n     * @param {string} [options.dialogClass] - class to add to the modal-body\n     * @param {jQuery} [options.$content]\n     *        Element which will be the $el, replace the .modal-body and get the\n     *        modal-body class\n     * @param {Object[]} [options.buttons]\n     *        List of button descriptions. Note: if no buttons, a \"ok\" primary\n     *        button is added to allow closing the dialog\n     * @param {string} [options.buttons[].text]\n     * @param {string} [options.buttons[].classes]\n     *        Default to 'btn-primary' if only one button, 'btn-secondary'\n     *        otherwise\n     * @param {boolean} [options.buttons[].close=false]\n     * @param {function} [options.buttons[].click]\n     * @param {boolean} [options.buttons[].disabled]\n     * @param {boolean} [options.technical=true]\n     *        If set to false, the modal will have the standard frontend style\n     *        (use this for non-editor frontend features)\n     * @param {jQueryElement} [options.$parentNode]\n     *        Element in which dialog will be appended, by default it will be\n     *        in the body\n     * @param {boolean|string} [options.backdrop='static']\n     *        The kind of modal backdrop to use (see BS documentation)\n     * @param {boolean} [options.renderHeader=true]\n     *        Whether or not the dialog should be rendered with header\n     * @param {boolean} [options.renderFooter=true]\n     *        Whether or not the dialog should be rendered with footer\n     * @param {function} [options.onForceClose]\n     *        Callback that triggers when the modal is closed by other means than with the buttons\n     *        e.g. pressing ESC\n     */\n    init: function (parent, options) {\n        var self = this;\n        this._super(parent);\n        this._opened = new Promise(function (resolve) {\n            self._openedResolver = resolve;\n        });\n        if (this.on_attach_callback) {\n            this._opened = this.opened(this.on_attach_callback);\n        }\n        options = Object.assign({\n            title: _t('Odoo'), subtitle: '',\n            size: 'large',\n            fullscreen: false,\n            dialogClass: '',\n            $content: false,\n            buttons: [{text: _t(\"Ok\"), close: true}],\n            technical: true,\n            $parentNode: false || $(document.body.querySelector(\".o_dialog_container\")),\n            backdrop: 'static',\n            renderHeader: true,\n            renderFooter: true,\n            onForceClose: false,\n        }, options || {});\n\n        this.$content = options.$content;\n        this.title = options.title;\n        this.subtitle = options.subtitle;\n        this.fullscreen = options.fullscreen;\n        this.dialogClass = options.dialogClass;\n        this.size = options.size;\n        this.buttons = options.buttons;\n        this.technical = options.technical;\n        this.$parentNode = options.$parentNode;\n        this.backdrop = options.backdrop;\n        this.renderHeader = options.renderHeader;\n        this.renderFooter = options.renderFooter;\n        this.onForceClose = options.onForceClose;\n    },\n    /**\n     * Wait for XML dependencies and instantiate the modal structure (except\n     * modal-body).\n     *\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            // Render modal once xml dependencies are loaded\n            self.$modal = $(renderToElement('web.DialogWidget', {\n                fullscreen: self.fullscreen,\n                title: self.title,\n                subtitle: self.subtitle,\n                technical: self.technical,\n                renderHeader: self.renderHeader,\n                renderFooter: self.renderFooter,\n                uniqueId: uniqueId(\"modal_\"),\n            }));\n            switch (self.size) {\n                case 'extra-large':\n                    self.$modal.find('.modal-dialog').addClass('modal-xl');\n                    break;\n                case 'large':\n                    self.$modal.find('.modal-dialog').addClass('modal-lg');\n                    break;\n                case 'small':\n                    self.$modal.find('.modal-dialog').addClass('modal-sm');\n                    break;\n            }\n            if (self.renderFooter) {\n                self.$footer = self.$modal.find(\".modal-footer\");\n                self.set_buttons(self.buttons);\n            }\n            self.$modal.on('hidden.bs.modal', self.destroy.bind(self));\n        });\n    },\n    /**\n     * @override\n     */\n    renderElement: function () {\n        this._super();\n        // Note: ideally, the $el which is created/set here should use the\n        // 'main' tag, we cannot enforce this as it would require to re-create\n        // the whole element.\n        if (this.$content) {\n            this.setElement(this.$content);\n        }\n        this.$el.addClass('modal-body ' + this.dialogClass);\n    },\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n    /**\n     * @param {Object[]} buttons - @see init\n     */\n    set_buttons: function (buttons) {\n        this._setButtonsTo(this.$footer, buttons);\n    },\n\n    set_title: function (title, subtitle) {\n        this.title = title || \"\";\n        if (subtitle !== undefined) {\n            this.subtitle = subtitle || \"\";\n        }\n\n        var $title = this.$modal.find('.modal-title').first();\n        var $subtitle = $title.find('.o_subtitle').detach();\n        $title.html(this.title);\n        $subtitle.html(this.subtitle).appendTo($title);\n\n        return this;\n    },\n\n    opened: function (handler) {\n        return (handler)? this._opened.then(handler) : this._opened;\n    },\n\n    /**\n     * Show a dialog\n     *\n     * @param {Object} options\n     * @param {boolean} options.shouldFocusButtons  if true, put the focus on\n     * the first button primary when the dialog opens\n     */\n    open: function (options) {\n        $('.tooltip').remove(); // remove open tooltip if any to prevent them staying when modal is opened\n\n        var self = this;\n        this.appendTo($('<div/>')).then(function () {\n            if (self.isDestroyed()) {\n                return;\n            }\n            self.$modal.find(\".modal-body\").replaceWith(self.$el);\n            self.$modal.attr('open', true);\n            if (self.$parentNode) {\n                self.$modal.appendTo(self.$parentNode);\n            }\n            const modalNode = self.$modal[0];\n            const modal = new Modal(modalNode, {\n                backdrop: self.backdrop,\n                keyboard: false,\n            });\n            modal.show();\n            self._openedResolver();\n            if (options && options.shouldFocusButtons) {\n                self._onFocusControlButton();\n            }\n        });\n\n        return self;\n    },\n\n    close: function () {\n        this.destroy();\n    },\n\n    /**\n     * Close and destroy the dialog.\n     *\n     * @param {Object} [options]\n     * @param {Object} [options.infos] if provided and `silent` is unset, the\n     *   `on_close` handler will pass this information related to closing this\n     *   information.\n     * @param {boolean} [options.silent=false] if set, do not call the\n     *   `on_close` handler.\n     */\n    destroy: function (options) {\n        // Need to trigger before real destroy but if 'closed' handler destroys\n        // the widget again, we want to avoid infinite recursion\n        if (!this.__closed) {\n            this.__closed = true;\n            this.trigger('closed', options);\n        }\n\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Triggers the onForceClose event if the callback is defined\n        if (this.onForceClose) {\n            this.onForceClose();\n        }\n        var isFocusSet = this._focusOnClose();\n\n        this._super();\n\n        $('.tooltip').remove(); //remove open tooltip if any to prevent them staying when modal has disappeared\n        if (this.$modal) {\n            if (this.on_detach_callback) {\n                this.on_detach_callback();\n            }\n            this.$modal.modal('hide');\n            this.$modal.remove();\n        }\n\n        const modals = $('.modal[role=\"dialog\"]').filter(':visible').filter(this._isBlocking);\n        if (modals.length) {\n            if (!isFocusSet) {\n                modals.last().focus();\n            }\n            // Keep class modal-open (deleted by bootstrap hide fnct) on body to allow scrolling inside the modal\n            $('body').addClass('modal-open');\n        }\n    },\n    /**\n     * adds the keydown behavior to the dialogs after external files modifies\n     * its DOM.\n     */\n    rebindButtonBehavior: function () {\n        this.$footer.on('keydown', this._onFooterButtonKeyDown);\n    },\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n    /**\n     * Manages the focus when the dialog closes. The default behavior is to set the focus on the top-most opened popup.\n     * The goal of this function is to be overridden by all children of the dialog class.\n     *\n     * @returns: boolean  should return true if the focus has already been set else false.\n     */\n    _focusOnClose: function() {\n        return false;\n    },\n    /**\n     * Render and set the given buttons into a target element\n     *\n     * @private\n     * @param {jQueryElement} $target The destination of the rendered buttons\n     * @param {Array} buttons The array of buttons to render\n     */\n    _setButtonsTo($target, buttons) {\n        var self = this;\n        $target.empty();\n        buttons.forEach((buttonData) => {\n            var $button = dom.renderButton({\n                attrs: {\n                    class: buttonData.classes || (buttons.length > 1 ? 'btn-secondary' : 'btn-primary'),\n                    disabled: buttonData.disabled,\n                    'data-hotkey': buttonData.hotkey,\n                },\n                icon: buttonData.icon,\n                text: buttonData.text,\n            });\n            $button.on('click', function (e) {\n                var def;\n                if (buttonData.click) {\n                    def = buttonData.click.call(self, e);\n                }\n                if (buttonData.close) {\n                    self.onForceClose = false;\n                    Promise.resolve(def).then(self.close.bind(self));\n                }\n            });\n            if (self.technical) {\n                $target.append($button);\n            } else {\n                $target.prepend($button);\n            }\n        });\n    },\n    /**\n     * Returns false for non-\"blocking\" dialogs.\n     * This is intended to be overridden by subclasses.\n     *\n     * @private\n     * @param {int} index\n     * @param {element} el The element of a dialog.\n     * @returns {boolean}\n     */\n    _isBlocking(index, el) {\n        return true;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n    /**\n     * @private\n     */\n    _onCloseDialog: function (ev) {\n        ev.stopPropagation();\n        this.close();\n    },\n    /**\n     * Moves the focus to the first button primary in the footer of the dialog\n     *\n     * @private\n     * @param {odooEvent} e\n     */\n    _onFocusControlButton: function (e) {\n        if (this.$footer) {\n            if (e) {\n                e.stopPropagation();\n            }\n            this.$footer.find('.btn-primary:visible:first()').focus();\n        }\n    },\n    /**\n     * Manages the TAB key on the buttons. If you the focus is on a primary\n     * button and the users tries to tab to go to the next button, display\n     * a tooltip\n     *\n     * @param {jQueryEvent} e\n     * @private\n     */\n    _onFooterButtonKeyDown: function (e) {\n        switch(e.key) {\n            case \"Tab\":\n                if (!e.shiftKey && e.target.classList.contains(\"btn-primary\")) {\n                    e.preventDefault();\n                    var $primaryButton = $(e.target);\n                    $primaryButton.tooltip({\n                        delay: {show: 200, hide:0},\n                        title: function(){\n                            return renderToElement('FormButton.tooltip',{title:$primaryButton.text().toUpperCase()});\n                        },\n                        trigger: 'manual',\n                    });\n                    $primaryButton.tooltip('show');\n                }\n                break;\n        }\n    }\n});\n\n// static method to open simple alert dialog\nDialog.alert = function (owner, message, options) {\n    var buttons = [{\n        text: _t(\"Ok\"),\n        close: true,\n        click: options && options.confirm_callback,\n    }];\n    return new Dialog(owner, Object.assign({\n        size: 'medium',\n        buttons: buttons,\n        $content: $('<main/>', {\n            role: 'alert',\n            text: message,\n        }),\n        title: _t(\"Alert\"),\n        onForceClose: options && (options.onForceClose || options.confirm_callback),\n    }, options)).open({shouldFocusButtons:true});\n};\n\n// static method to open simple confirm dialog\nDialog.confirm = function (owner, message, options) {\n    /**\n     * Creates an improved callback from the given callback value at the given\n     * key from the parent function's options parameter. This is improved to:\n     *\n     * - Prevent calling given callbacks once one has been called.\n     *\n     * - Re-allow calling callbacks once a previous callback call's returned\n     *   Promise is rejected.\n     */\n    let isBlocked = false;\n    function makeCallback(key) {\n        const callback = options && options[key];\n        return function () {\n            if (isBlocked) {\n                // Do not (re)call any callback and return a rejected Promise\n                // to prevent closing the Dialog.\n                return Promise.reject();\n            }\n            isBlocked = true;\n            const callbackRes = callback && callback.apply(this, arguments);\n            Promise.resolve(callbackRes).catch((e) => {\n                isBlocked = false;\n                return Promise.reject(e);\n            });\n            return callbackRes;\n        };\n    }\n    var buttons = [\n        {\n            text: _t(\"Ok\"),\n            classes: 'btn-primary',\n            close: true,\n            click: makeCallback('confirm_callback'),\n        },\n        {\n            text: _t(\"Cancel\"),\n            close: true,\n            click: makeCallback('cancel_callback'),\n        }\n    ];\n    return new Dialog(owner, Object.assign({\n        size: 'medium',\n        buttons: buttons,\n        $content: $('<main/>', {\n            role: 'alert',\n            text: message,\n        }),\n        title: _t(\"Confirmation\"),\n        onForceClose: options && (options.onForceClose || options.cancel_callback),\n    }, options)).open({shouldFocusButtons:true});\n};\n\nexport default Dialog;\n", "/** @odoo-module **/\n\nexport const DEBOUNCE = 400;\nexport const BUTTON_HANDLER_SELECTOR = 'a, button, input[type=\"submit\"], input[type=\"button\"], .btn';\n\n/**\n * Protects a function which is to be used as a handler by preventing its\n * execution for the duration of a previous call to it (including async\n * parts of that call).\n *\n * Limitation: as the handler is ignored during async actions,\n * the 'preventDefault' or 'stopPropagation' calls it may want to do\n * will be ignored too. Using the 'preventDefault' and 'stopPropagation'\n * arguments solves that problem.\n *\n * @param {function} fct\n *      The function which is to be used as a handler. If a promise\n *      is returned, it is used to determine when the handler's action is\n *      finished. Otherwise, the return is used as jQuery uses it.\n * @param {function|boolean} preventDefault\n * @param {function|boolean} stopPropagation\n */\nexport function makeAsyncHandler(fct, preventDefault, stopPropagation) {\n    // TODO in master, add those as arguments.\n    const stopImmediatePropagation = this && this.__makeAsyncHandler_stopImmediatePropagation;\n\n    let pending = false;\n    function _isLocked() {\n        return pending;\n    }\n    function _lock() {\n        pending = true;\n    }\n    function _unlock() {\n        pending = false;\n    }\n    return function (ev) {\n        if (preventDefault === true || preventDefault && preventDefault()) {\n            ev.preventDefault();\n        }\n        if (stopPropagation === true || stopPropagation && stopPropagation()) {\n            ev.stopPropagation();\n        }\n        if (stopImmediatePropagation === true || stopImmediatePropagation && stopImmediatePropagation()) {\n            ev.stopImmediatePropagation();\n        }\n\n        if (_isLocked()) {\n            // If a previous call to this handler is still pending, ignore\n            // the new call.\n            return;\n        }\n\n        _lock();\n        const result = fct.apply(this, arguments);\n        Promise.resolve(result).then(_unlock, _unlock);\n        return result;\n    };\n}\n\n/**\n * Creates a debounced version of a function to be used as a button click\n * handler. Also improves the handler to disable the button for the time of\n * the debounce and/or the time of the async actions it performs.\n *\n * Limitation: if two handlers are put on the same button, the button will\n * become enabled again once any handler's action finishes (multiple click\n * handlers should however not be bound to the same button).\n *\n * @param {function} fct\n *      The function which is to be used as a button click handler. If a\n *      promise is returned, it is used to determine when the button can be\n *      re-enabled. Otherwise, the return is used as jQuery uses it.\n */\nexport function makeButtonHandler(fct) {\n    // TODO in master, add those as arguments. Even though buttons are probably\n    // blocked by the o_website_btn_loading and related classes, it is not\n    // necessarily true for all event types.\n    const preventDefault = this && this.__makeButtonHandler_preventDefault;\n    const stopPropagation = this && this.__makeButtonHandler_stopPropagation;\n    const stopImmediatePropagation = this && this.__makeButtonHandler_stopImmediatePropagation;\n\n    // Fallback: if the final handler is not bound to a button, at least\n    // make it an async handler (also handles the case where some events\n    // might ignore the disabled state of the button).\n    fct = makeAsyncHandler.call({\n        '__makeAsyncHandler_stopImmediatePropagation': stopImmediatePropagation,\n    }, fct, preventDefault, stopPropagation);\n\n    return function (ev) {\n        const result = fct.apply(this, arguments);\n\n        const buttonEl = ev.target && ev.target.closest && ev.target.closest(BUTTON_HANDLER_SELECTOR);\n        if (!(buttonEl instanceof HTMLElement)) {\n            return result;\n        }\n\n        // Disable the button for the duration of the handler's action\n        // or at least for the duration of the click debounce. This makes\n        // a 'real' debounce creation useless. Also, during the debouncing\n        // part, the button is disabled without any visual effect.\n        buttonEl.classList.add('pe-none');\n        Promise.resolve(DEBOUNCE && new Promise(r => setTimeout(r, DEBOUNCE)))\n            .then(function () {\n                buttonEl.classList.remove('pe-none');\n                const restore = addButtonLoadingEffect(buttonEl);\n                return Promise.resolve(result).then(restore, restore);\n            });\n\n        return result;\n    };\n}\n\n/**\n * Gives the button a loading effect by disabling it and adding a `fa`\n * spinner icon.\n * The existing button `fa` icons will be hidden through css.\n *\n * @param {HTMLElement} btnEl - the button to disable/load\n * @return {function} a callback function that will restore the button\n *         initial state\n */\nexport function addButtonLoadingEffect(btnEl) {\n    if (!(btnEl instanceof HTMLElement)) {\n        return () => {};\n    }\n    // Note that pe-none is used alongside \"disabled\" so that the behavior is\n    // the same on links not using the \"btn\" class -> pointer-events disabled.\n    btnEl.classList.add('o_website_btn_loading', 'disabled', 'pe-none');\n    btnEl.disabled = true;\n    const loaderEl = document.createElement('span');\n    loaderEl.classList.add('fa', 'fa-refresh', 'fa-spin', 'me-2');\n    btnEl.prepend(loaderEl);\n    return () => {\n        btnEl.classList.remove('o_website_btn_loading', 'disabled', 'pe-none');\n        btnEl.disabled = false;\n        loaderEl.remove();\n    };\n}\n", "/** @odoo-module **/\n\n/**\n * DOM Utility helpers\n *\n * We collect in this file some helpers to help integrate various DOM\n * functionalities with the odoo framework.  A common theme in these functions\n * is the use of the main core.bus, which helps the framework react when\n * something happens in the DOM.\n */\n\nimport * as minimalDom from '@web/legacy/js/core/minimal_dom';\n\nconst dom = Object.assign({}, minimalDom, {\n    /**\n     * jQuery find function behavior is::\n     *\n     *      $('A').find('A B') <=> $('A A B')\n     *\n     * The searches behavior to find options' DOM needs to be::\n     *\n     *      $('A').find('A B') <=> $('A B')\n     *\n     * This is what this function does.\n     *\n     * @param {jQuery} $from - the jQuery element(s) from which to search\n     * @param {string} selector - the CSS selector to match\n     * @param {boolean} [addBack=false] - whether or not the $from element\n     *                                  should be considered in the results\n     * @returns {jQuery}\n     */\n    cssFind: function ($from, selector, addBack) {\n        var $results;\n\n        // No way to correctly parse a complex jQuery selector but having no\n        // spaces should be a good-enough condition to use a simple find\n        var multiParts = selector.indexOf(' ') >= 0;\n        if (multiParts) {\n            $results = $from.closest('body').find(selector).filter((i, $el) => $from.has($el).length);\n        } else {\n            $results = $from.find(selector);\n        }\n\n        if (addBack && $from.is(selector)) {\n            $results = $results.add($from);\n        }\n\n        return $results;\n    },\n    /**\n     * Renders a button with standard odoo template. This does not use any xml\n     * template to avoid forcing the frontend part to lazy load a xml file for\n     * each widget which might want to create a simple button.\n     *\n     * @param {Object} options\n     * @param {Object} [options.attrs] - Attributes to put on the button element\n     * @param {string} [options.attrs.type='button']\n     * @param {string} [options.attrs.class='btn-secondary']\n     *        Note: automatically completed with \"btn btn-X\"\n     *        (@see options.size for the value of X)\n     * @param {string} [options.size] - @see options.attrs.class\n     * @param {string} [options.icon]\n     *        The specific fa icon class (for example \"fa-home\") or an URL for\n     *        an image to use as icon.\n     * @param {string} [options.text] - the button's text\n     * @returns {jQuery}\n     */\n    renderButton: function (options) {\n        var jQueryParams = Object.assign({\n            type: 'button',\n        }, options.attrs || {});\n\n        var extraClasses = jQueryParams.class;\n        if (extraClasses) {\n            // If we got extra classes, check if old oe_highlight/oe_link\n            // classes are given and switch them to the right classes (those\n            // classes have no style associated to them anymore).\n            // TODO ideally this should be dropped at some point.\n            extraClasses = extraClasses.replace(/\\boe_highlight\\b/g, 'btn-primary')\n                                       .replace(/\\boe_link\\b/g, 'btn-link');\n        }\n\n        jQueryParams.class = 'btn';\n        if (options.size) {\n            jQueryParams.class += (' btn-' + options.size);\n        }\n        jQueryParams.class += (' ' + (extraClasses || 'btn-secondary'));\n\n        var $button = $('<button/>', jQueryParams);\n\n        if (options.icon) {\n            if (options.icon.substr(0, 3) === 'fa-') {\n                $button.append($('<i/>', {\n                    class: 'fa fa-fw o_button_icon ' + options.icon,\n                }));\n            } else {\n                $button.append($('<img/>', {\n                    src: options.icon,\n                }));\n            }\n        }\n        if (options.text) {\n            $button.append($('<span/>', {\n                text: options.text,\n            }));\n        }\n\n        return $button;\n    },\n    /**\n     * Computes the size by which a scrolling point should be decreased so that\n     * the top fixed elements of the page appear above that scrolling point.\n     *\n     * @return {Document} [document=window.document]\n     * @returns {number}\n     */\n    scrollFixedOffset(document = window.document) {\n        let size = 0;\n        for (const el of document.querySelectorAll('.o_top_fixed_element')) {\n            size += $(el).outerHeight();\n        }\n        return size;\n    },\n    /**\n     * @param {HTMLElement|string} el - the element to scroll to. If \"el\" is a\n     *      string, it must be a valid selector of an element in the DOM or\n     *      '#top' or '#bottom'. If it is an HTML element, it must be present\n     *      in the DOM.\n     *      Limitation: if the element is using a fixed position, this\n     *      function cannot work except if is the header (el is then either a\n     *      string set to '#top' or an HTML element with the \"top\" id) or the\n     *      footer (el is then a string set to '#bottom' or an HTML element\n     *      with the \"bottom\" id) for which exceptions have been made.\n     * @param {number} [options] - same as animate of jQuery\n     * @param {number} [options.extraOffset=0]\n     *      extra offset to add on top of the automatic one (the automatic one\n     *      being computed based on fixed header sizes)\n     * @param {number} [options.forcedOffset]\n     *      offset used instead of the automatic one (extraOffset will be\n     *      ignored too)\n     * @param {JQuery} [options.$scrollable] the $element to scroll\n     * @return {Promise}\n     */\n    scrollTo(el, options = {}) {\n        if (!el) {\n            throw new Error(\"The scrollTo function was called without any given element\");\n        }\n        const $el = $(el);\n        if (typeof(el) === 'string' && $el[0]) {\n            el = $el[0];\n        }\n        const isTopOrBottomHidden = (el === '#top' || el === '#bottom');\n        const $scrollable = isTopOrBottomHidden ? $().getScrollingElement() : (options.$scrollable || $el.parent().closestScrollable());\n        // If $scrollable and $el are not in the same document, we can safely\n        // assume $el is in an $iframe. We retrieve it by filtering the list of\n        // iframes in $scrollable to keep only the one that contains $el.\n        const scrollDocument = $scrollable[0].ownerDocument;\n        const isInOneDocument = isTopOrBottomHidden || scrollDocument === $el[0].ownerDocument;\n        const $iframe = !isInOneDocument && $scrollable.find('iframe').filter((i, node) => $(node).contents().has($el));\n        const $topLevelScrollable = $().getScrollingElement(scrollDocument);\n        const isTopScroll = $scrollable.is($topLevelScrollable);\n\n        function _computeScrollTop() {\n            if (el === '#top' || el.id === 'top') {\n                return 0;\n            }\n            if (el === '#bottom' || el.id === 'bottom') {\n                return $scrollable[0].scrollHeight - $scrollable[0].clientHeight;\n            }\n\n            el.classList.add(\"o_check_scroll_position\");\n            let offsetTop = $el.offset().top;\n            el.classList.remove(\"o_check_scroll_position\");\n            if (el.classList.contains('d-none')) {\n                el.classList.remove('d-none');\n                offsetTop = $el.offset().top;\n                el.classList.add('d-none');\n            }\n            const isDocScrollingEl = $scrollable.is(el.ownerDocument.scrollingElement);\n            let elPosition = offsetTop\n                - ($scrollable.offset().top - (isDocScrollingEl ? 0 : $scrollable[0].scrollTop));\n            if (!isInOneDocument && $iframe.length) {\n                elPosition += $iframe.offset().top;\n            }\n            let offset = options.forcedOffset;\n            if (offset === undefined) {\n                offset = (isTopScroll ? dom.scrollFixedOffset(scrollDocument) : 0) + (options.extraOffset || 0);\n            }\n            return Math.max(0, elPosition - offset);\n        }\n\n        const originalScrollTop = _computeScrollTop();\n\n        return new Promise(resolve => {\n            const clonedOptions = Object.assign({}, options);\n\n            // During the animation, detect any change needed for the scroll\n            // offset. If any occurs, stop the animation and continuing it to\n            // the new scroll point for the remaining time.\n            // Note: limitation, the animation won't be as fluid as possible if\n            // the easing mode is different of 'linear'.\n            clonedOptions.progress = function (a, b, remainingMs) {\n                if (options.progress) {\n                    options.progress.apply(this, ...arguments);\n                }\n                const newScrollTop = _computeScrollTop();\n                if (Math.abs(newScrollTop - originalScrollTop) <= 1.0\n                        && (isTopOrBottomHidden || !(el.classList.contains('o_transitioning')))) {\n                    return;\n                }\n                $scrollable.stop();\n                dom.scrollTo(el, Object.assign({}, options, {\n                    duration: remainingMs,\n                    easing: 'linear',\n                })).then(() => resolve());\n            };\n\n            // Detect the end of the animation to be able to indicate it to\n            // the caller via the returned Promise.\n            clonedOptions.complete = function () {\n                if (options.complete) {\n                    options.complete.apply(this, ...arguments);\n                }\n                resolve();\n            };\n\n            $scrollable.animate({scrollTop: originalScrollTop}, clonedOptions);\n        });\n    },\n});\nexport default dom;\n", "/** @odoo-module **/\n\nimport { floatIsZero } from \"@web/core/utils/numbers\";\n\n/**\n * Mixin to structure objects' life-cycles folowing a parent-children\n * relationship. Each object can a have a parent and multiple children.\n * When an object is destroyed, all its children are destroyed too releasing\n * any resource they could have reserved before.\n *\n * @name ParentedMixin\n * @mixin\n */\nvar ParentedMixin = {\n    __parentedMixin : true,\n    init: function () {\n        this.__parentedDestroyed = false;\n        this.__parentedChildren = [];\n        this.__parentedParent = null;\n    },\n    /**\n     * Set the parent of the current object. When calling this method, the\n     * parent will also be informed and will return the current object\n     * when its getChildren() method is called. If the current object did\n     * already have a parent, it is unregistered before, which means the\n     * previous parent will not return the current object anymore when its\n     * getChildren() method is called.\n     */\n    setParent : function (parent) {\n        if (this.getParent()) {\n            if (this.getParent().__parentedMixin) {\n                const children = this.getParent().getChildren();\n                this.getParent().__parentedChildren = children.filter(\n                    (child) => child.$el !== this.$el\n                );\n            }\n        }\n        this.__parentedParent = parent;\n        if (parent && parent.__parentedMixin) {\n            parent.__parentedChildren.push(this);\n        }\n    },\n    /**\n     * Return the current parent of the object (or null).\n     */\n    getParent : function () {\n        return this.__parentedParent;\n    },\n    /**\n     * Return a list of the children of the current object.\n     */\n    getChildren : function () {\n        return [...this.__parentedChildren];\n    },\n    /**\n     * Returns true if destroy() was called on the current object.\n     */\n    isDestroyed : function () {\n        return this.__parentedDestroyed;\n    },\n    /**\n     * Utility method to only execute asynchronous actions if the current\n     * object has not been destroyed.\n     *\n     * @param {Promise} promise The promise representing the asynchronous\n     *                             action.\n     * @param {bool} [shouldReject=false] If true, the returned promise will be\n     *                              rejected with no arguments if the current\n     *                              object is destroyed. If false, the\n     *                              returned promise will never be resolved\n     *                              or rejected.\n     * @returns {Promise} A promise that will mirror the given promise if\n     *                       everything goes fine but will either be rejected\n     *                       with no arguments or never resolved if the\n     *                       current object is destroyed.\n     */\n    alive: function (promise, shouldReject) {\n        var self = this;\n\n        return new Promise(function (resolve, reject) {\n            promise.then(function (result) {\n                if (!self.isDestroyed()) {\n                    resolve(result);\n                } else if (shouldReject) {\n                    reject();\n                }\n            }).catch(function (reason) {\n                if (!self.isDestroyed()) {\n                    reject(reason);\n                } else if (shouldReject) {\n                    reject();\n                }\n            });\n        });\n    },\n    /**\n     * Inform the object it should destroy itself, releasing any\n     * resource it could have reserved.\n     */\n    destroy : function () {\n        this.getChildren().forEach(function (child) {\n            child.destroy();\n        });\n        this.setParent(undefined);\n        this.__parentedDestroyed = true;\n    },\n    /**\n     * Find the closest ancestor matching predicate\n     */\n    findAncestor: function (predicate) {\n        var ancestor = this;\n        while (ancestor && !(predicate(ancestor)) && ancestor.getParent) {\n            ancestor = ancestor.getParent();\n        }\n        return ancestor;\n    },\n};\n\nfunction OdooEvent(target, name, data) {\n    this.target = target;\n    this.name = name;\n    this.data = Object.create(null);\n    Object.assign(this.data, data);\n    this.stopped = false;\n}\n\nOdooEvent.prototype.stopPropagation = function () {\n    this.stopped = true;\n};\n\nOdooEvent.prototype.is_stopped = function () {\n    return this.stopped;\n};\n\n/**\n * Backbone's events. Do not ever use it directly, use EventDispatcherMixin instead.\n *\n * This class just handle the dispatching of events, it is not meant to be extended,\n * nor used directly. All integration with parenting and automatic unregistration of\n * events is done in EventDispatcherMixin.\n *\n * Copyright notice for the following Class:\n *\n * (c) 2010-2012 Jeremy Ashkenas, DocumentCloud Inc.\n * Backbone may be freely distributed under the MIT license.\n * For all details and documentation:\n * http://backbonejs.org\n *\n */\nclass Events {\n    on(events, callback, context) {\n        var ev;\n        events = events.split(/\\s+/);\n        var calls = this._callbacks || (this._callbacks = {});\n        while ((ev = events.shift())) {\n            var list = calls[ev] || (calls[ev] = {});\n            var tail = list.tail || (list.tail = list.next = {});\n            tail.callback = callback;\n            tail.context = context;\n            list.tail = tail.next = {};\n        }\n        return this;\n    }\n\n    off(events, callback, context) {\n        var ev, calls, node;\n        if (!events) {\n            delete this._callbacks;\n        } else if ((calls = this._callbacks)) {\n            events = events.split(/\\s+/);\n            while ((ev = events.shift())) {\n                node = calls[ev];\n                delete calls[ev];\n                if (!callback || !node)\n                    continue;\n                while ((node = node.next) && node.next) {\n                    if (node.callback === callback\n                            && (!context || node.context === context))\n                        continue;\n                    this.on(ev, node.callback, node.context);\n                }\n            }\n        }\n        return this;\n    }\n\n    callbackList() {\n        var lst = [];\n        for (const [eventName, el] of Object.entries(this._callbacks || {})) {\n            var node = el;\n            while ((node = node.next) && node.next) {\n                lst.push([eventName, node.callback, node.context]);\n            }\n        }\n        return lst;\n    }\n\n    trigger(events) {\n        var event, node, calls, tail, args, all, rest;\n        if (!(calls = this._callbacks))\n            return this;\n        all = calls.all;\n        (events = events.split(/\\s+/)).push(null);\n        // Save references to the current heads & tails.\n        while ((event = events.shift())) {\n            if (all)\n                events.push({\n                    next : all.next,\n                    tail : all.tail,\n                    event : event\n                });\n            if (!(node = calls[event]))\n                continue;\n            events.push({\n                next : node.next,\n                tail : node.tail\n            });\n        }\n        rest = Array.prototype.slice.call(arguments, 1);\n        while ((node = events.pop())) {\n            tail = node.tail;\n            args = node.event ? [ node.event ].concat(rest) : rest;\n            while ((node = node.next) !== tail) {\n                node.callback.apply(node.context || this, args);\n            }\n        }\n        return this;\n    }\n}\n\n/**\n * Mixin containing an event system. Events are also registered by specifying the target object\n * (the object which will receive the event when it is raised). Both the event-emitting object\n * and the target object store or reference to each other. This is used to correctly remove all\n * reference to the event handler when any of the object is destroyed (when the destroy() method\n * from ParentedMixin is called). Removing those references is necessary to avoid memory leak\n * and phantom events (events which are raised and sent to a previously destroyed object).\n *\n * @name EventDispatcherMixin\n * @mixin\n */\nvar EventDispatcherMixin = Object.assign({}, ParentedMixin, {\n    __eventDispatcherMixin: true,\n    custom_events: {},\n    init: function () {\n        ParentedMixin.init.call(this);\n        this.__edispatcherEvents = new Events();\n        this.__edispatcherRegisteredEvents = [];\n        this._delegateCustomEvents();\n    },\n    /**\n     * Proxies a method of the object, in order to keep the right ``this`` on\n     * method invocations.\n     *\n     * This method is similar to ``Function.prototype.bind``, and\n     * even more so to ``jQuery.proxy`` with a fundamental difference: its\n     * resolution of the method being called is lazy, meaning it will use the\n     * method as it is when the proxy is called, not when the proxy is created.\n     *\n     * Other methods will fix the bound method to what it is when creating the\n     * binding/proxy, which is fine in most javascript code but problematic in\n     * OpenERP Web where developers may want to replace existing callbacks with\n     * theirs.\n     *\n     * The semantics of this precisely replace closing over the method call.\n     *\n     * @param {String|Function} method function or name of the method to invoke\n     * @returns {Function} proxied method\n     */\n    proxy: function (method) {\n        var self = this;\n        return function () {\n            var fn = (typeof method === 'string') ? self[method] : method;\n            if (fn === void 0) {\n                throw new Error(\"Couldn't find method '\" + method + \"' in widget \" + self);\n            }\n            return fn.apply(self, arguments);\n        };\n    },\n    _delegateCustomEvents: function () {\n        if (Object.keys(this.custom_events || {}).length === 0) { return; }\n        for (var key in this.custom_events) {\n            if (!this.custom_events.hasOwnProperty(key)) { continue; }\n\n            var method = this.proxy(this.custom_events[key]);\n            this.on(key, this, method);\n        }\n    },\n    on: function (events, dest, func) {\n        var self = this;\n        if (typeof func !== \"function\") {\n            throw new Error(\"Event handler must be a function.\");\n        }\n        events = events.split(/\\s+/);\n        events.forEach((eventName) => {\n            self.__edispatcherEvents.on(eventName, func, dest);\n            if (dest && dest.__eventDispatcherMixin) {\n                dest.__edispatcherRegisteredEvents.push({name: eventName, func: func, source: self});\n            }\n        });\n        return this;\n    },\n    off: function (events, dest, func) {\n        var self = this;\n        events = events.split(/\\s+/);\n        events.forEach((eventName) => {\n            self.__edispatcherEvents.off(eventName, func, dest);\n            if (dest && dest.__eventDispatcherMixin) {\n                dest.__edispatcherRegisteredEvents = dest.__edispatcherRegisteredEvents.filter(el => {\n                    return !(el.name === eventName && el.func === func && el.source === self);\n                });\n            }\n        });\n        return this;\n    },\n    once: function (events, dest, func) {\n        // similar to this.on(), but func is executed only once\n        var self = this;\n        if (typeof func !== \"function\") {\n            throw new Error(\"Event handler must be a function.\");\n        }\n        self.on(events, dest, function what() {\n            func.apply(this, arguments);\n            self.off(events, dest, what);\n        });\n    },\n    trigger: function () {\n        this.__edispatcherEvents.trigger.apply(this.__edispatcherEvents, arguments);\n        return this;\n    },\n    trigger_up: function (name, info) {\n        var event = new OdooEvent(this, name, info);\n        //console.info('event: ', name, info);\n        this._trigger_up(event);\n        return event;\n    },\n    _trigger_up: function (event) {\n        var parent;\n        this.__edispatcherEvents.trigger(event.name, event);\n        if (!event.is_stopped() && (parent = this.getParent())) {\n            parent._trigger_up(event);\n        }\n    },\n    destroy: function () {\n        var self = this;\n        this.__edispatcherRegisteredEvents.forEach((event) => {\n            event.source.__edispatcherEvents.off(event.name, event.func, self);\n        });\n        this.__edispatcherRegisteredEvents = [];\n        this.__edispatcherEvents.callbackList().forEach(\n            ((cal) => {\n                this.off(cal[0], cal[2], cal[1]);\n            }).bind(this)\n        );\n        this.__edispatcherEvents.off();\n        ParentedMixin.destroy.call(this);\n    },\n});\n\n/**\n * @name PropertiesMixin\n * @mixin\n */\nvar PropertiesMixin = Object.assign({}, EventDispatcherMixin, {\n    init: function () {\n        EventDispatcherMixin.init.call(this);\n        this.__getterSetterInternalMap = {};\n    },\n    set: function (arg1, arg2, arg3) {\n        var map;\n        var options;\n        if (typeof arg1 === \"string\") {\n            map = {};\n            map[arg1] = arg2;\n            options = arg3 || {};\n        } else {\n            map = arg1;\n            options = arg2 || {};\n        }\n        var self = this;\n        var changed = false;\n        for (const [key, val] of Object.entries(map)) {\n            var tmp = self.__getterSetterInternalMap[key];\n            if (tmp === val)\n                return;\n            // seriously, why are you doing this? it is obviously a stupid design.\n            // the properties mixin should not be concerned with handling fields details.\n            // this also has the side effect of introducing a dependency on utils.  Todo:\n            // remove this, or move it elsewhere.  Also, learn OO programming.\n            if (key === 'value' && self.field && self.field.type === 'float' && tmp && val){\n                var digits = self.field.digits;\n                if (Array.isArray(digits)) {\n                    if (floatIsZero(tmp - val, digits[1])) {\n                        return;\n                    }\n                }\n            }\n            changed = true;\n            self.__getterSetterInternalMap[key] = val;\n            if (! options.silent)\n                self.trigger(\"change:\" + key, self, {\n                    oldValue: tmp,\n                    newValue: val\n                });\n        }\n        if (changed)\n            self.trigger(\"change\", self);\n    },\n    get: function (key) {\n        return this.__getterSetterInternalMap[key];\n    }\n});\n\nexport default {\n    ParentedMixin: ParentedMixin,\n    EventDispatcherMixin: EventDispatcherMixin,\n    PropertiesMixin: PropertiesMixin,\n};\n", "/** @odoo-module **/\n\nimport { SERVICES_METADATA } from \"@web/env\";\nimport { Component } from \"@odoo/owl\";\n\nfunction protectMethod(widget, fn) {\n    return function (...args) {\n        return new Promise((resolve, reject) => {\n            Promise.resolve(fn.call(this, ...args))\n                .then((result) => {\n                    if (!widget.isDestroyed()) {\n                        resolve(result);\n                    }\n                })\n                .catch((reason) => {\n                    if (!widget.isDestroyed()) {\n                        reject(reason);\n                    }\n                });\n        });\n    };\n}\n\nvar ServicesMixin = {\n    bindService: function (serviceName) {\n        const { services } = Component.env;\n        const service = services[serviceName];\n        if (!service) {\n            throw new Error(`Service ${serviceName} is not available`);\n        }\n        if (serviceName in SERVICES_METADATA) {\n            if (service instanceof Function) {\n                return protectMethod(this, service);\n            } else {\n                const methods = SERVICES_METADATA[serviceName];\n                const result = Object.create(service);\n                for (const method of methods) {\n                    result[method] = protectMethod(this, service[method]);\n                }\n                return result;\n            }\n        }\n        return service;\n    },\n    /**\n     * @param  {string} service\n     * @param  {string} method\n     * @return {any} result of the service called\n     */\n    call: function (service, method) {\n        var args = Array.prototype.slice.call(arguments, 2);\n        var result;\n        this.trigger_up('call_service', {\n            service: service,\n            method: method,\n            args: args,\n            callback: function (r) {\n                result = r;\n            },\n        });\n        return result;\n    },\n};\n\nexport default ServicesMixin;\n", "/** @odoo-module **/\n\nimport Class from \"@web/legacy/js/core/class\";\nimport mixins from \"@web/legacy/js/core/mixins\";\nimport ServicesMixin from \"@web/legacy/js/core/service_mixins\";\nimport { loadBundle } from \"@web/core/assets\";\nimport { renderToElement } from \"@web/core/utils/render\";\n\n/**\n * Base class for all visual components. Provides a lot of functions helpful\n * for the management of a part of the DOM.\n *\n * Widget handles:\n *\n * - Rendering with QWeb.\n * - Life-cycle management and parenting (when a parent is destroyed, all its\n *   children are destroyed too).\n * - Insertion in DOM.\n *\n * **Guide to create implementations of the Widget class**\n *\n * Here is a sample child class::\n *\n *     var MyWidget = Widget.extend({\n *         // the name of the QWeb template to use for rendering\n *         template: \"MyQWebTemplate\",\n *\n *         init: function (parent) {\n *             this._super(parent);\n *             // stuff that you want to init before the rendering\n *         },\n *         willStart: function () {\n *             // async work that need to be done before the widget is ready\n *             // this method should return a promise\n *         },\n *         start: function() {\n *             // stuff you want to make after the rendering, `this.$el` holds a correct value\n *             this.$(\".my_button\").click(/* an example of event binding * /);\n *\n *             // if you have some asynchronous operations, it's a good idea to return\n *             // a promise in start(). Note that this is quite rare, and if you\n *             // need to fetch some data, this should probably be done in the\n *             // willStart method\n *             var promise = this._rpc(...);\n *             return promise;\n *         }\n *     });\n *\n * Now this class can simply be used with the following syntax::\n *\n *     var myWidget = new MyWidget(this);\n *     myWidget.appendTo($(\".some-div\"));\n *\n * With these two lines, the MyWidget instance was initialized, rendered,\n * inserted into the DOM inside the ``.some-div`` div and its events were\n * bound.\n *\n * And of course, when you don't need that widget anymore, just do::\n *\n *     myWidget.destroy();\n *\n * That will kill the widget in a clean way and erase its content from the dom.\n */\n\nexport var Widget = Class.extend(mixins.PropertiesMixin, ServicesMixin, {\n    // Backbone-ish API\n    tagName: 'div',\n    id: null,\n    className: null,\n    attributes: {},\n    events: {},\n    /**\n     * The name of the QWeb template that will be used for rendering. Must be\n     * redefined in subclasses or the default render() method can not be used.\n     *\n     * @type {null|string}\n     */\n    template: null,\n    /**\n     * List of paths to css files that need to be loaded before the widget can\n     * be rendered. This will not induce loading anything that has already been\n     * loaded.\n     *\n     * @type {null|string[]}\n     */\n    cssLibs: null,\n    /**\n     * List of paths to js files that need to be loaded before the widget can\n     * be rendered. This will not induce loading anything that has already been\n     * loaded.\n     *\n     * @type {null|string[]}\n     */\n    jsLibs: null,\n    /**\n     * List of xmlID that need to be loaded before the widget can be rendered.\n     * The content css (link file or style tag) and js (file or inline) of the\n     * assets are loaded.\n     * This will not induce loading anything that has already been\n     * loaded.\n     *\n     * @type {null|string[]}\n     */\n    assetLibs: null,\n\n    /**\n     * Constructs the widget and sets its parent if a parent is given.\n     *\n     * @param {Widget|null} parent Binds the current instance to the given Widget\n     *   instance. When that widget is destroyed by calling destroy(), the\n     *   current instance will be destroyed too. Can be null.\n     */\n    init: function (parent) {\n        mixins.PropertiesMixin.init.call(this);\n        this.setParent(parent);\n        // Bind on_/do_* methods to this\n        // We might remove this automatic binding in the future\n        for (var name in this) {\n            if(typeof(this[name]) === \"function\") {\n                if((/^on_|^do_/).test(name)) {\n                    this[name] = this[name].bind(this);\n                }\n            }\n        }\n    },\n    /**\n     * Method called between @see init and @see start. Performs asynchronous\n     * calls required by the rendering and the start method.\n     *\n     * This method should return a Promose which is resolved when start can be\n     * executed.\n     *\n     * @returns {Promise}\n     */\n    willStart: function () {\n        var proms = [];\n        if (this.jsLibs || this.cssLibs || this.assetLibs) {\n            proms.push(loadBundle(this));\n        }\n        return Promise.all(proms);\n    },\n    /**\n     * Method called after rendering. Mostly used to bind actions, perform\n     * asynchronous calls, etc...\n     *\n     * By convention, this method should return an object that can be passed to\n     * Promise.resolve() to inform the caller when this widget has been initialized.\n     *\n     * Note that, for historic reasons, many widgets still do work in the start\n     * method that would be more suited to the willStart method.\n     *\n     * @returns {Promise}\n     */\n    start: function () {\n        return Promise.resolve();\n    },\n    /**\n     * Destroys the current widget, also destroys all its children before\n     * destroying itself.\n     */\n    destroy: function () {\n        mixins.PropertiesMixin.destroy.call(this);\n        if (this.$el) {\n            this.$el.remove();\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Renders the current widget and appends it to the given jQuery object.\n     *\n     * @param {jQuery} target\n     * @returns {Promise}\n     */\n    appendTo: function (target) {\n        var self = this;\n        return this._widgetRenderAndInsert(function (t) {\n            self.$el.appendTo(t);\n        }, target);\n    },\n    /**\n     * Attach the current widget to a dom element\n     *\n     * @param {jQuery} target\n     * @returns {Promise}\n     */\n    attachTo: function (target) {\n        var self = this;\n        this.setElement(target.$el || target);\n        return this.willStart().then(function () {\n            if (self.__parentedDestroyed) {\n                return;\n            }\n            return self.start();\n        });\n    },\n    /**\n     * Hides the widget\n     */\n    do_hide: function () {\n        if (this.$el) {\n            this.$el.addClass('o_hidden');\n        }\n    },\n    /**\n     * Displays the widget\n     */\n    do_show: function () {\n        if (this.$el) {\n            this.$el.removeClass('o_hidden');\n        }\n    },\n    /**\n     * Displays or hides the widget\n     * @param {boolean} [display] use true to show the widget or false to hide it\n     */\n    do_toggle: function (display) {\n        if (typeof display === \"boolean\") {\n            display ? this.do_show() : this.do_hide();\n        } else if (this.$el) {\n            this.$el.hasClass('o_hidden') ? this.do_show() : this.do_hide();\n        }\n    },\n    /**\n     * Renders the current widget and inserts it after to the given jQuery\n     * object.\n     *\n     * @param {jQuery} target\n     * @returns {Promise}\n     */\n    insertAfter: function (target) {\n        var self = this;\n        return this._widgetRenderAndInsert(function (t) {\n            self.$el.insertAfter(t);\n        }, target);\n    },\n    /**\n     * Renders the current widget and inserts it before to the given jQuery\n     * object.\n     *\n     * @param {jQuery} target\n     * @returns {Promise}\n     */\n    insertBefore: function (target) {\n        var self = this;\n        return this._widgetRenderAndInsert(function (t) {\n            self.$el.insertBefore(t);\n        }, target);\n    },\n    /**\n     * Renders the current widget and prepends it to the given jQuery object.\n     *\n     * @param {jQuery} target\n     * @returns {Promise}\n     */\n    prependTo: function (target) {\n        var self = this;\n        return this._widgetRenderAndInsert(function (t) {\n            self.$el.prependTo(t);\n        }, target);\n    },\n    /**\n     * Renders the element. The default implementation renders the widget using\n     * QWeb, `this.template` must be defined. The context given to QWeb contains\n     * the \"widget\" key that references `this`.\n     */\n    renderElement: function () {\n        var $el;\n        if (this.template) {\n            $el = $(renderToElement(this.template, { widget: this }));\n        } else {\n            $el = this._makeDescriptive();\n        }\n        this._replaceElement($el);\n    },\n    /**\n     * Renders the current widget and replaces the given jQuery object.\n     *\n     * @param target A jQuery object or a Widget instance.\n     * @returns {Promise}\n     */\n    replace: function (target) {\n        return this._widgetRenderAndInsert((t) => {\n            this.$el.replaceAll(t);\n        }, target);\n    },\n    /**\n     * Re-sets the widget's root element (el/$el/$el).\n     *\n     * Includes:\n     *\n     * * re-delegating events\n     * * re-binding sub-elements\n     * * if the widget already had a root element, replacing the pre-existing\n     *   element in the DOM\n     *\n     * @param {HTMLElement | jQuery} element new root element for the widget\n     * @return {Widget} this\n     */\n    setElement: function (element) {\n        if (this.$el) {\n            this._undelegateEvents();\n        }\n\n        this.$el = (element instanceof $) ? element : $(element);\n        this.el = this.$el[0];\n\n        this._delegateEvents();\n\n        return this;\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Helper method, for ``this.$el.find(selector)``\n     *\n     * @private\n     * @param {string} selector CSS selector, rooted in $el\n     * @returns {jQuery} selector match\n     */\n    $: function (selector) {\n        if (selector === undefined) {\n            return this.$el;\n        }\n        return this.$el.find(selector);\n    },\n    /**\n     * Attach event handlers for events described in the 'events' key\n     *\n     * @private\n     */\n    _delegateEvents: function () {\n        var events = this.events;\n        if (Object.keys(events || {}).length === 0) { return; }\n\n        for(var key in events) {\n            if (!events.hasOwnProperty(key)) { continue; }\n\n            var method = this.proxy(events[key]);\n\n            var match = /^(\\S+)(\\s+(.*))?$/.exec(key);\n            var event = match[1];\n            var selector = match[3];\n\n            event += '.widget_events';\n            if (!selector) {\n                this.$el.on(event, method);\n            } else {\n                this.$el.on(event, selector, method);\n            }\n        }\n    },\n    /**\n     * Makes a potential root element from the declarative builder of the\n     * widget\n     *\n     * @private\n     * @return {jQuery}\n     */\n    _makeDescriptive: function () {\n        var attrs = Object.assign({}, this.attributes || {});\n        if (this.id) {\n            attrs.id = this.id;\n        }\n        if (this.className) {\n            attrs['class'] = this.className;\n        }\n        var $el = $(document.createElement(this.tagName));\n        if (Object.keys(attrs || {}).length > 0) {\n            $el.attr(attrs);\n        }\n        return $el;\n    },\n    /**\n     * Re-sets the widget's root element and replaces the old root element\n     * (if any) by the new one in the DOM.\n     *\n     * @private\n     * @param {HTMLElement | jQuery} $el\n     * @returns {Widget} this instance, so it can be chained\n     */\n    _replaceElement: function ($el) {\n        var $oldel = this.$el;\n        this.setElement($el);\n        if ($oldel && !$oldel.is(this.$el)) {\n            if ($oldel.length > 1) {\n                $oldel.wrapAll('<div/>');\n                $oldel.parent().replaceWith(this.$el);\n            } else {\n                $oldel.replaceWith(this.$el);\n            }\n        }\n        return this;\n    },\n    /**\n     * Remove all handlers registered on this.$el\n     *\n     * @private\n     */\n    _undelegateEvents: function () {\n        this.$el.off('.widget_events');\n    },\n    /**\n     * Render the widget.  This is a private method, and should really never be\n     * called by anyone (except this widget).  It assumes that the widget was\n     * not willStarted yet.\n     *\n     * @private\n     * @param {function: jQuery -> any} insertion\n     * @param {jQuery} target\n     * @returns {Promise}\n     */\n    _widgetRenderAndInsert: function (insertion, target) {\n        var self = this;\n        return this.willStart().then(function () {\n            if (self.__parentedDestroyed) {\n                return;\n            }\n            self.renderElement();\n            insertion(target);\n            return self.start();\n        });\n    },\n});\n\nexport default Widget;\n", "/** @odoo-module **/\n\nimport { App, Component, useState, xml } from \"@odoo/owl\";\nimport { templates } from \"@web/core/assets\";\nimport { _t } from \"@web/core/l10n/translation\";\n\nconst rootTemplate = xml`<SubComp t-props=\"state\"/>`;\nexport async function attachComponent(parent, element, componentClass, props = {}) {\n    class Root extends Component {\n        static template = rootTemplate;\n        static components = { SubComp: componentClass };\n        state = useState(props);\n    }\n\n    const env = Component.env;\n    const app = new App(Root, {\n        env,\n        templates,\n        dev: env.debug,\n        translatableAttributes: [\"data-tooltip\"],\n        translateFn: _t,\n    });\n\n    if (parent.__parentedMixin) {\n        parent.__parentedChildren.push({\n            get $el() {\n                return $(app.root.el);\n            },\n            destroy() {\n                app.destroy();\n            },\n        });\n    }\n\n    const originalValidateTarget = App.validateTarget;\n    App.validateTarget = () => {};\n    const mountPromise = app.mount(element);\n    App.validateTarget = originalValidateTarget;\n    const component = await mountPromise;\n    const subComp = Object.values(component.__owl__.children)[0].component;\n    return {\n        component: subComp,\n        destroy() {\n            app.destroy();\n        },\n        update(props) {\n            Object.assign(component.state, props);\n        },\n    };\n}\n", "/*!\n * Cropper.js v1.5.5\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2019-08-04T02:26:31.160Z\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Cropper = factory());\n}(this, function () { 'use strict';\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  var WINDOW = IS_BROWSER ? window : {};\n  var IS_TOUCH_DEVICE = IS_BROWSER ? 'ontouchstart' in WINDOW.document.documentElement : false;\n  var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\n  var NAMESPACE = 'cropper'; // Actions\n\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw'; // Classes\n\n  var CLASS_CROP = \"\".concat(NAMESPACE, \"-crop\");\n  var CLASS_DISABLED = \"\".concat(NAMESPACE, \"-disabled\");\n  var CLASS_HIDDEN = \"\".concat(NAMESPACE, \"-hidden\");\n  var CLASS_HIDE = \"\".concat(NAMESPACE, \"-hide\");\n  var CLASS_INVISIBLE = \"\".concat(NAMESPACE, \"-invisible\");\n  var CLASS_MODAL = \"\".concat(NAMESPACE, \"-modal\");\n  var CLASS_MOVE = \"\".concat(NAMESPACE, \"-move\"); // Data keys\n\n  var DATA_ACTION = \"\".concat(NAMESPACE, \"Action\");\n  var DATA_PREVIEW = \"\".concat(NAMESPACE, \"Preview\"); // Drag modes\n\n  var DRAG_MODE_CROP = 'crop';\n  var DRAG_MODE_MOVE = 'move';\n  var DRAG_MODE_NONE = 'none'; // Events\n\n  var EVENT_CROP = 'crop';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\n  var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\n  var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\n  var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\n  var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\n  var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\n  var EVENT_READY = 'ready';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_WHEEL = 'wheel';\n  var EVENT_ZOOM = 'zoom'; // Mime types\n\n  var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps\n\n  var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\n  var REGEXP_DATA_URL = /^data:/;\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n  var REGEXP_TAG_NAME = /^img|canvas$/i; // Misc\n  // Inspired by the default width and height of a canvas element.\n\n  var MIN_CONTAINER_WIDTH = 200;\n  var MIN_CONTAINER_HEIGHT = 100;\n\n  var DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n    // Define the dragging mode of the cropper\n    dragMode: DRAG_MODE_CROP,\n    // 'crop', 'move' or 'none'\n    // Define the initial aspect ratio of the crop box\n    initialAspectRatio: NaN,\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: '',\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  var TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n\n  /**\n   * Check if the given value is not a number.\n   */\n\n  var isNaN = Number.isNaN || WINDOW.isNaN;\n  /**\n   * Check if the given value is a number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n   */\n\n  function isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n  }\n  /**\n   * Check if the given value is a positive number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n   */\n\n  var isPositiveNumber = function isPositiveNumber(value) {\n    return value > 0 && value < Infinity;\n  };\n  /**\n   * Check if the given value is undefined.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n   */\n\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n  /**\n   * Check if the given value is an object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n   */\n\n  function isObject(value) {\n    return _typeof(value) === 'object' && value !== null;\n  }\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\n   * Check if the given value is a plain object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n   */\n\n  function isPlainObject(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n\n    try {\n      var _constructor = value.constructor;\n      var prototype = _constructor.prototype;\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Check if the given value is a function.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n   */\n\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n  var slice = Array.prototype.slice;\n  /**\n   * Convert array-like or iterable object to an array.\n   * @param {*} value - The value to convert.\n   * @returns {Array} Returns a new array.\n   */\n\n  function toArray(value) {\n    return Array.from ? Array.from(value) : slice.call(value);\n  }\n  /**\n   * Iterate the given data.\n   * @param {*} data - The data to iterate.\n   * @param {Function} callback - The process function for each element.\n   * @returns {*} The original data.\n   */\n\n  function forEach(data, callback) {\n    if (data && isFunction(callback)) {\n      if (Array.isArray(data) || isNumber(data.length)\n      /* array-like */\n      ) {\n          toArray(data).forEach(function (value, key) {\n            callback.call(data, value, key, data);\n          });\n        } else if (isObject(data)) {\n        Object.keys(data).forEach(function (key) {\n          callback.call(data, data[key], key, data);\n        });\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Extend the given object.\n   * @param {*} target - The target object to extend.\n   * @param {*} args - The rest objects for merging to the target object.\n   * @returns {Object} The extended object.\n   */\n\n  var assign = Object.assign || function assign(target) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (isObject(target) && args.length > 0) {\n      args.forEach(function (arg) {\n        if (isObject(arg)) {\n          Object.keys(arg).forEach(function (key) {\n            target[key] = arg[key];\n          });\n        }\n      });\n    }\n\n    return target;\n  };\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n  /**\n   * Normalize decimal number.\n   * Check out {@link http://0.30000000000000004.com/}\n   * @param {number} value - The value to normalize.\n   * @param {number} [times=100000000000] - The times for normalizing.\n   * @returns {number} Returns the normalized number.\n   */\n\n  function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n  }\n  var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\n  /**\n   * Apply styles to the given element.\n   * @param {Element} element - The target element.\n   * @param {Object} styles - The styles for applying.\n   */\n\n  function setStyle(element, styles) {\n    var style = element.style;\n    forEach(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value = \"\".concat(value, \"px\");\n      }\n\n      style[property] = value;\n    });\n  }\n  /**\n   * Check if the given element has a special class.\n   * @param {Element} element - The element to check.\n   * @param {string} value - The class to search.\n   * @returns {boolean} Returns `true` if the special class was found.\n   */\n\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n  /**\n   * Add classes to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be added.\n   */\n\n  function addClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        addClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.add(value);\n      return;\n    }\n\n    var className = element.className.trim();\n\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = \"\".concat(className, \" \").concat(value);\n    }\n  }\n  /**\n   * Remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be removed.\n   */\n\n  function removeClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        removeClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.remove(value);\n      return;\n    }\n\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n  /**\n   * Add or remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be toggled.\n   * @param {boolean} added - Add only.\n   */\n\n  function toggleClass(element, value, added) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n      return;\n    } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n  var REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n  /**\n   * Transform the given string from camelCase to kebab-case\n   * @param {string} value - The value to transform.\n   * @returns {string} The transformed value.\n   */\n\n  function toParamCase(value) {\n    return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\n  }\n  /**\n   * Get data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to get.\n   * @returns {string} The data value.\n   */\n\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    }\n\n    if (element.dataset) {\n      return element.dataset[name];\n    }\n\n    return element.getAttribute(\"data-\".concat(toParamCase(name)));\n  }\n  /**\n   * Set data to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to set.\n   * @param {string} data - The data value.\n   */\n\n  function setData(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute(\"data-\".concat(toParamCase(name)), data);\n    }\n  }\n  /**\n   * Remove data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to remove.\n   */\n\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      try {\n        delete element[name];\n      } catch (error) {\n        element[name] = undefined;\n      }\n    } else if (element.dataset) {\n      // #128 Safari not allows to delete dataset property\n      try {\n        delete element.dataset[name];\n      } catch (error) {\n        element.dataset[name] = undefined;\n      }\n    } else {\n      element.removeAttribute(\"data-\".concat(toParamCase(name)));\n    }\n  }\n  var REGEXP_SPACES = /\\s\\s*/;\n\n  var onceSupported = function () {\n    var supported = false;\n\n    if (IS_BROWSER) {\n      var once = false;\n\n      var listener = function listener() {};\n\n      var options = Object.defineProperty({}, 'once', {\n        get: function get() {\n          supported = true;\n          return once;\n        },\n\n        /**\n         * This setter can fix a `TypeError` in strict mode\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n         * @param {boolean} value - The value to set\n         */\n        set: function set(value) {\n          once = value;\n        }\n      });\n      WINDOW.addEventListener('test', listener, options);\n      WINDOW.removeEventListener('test', listener, options);\n    }\n\n    return supported;\n  }();\n  /**\n   * Remove event listener from the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n\n  function removeListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (!onceSupported) {\n        var listeners = element.listeners;\n\n        if (listeners && listeners[event] && listeners[event][listener]) {\n          handler = listeners[event][listener];\n          delete listeners[event][listener];\n\n          if (Object.keys(listeners[event]).length === 0) {\n            delete listeners[event];\n          }\n\n          if (Object.keys(listeners).length === 0) {\n            delete element.listeners;\n          }\n        }\n      }\n\n      element.removeEventListener(event, handler, options);\n    });\n  }\n  /**\n   * Add event listener to the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n  function addListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (options.once && !onceSupported) {\n        var _element$listeners = element.listeners,\n            listeners = _element$listeners === void 0 ? {} : _element$listeners;\n\n        _handler = function handler() {\n          delete listeners[event][listener];\n          element.removeEventListener(event, _handler, options);\n\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          listener.apply(element, args);\n        };\n\n        if (!listeners[event]) {\n          listeners[event] = {};\n        }\n\n        if (listeners[event][listener]) {\n          element.removeEventListener(event, listeners[event][listener], options);\n        }\n\n        listeners[event][listener] = _handler;\n        element.listeners = listeners;\n      }\n\n      element.addEventListener(event, _handler, options);\n    });\n  }\n  /**\n   * Dispatch event on the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Object} data - The additional event data.\n   * @returns {boolean} Indicate if the event is default prevented or not.\n   */\n\n  function dispatchEvent(element, type, data) {\n    var event; // Event and CustomEvent on IE9-11 are global objects, not constructors\n\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n      event = new CustomEvent(type, {\n        detail: data,\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type, true, true, data);\n    }\n\n    return element.dispatchEvent(event);\n  }\n  /**\n   * Get the offset base on the document.\n   * @param {Element} element - The target element.\n   * @returns {Object} The offset data.\n   */\n\n  function getOffset(element) {\n    var box = element.getBoundingClientRect();\n    return {\n      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n      top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n    };\n  }\n  var location = WINDOW.location;\n  var REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\n  /**\n   * Check if the given URL is a cross origin URL.\n   * @param {string} url - The target URL.\n   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n   */\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n  /**\n   * Add timestamp to the given URL.\n   * @param {string} url - The target URL.\n   * @returns {string} The result URL.\n   */\n\n  function addTimestamp(url) {\n    var timestamp = \"timestamp=\".concat(new Date().getTime());\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n  /**\n   * Get transforms base on the given object.\n   * @param {Object} obj - The target object.\n   * @returns {string} A string contains transform values.\n   */\n\n  function getTransforms(_ref) {\n    var rotate = _ref.rotate,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        translateX = _ref.translateX,\n        translateY = _ref.translateY;\n    var values = [];\n\n    if (isNumber(translateX) && translateX !== 0) {\n      values.push(\"translateX(\".concat(translateX, \"px)\"));\n    }\n\n    if (isNumber(translateY) && translateY !== 0) {\n      values.push(\"translateY(\".concat(translateY, \"px)\"));\n    } // Rotate should come first before scale to match orientation transform\n\n\n    if (isNumber(rotate) && rotate !== 0) {\n      values.push(\"rotate(\".concat(rotate, \"deg)\"));\n    }\n\n    if (isNumber(scaleX) && scaleX !== 1) {\n      values.push(\"scaleX(\".concat(scaleX, \")\"));\n    }\n\n    if (isNumber(scaleY) && scaleY !== 1) {\n      values.push(\"scaleY(\".concat(scaleY, \")\"));\n    }\n\n    var transform = values.length ? values.join(' ') : 'none';\n    return {\n      WebkitTransform: transform,\n      msTransform: transform,\n      transform: transform\n    };\n  }\n  /**\n   * Get the max ratio of a group of pointers.\n   * @param {string} pointers - The target pointers.\n   * @returns {number} The result ratio.\n   */\n\n  function getMaxZoomRatio(pointers) {\n    var pointers2 = assign({}, pointers);\n    var ratios = [];\n    forEach(pointers, function (pointer, pointerId) {\n      delete pointers2[pointerId];\n      forEach(pointers2, function (pointer2) {\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n        var ratio = (z2 - z1) / z1;\n        ratios.push(ratio);\n      });\n    });\n    ratios.sort(function (a, b) {\n      return Math.abs(a) < Math.abs(b);\n    });\n    return ratios[0];\n  }\n  /**\n   * Get a pointer from an event object.\n   * @param {Object} event - The target event object.\n   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n   * @returns {Object} The result pointer contains start and/or end point coordinates.\n   */\n\n  function getPointer(_ref2, endOnly) {\n    var pageX = _ref2.pageX,\n        pageY = _ref2.pageY;\n    var end = {\n      endX: pageX,\n      endY: pageY\n    };\n    return endOnly ? end : assign({\n      startX: pageX,\n      startY: pageY\n    }, end);\n  }\n  /**\n   * Get the center point coordinate of a group of pointers.\n   * @param {Object} pointers - The target pointers.\n   * @returns {Object} The center point coordinate.\n   */\n\n  function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n    forEach(pointers, function (_ref3) {\n      var startX = _ref3.startX,\n          startY = _ref3.startY;\n      pageX += startX;\n      pageY += startY;\n      count += 1;\n    });\n    pageX /= count;\n    pageY /= count;\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n  /**\n   * Get the max sizes in a rectangle under the given aspect ratio.\n   * @param {Object} data - The original sizes.\n   * @param {string} [type='contain'] - The adjust type.\n   * @returns {Object} The result sizes.\n   */\n\n  function getAdjustedSizes(_ref4) // or 'cover'\n  {\n    var aspectRatio = _ref4.aspectRatio,\n        height = _ref4.height,\n        width = _ref4.width;\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n    var isValidWidth = isPositiveNumber(width);\n    var isValidHeight = isPositiveNumber(height);\n\n    if (isValidWidth && isValidHeight) {\n      var adjustedWidth = height * aspectRatio;\n\n      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n        height = width / aspectRatio;\n      } else {\n        width = height * aspectRatio;\n      }\n    } else if (isValidWidth) {\n      height = width / aspectRatio;\n    } else if (isValidHeight) {\n      width = height * aspectRatio;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Get the new sizes of a rectangle after rotated.\n   * @param {Object} data - The original sizes.\n   * @returns {Object} The result sizes.\n   */\n\n  function getRotatedSizes(_ref5) {\n    var width = _ref5.width,\n        height = _ref5.height,\n        degree = _ref5.degree;\n    degree = Math.abs(degree) % 180;\n\n    if (degree === 90) {\n      return {\n        width: height,\n        height: width\n      };\n    }\n\n    var arc = degree % 90 * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var newWidth = width * cosArc + height * sinArc;\n    var newHeight = width * sinArc + height * cosArc;\n    return degree > 90 ? {\n      width: newHeight,\n      height: newWidth\n    } : {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n  /**\n   * Get a canvas which drew the given image.\n   * @param {HTMLImageElement} image - The image for drawing.\n   * @param {Object} imageData - The image data.\n   * @param {Object} canvasData - The canvas data.\n   * @param {Object} options - The options.\n   * @returns {HTMLCanvasElement} The result canvas.\n   */\n\n  function getSourceCanvas(image, _ref6, _ref7, _ref8) {\n    var imageAspectRatio = _ref6.aspectRatio,\n        imageNaturalWidth = _ref6.naturalWidth,\n        imageNaturalHeight = _ref6.naturalHeight,\n        _ref6$rotate = _ref6.rotate,\n        rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\n        _ref6$scaleX = _ref6.scaleX,\n        scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\n        _ref6$scaleY = _ref6.scaleY,\n        scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n    var aspectRatio = _ref7.aspectRatio,\n        naturalWidth = _ref7.naturalWidth,\n        naturalHeight = _ref7.naturalHeight;\n    var _ref8$fillColor = _ref8.fillColor,\n        fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\n        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n        imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\n        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n        imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\n        _ref8$maxWidth = _ref8.maxWidth,\n        maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\n        _ref8$maxHeight = _ref8.maxHeight,\n        maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\n        _ref8$minWidth = _ref8.minWidth,\n        minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\n        _ref8$minHeight = _ref8.minHeight,\n        minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var maxSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var minSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n\n    var destMaxSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var destMinSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n    context.fillStyle = fillColor;\n    context.fillRect(0, 0, width, height);\n    context.save();\n    context.translate(width / 2, height / 2);\n    context.rotate(rotate * Math.PI / 180);\n    context.scale(scaleX, scaleY);\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n    context.imageSmoothingQuality = imageSmoothingQuality;\n    /**\n     * ODOO FIX START\n     *\n     * Canevas is translated and then translated back. For the second translation the\n     * translation distances were rounded to the nearest integer below when it should\n     * not since the distances of the first translation are either an integer or the\n     * half of an integer.\n     *\n     * Fix proposed by https://github.com/fengyuanchen/cropperjs/pull/866\n     */\n    params = params.map(normalizeDecimalNumber);\n    context.drawImage(image, params[0], params[1], Math.floor(params[2]), Math.floor(params[3]));\n    // ODOO FIX END\n    context.restore();\n    return canvas;\n  }\n  var fromCharCode = String.fromCharCode;\n  /**\n   * Get string from char code in data view.\n   * @param {DataView} dataView - The data view for read.\n   * @param {number} start - The start index.\n   * @param {number} length - The read length.\n   * @returns {string} The read result.\n   */\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    length += start;\n\n    for (var i = start; i < length; i += 1) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\n  /**\n   * Transform Data URL to array buffer.\n   * @param {string} dataURL - The Data URL to transform.\n   * @returns {ArrayBuffer} The result array buffer.\n   */\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var arrayBuffer = new ArrayBuffer(binary.length);\n    var uint8 = new Uint8Array(arrayBuffer);\n    forEach(uint8, function (value, i) {\n      uint8[i] = binary.charCodeAt(i);\n    });\n    return arrayBuffer;\n  }\n  /**\n   * Transform array buffer to Data URL.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n   * @param {string} mimeType - The mime type of the Data URL.\n   * @returns {string} The result Data URL.\n   */\n\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var chunks = []; // Chunk Typed Array for better performance (#435)\n\n    var chunkSize = 8192;\n    var uint8 = new Uint8Array(arrayBuffer);\n\n    while (uint8.length > 0) {\n      // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n      // eslint-disable-next-line prefer-spread\n      chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n      uint8 = uint8.subarray(chunkSize);\n    }\n\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n  }\n  /**\n   * Get orientation value from given array buffer.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n   * @returns {number} The read orientation value.\n   */\n\n  function resetAndGetOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation; // Ignores range error when the image does not have correct Exif information\n\n    try {\n      var littleEndian;\n      var app1Start;\n      var ifdStart; // Only handle JPEG image (start by 0xFFD8)\n\n      if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n        var length = dataView.byteLength;\n        var offset = 2;\n\n        while (offset + 1 < length) {\n          if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n            app1Start = offset;\n            break;\n          }\n\n          offset += 1;\n        }\n      }\n\n      if (app1Start) {\n        var exifIDCode = app1Start + 4;\n        var tiffOffset = app1Start + 10;\n\n        if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n          var endianness = dataView.getUint16(tiffOffset);\n          littleEndian = endianness === 0x4949;\n\n          if (littleEndian || endianness === 0x4D4D\n          /* bigEndian */\n          ) {\n              if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n                var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n                if (firstIFDOffset >= 0x00000008) {\n                  ifdStart = tiffOffset + firstIFDOffset;\n                }\n              }\n            }\n        }\n      }\n\n      if (ifdStart) {\n        var _length = dataView.getUint16(ifdStart, littleEndian);\n\n        var _offset;\n\n        var i;\n\n        for (i = 0; i < _length; i += 1) {\n          _offset = ifdStart + i * 12 + 2;\n\n          if (dataView.getUint16(_offset, littleEndian) === 0x0112\n          /* Orientation */\n          ) {\n              // 8 is the offset of the current tag's value\n              _offset += 8; // Get the original orientation value\n\n              orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\n\n              dataView.setUint16(_offset, 1, littleEndian);\n              break;\n            }\n        }\n      }\n    } catch (error) {\n      orientation = 1;\n    }\n\n    return orientation;\n  }\n  /**\n   * Parse Exif Orientation value.\n   * @param {number} orientation - The orientation to parse.\n   * @returns {Object} The parsed result.\n   */\n\n  function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n\n    switch (orientation) {\n      // Flip horizontal\n      case 2:\n        scaleX = -1;\n        break;\n      // Rotate left 180\u00b0\n\n      case 3:\n        rotate = -180;\n        break;\n      // Flip vertical\n\n      case 4:\n        scaleY = -1;\n        break;\n      // Flip vertical and rotate right 90\u00b0\n\n      case 5:\n        rotate = 90;\n        scaleY = -1;\n        break;\n      // Rotate right 90\u00b0\n\n      case 6:\n        rotate = 90;\n        break;\n      // Flip horizontal and rotate right 90\u00b0\n\n      case 7:\n        rotate = 90;\n        scaleX = -1;\n        break;\n      // Rotate left 90\u00b0\n\n      case 8:\n        rotate = -90;\n        break;\n\n      default:\n    }\n\n    return {\n      rotate: rotate,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var render = {\n    render: function render() {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var element = this.element,\n          options = this.options,\n          container = this.container,\n          cropper = this.cropper;\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n      var containerData = {\n        width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n        height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n      };\n      this.containerData = containerData;\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var containerData = this.containerData,\n          imageData = this.imageData;\n      var viewMode = this.options.viewMode;\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else if (viewMode === 3) {\n        canvasHeight = containerData.width / aspectRatio;\n      } else {\n        canvasWidth = containerData.height * aspectRatio;\n      }\n\n      var canvasData = {\n        aspectRatio: aspectRatio,\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n      canvasData.left = (containerData.width - canvasWidth) / 2;\n      canvasData.top = (containerData.height - canvasHeight) / 2;\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      this.canvasData = canvasData;\n      this.limited = viewMode === 1 || viewMode === 2;\n      this.limitCanvas(true, true);\n      this.initialImageData = assign({}, imageData);\n      this.initialCanvasData = assign({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var viewMode = options.viewMode;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropped = this.cropped && cropBoxData;\n\n      if (sizeLimited) {\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n        if (viewMode > 1) {\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n\n        var _getAdjustedSizes = getAdjustedSizes({\n          aspectRatio: aspectRatio,\n          width: minCanvasWidth,\n          height: minCanvasHeight\n        });\n\n        minCanvasWidth = _getAdjustedSizes.width;\n        minCanvasHeight = _getAdjustedSizes.height;\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (positionLimited) {\n        if (viewMode > (cropped ? 0 : 1)) {\n          var newCanvasLeft = containerData.width - canvasData.width;\n          var newCanvasTop = containerData.height - canvasData.height;\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\n          canvasData.minTop = Math.min(0, newCanvasTop);\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\n          canvasData.maxTop = Math.max(0, newCanvasTop);\n\n          if (cropped && this.limited) {\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed, transformed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n\n      if (transformed) {\n        var _getRotatedSizes = getRotatedSizes({\n          width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n          height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n          degree: imageData.rotate || 0\n        }),\n            naturalWidth = _getRotatedSizes.width,\n            naturalHeight = _getRotatedSizes.height;\n\n        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n        canvasData.left -= (width - canvasData.width) / 2;\n        canvasData.top -= (height - canvasData.height) / 2;\n        canvasData.width = width;\n        canvasData.height = height;\n        canvasData.aspectRatio = naturalWidth / naturalHeight;\n        canvasData.naturalWidth = naturalWidth;\n        canvasData.naturalHeight = naturalHeight;\n        this.limitCanvas(true, false);\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      this.limitCanvas(false, true);\n      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      setStyle(this.canvas, assign({\n        width: canvasData.width,\n        height: canvasData.height\n      }, getTransforms({\n        translateX: canvasData.left,\n        translateY: canvasData.top\n      })));\n      this.renderImage(changed);\n\n      if (this.cropped && this.limited) {\n        this.limitCropBox(true, true);\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n      assign(imageData, {\n        width: width,\n        height: height,\n        left: (canvasData.width - width) / 2,\n        top: (canvasData.height - height) / 2\n      });\n      setStyle(this.image, assign({\n        width: imageData.width,\n        height: imageData.height\n      }, getTransforms(assign({\n        translateX: imageData.left,\n        translateY: imageData.top\n      }, imageData))));\n\n      if (changed) {\n        this.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      this.cropBoxData = cropBoxData;\n      this.limitCropBox(true, true); // Initialize auto crop area\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than \"minWidth/Height\"\n\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n      this.initialCropBoxData = assign({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData,\n          limited = this.limited;\n      var aspectRatio = options.aspectRatio;\n\n      if (sizeLimited) {\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n        var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n        var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height\n\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        } // The minWidth/Height must be less than maxWidth/Height\n\n\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\n          cropBoxData.minTop = Math.max(0, canvasData.top);\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var options = this.options,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData;\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n      this.limitCropBox(false, true);\n      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      setStyle(this.cropBox, assign({\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      }, getTransforms({\n        translateX: cropBoxData.left,\n        translateY: cropBoxData.top\n      })));\n\n      if (this.cropped && this.limited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n    output: function output() {\n      this.preview();\n      dispatchEvent(this.element, EVENT_CROP, this.getData());\n    }\n  };\n\n  var preview = {\n    initPreview: function initPreview() {\n      var element = this.element,\n          crossOrigin = this.crossOrigin;\n      var preview = this.options.preview;\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var alt = element.alt || 'The image to preview';\n      var image = document.createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = url;\n      image.alt = alt;\n      this.viewBox.appendChild(image);\n      this.viewBoxImage = image;\n\n      if (!preview) {\n        return;\n      }\n\n      var previews = preview;\n\n      if (typeof preview === 'string') {\n        previews = element.ownerDocument.querySelectorAll(preview);\n      } else if (preview.querySelector) {\n        previews = [preview];\n      }\n\n      this.previews = previews;\n      forEach(previews, function (el) {\n        var img = document.createElement('img'); // Save the original size for recover\n\n        setData(el, DATA_PREVIEW, {\n          width: el.offsetWidth,\n          height: el.offsetHeight,\n          html: el.innerHTML\n        });\n\n        if (crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n\n        img.src = url;\n        img.alt = alt;\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n        el.innerHTML = '';\n        el.appendChild(img);\n      });\n    },\n    resetPreview: function resetPreview() {\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width,\n          cropBoxHeight = cropBoxData.height;\n      var width = imageData.width,\n          height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      setStyle(this.viewBoxImage, assign({\n        width: width,\n        height: height\n      }, getTransforms(assign({\n        translateX: -left,\n        translateY: -top\n      }, imageData))));\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n        setStyle(element.getElementsByTagName('img')[0], assign({\n          width: width * ratio,\n          height: height * ratio\n        }, getTransforms(assign({\n          translateX: -left * ratio,\n          translateY: -top * ratio\n        }, imageData))));\n      });\n    }\n  };\n\n  var events = {\n    bind: function bind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\n          passive: false,\n          capture: true\n        });\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n      }\n\n      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n      }\n    },\n    unbind: function unbind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, this.onWheel, {\n          passive: false,\n          capture: true\n        });\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n      }\n\n      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, this.onResize);\n      }\n    }\n  };\n\n  var handlers = {\n    resize: function resize() {\n      var options = this.options,\n          container = this.container,\n          containerData = this.containerData;\n      var minContainerWidth = Number(options.minContainerWidth) || MIN_CONTAINER_WIDTH;\n      var minContainerHeight = Number(options.minContainerHeight) || MIN_CONTAINER_HEIGHT;\n\n      if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {\n        return;\n      }\n\n      var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed\n\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        var canvasData;\n        var cropBoxData;\n\n        if (options.restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (options.restore) {\n          this.setCanvasData(forEach(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData(forEach(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n    dblclick: function dblclick() {\n      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n        return;\n      }\n\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n    },\n    wheel: function wheel(event) {\n      var _this = this;\n\n      var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.disabled) {\n        return;\n      }\n\n      event.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)\n\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n      setTimeout(function () {\n        _this.wheeling = false;\n      }, 50);\n\n      if (event.deltaY) {\n        delta = event.deltaY > 0 ? 1 : -1;\n      } else if (event.wheelDelta) {\n        delta = -event.wheelDelta / 120;\n      } else if (event.detail) {\n        delta = event.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, event);\n    },\n    cropStart: function cropStart(event) {\n      var buttons = event.buttons,\n          button = event.button;\n\n      if (this.disabled // No primary button (Usually the left button)\n      // Note that touch events have no `buttons` or `button` property\n      || isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0 // Open context menu\n      || event.ctrlKey) {\n        return;\n      }\n\n      var options = this.options,\n          pointers = this.pointers;\n      var action;\n\n      if (event.changedTouches) {\n        // Handle touch event\n        forEach(event.changedTouches, function (touch) {\n          pointers[touch.identifier] = getPointer(touch);\n        });\n      } else {\n        // Handle mouse event and pointer event\n        pointers[event.pointerId || 0] = getPointer(event);\n      }\n\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n        action = ACTION_ZOOM;\n      } else {\n        action = getData(event.target, DATA_ACTION);\n      }\n\n      if (!REGEXP_ACTIONS.test(action)) {\n        return;\n      }\n\n      if (dispatchEvent(this.element, EVENT_CROP_START, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      } // This line is required for preventing page zooming in iOS browsers\n\n\n      event.preventDefault();\n      this.action = action;\n      this.cropping = false;\n\n      if (action === ACTION_CROP) {\n        this.cropping = true;\n        addClass(this.dragBox, CLASS_MODAL);\n      }\n    },\n    cropMove: function cropMove(event) {\n      var action = this.action;\n\n      if (this.disabled || !action) {\n        return;\n      }\n\n      var pointers = this.pointers;\n      event.preventDefault();\n\n      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          // The first parameter should not be undefined (#432)\n          assign(pointers[touch.identifier] || {}, getPointer(touch, true));\n        });\n      } else {\n        assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));\n      }\n\n      this.change(event);\n    },\n    cropEnd: function cropEnd(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      var action = this.action,\n          pointers = this.pointers;\n\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          delete pointers[touch.identifier];\n        });\n      } else {\n        delete pointers[event.pointerId || 0];\n      }\n\n      if (!action) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (!Object.keys(pointers).length) {\n        this.action = '';\n      }\n\n      if (this.cropping) {\n        this.cropping = false;\n        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n      }\n\n      dispatchEvent(this.element, EVENT_CROP_END, {\n        originalEvent: event,\n        action: action\n      });\n    }\n  };\n\n  var change = {\n    change: function change(event) {\n      var options = this.options,\n          canvasData = this.canvasData,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData,\n          pointers = this.pointers;\n      var action = this.action;\n      var aspectRatio = options.aspectRatio;\n      var left = cropBoxData.left,\n          top = cropBoxData.top,\n          width = cropBoxData.width,\n          height = cropBoxData.height;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset; // Locking aspect ratio in \"free mode\" by holding shift key\n\n      if (!aspectRatio && event.shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n      }\n\n      var pointer = pointers[Object.keys(pointers)[0]];\n      var range = {\n        x: pointer.endX - pointer.startX,\n        y: pointer.endY - pointer.startY\n      };\n\n      var check = function check(side) {\n        switch (side) {\n          case ACTION_EAST:\n            if (right + range.x > maxWidth) {\n              range.x = maxWidth - right;\n            }\n\n            break;\n\n          case ACTION_WEST:\n            if (left + range.x < minLeft) {\n              range.x = minLeft - left;\n            }\n\n            break;\n\n          case ACTION_NORTH:\n            if (top + range.y < minTop) {\n              range.y = minTop - top;\n            }\n\n            break;\n\n          case ACTION_SOUTH:\n            if (bottom + range.y > maxHeight) {\n              range.y = maxHeight - bottom;\n            }\n\n            break;\n\n          default:\n        }\n      };\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n        // Resize crop box\n\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_EAST);\n          width += range.x;\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_WEST);\n          width -= range.x;\n          left += range.x;\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_SOUTH);\n          height += range.y;\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += cropBoxData.width - width;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_WEST);\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_EAST);\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n        // Move canvas\n\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n        // Zoom canvas\n\n        case ACTION_ZOOM:\n          this.zoom(getMaxZoomRatio(pointers), event);\n          renderable = false;\n          break;\n        // Create crop box\n\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(this.cropper);\n          left = pointer.startX - offset.left;\n          top = pointer.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          } // Show the crop box if is hidden\n\n\n          if (!this.cropped) {\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.cropped = true;\n\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        default:\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        this.action = action;\n        this.renderCropBox();\n      } // Override\n\n\n      forEach(pointers, function (p) {\n        p.startX = p.endX;\n        p.startY = p.endY;\n      });\n    }\n  };\n\n  var methods = {\n    // Show the crop box manually\n    crop: function crop() {\n      if (this.ready && !this.cropped && !this.disabled) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          addClass(this.dragBox, CLASS_MODAL);\n        }\n\n        removeClass(this.cropBox, CLASS_HIDDEN);\n        this.setCropBoxData(this.initialCropBoxData);\n      }\n\n      return this;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      if (this.ready && !this.disabled) {\n        this.imageData = assign({}, this.initialImageData);\n        this.canvasData = assign({}, this.initialCanvasData);\n        this.cropBoxData = assign({}, this.initialCropBoxData);\n        this.renderCanvas();\n\n        if (this.cropped) {\n          this.renderCropBox();\n        }\n      }\n\n      return this;\n    },\n    // Clear the crop box\n    clear: function clear() {\n      if (this.cropped && !this.disabled) {\n        assign(this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n        this.cropped = false;\n        this.renderCropBox();\n        this.limitCanvas(true, true); // Render canvas after crop box rendered\n\n        this.renderCanvas();\n        removeClass(this.dragBox, CLASS_MODAL);\n        addClass(this.cropBox, CLASS_HIDDEN);\n      }\n\n      return this;\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     * @param {string} url - The new URL.\n     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n     * @returns {Cropper} this\n     */\n    replace: function replace(url) {\n      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.element.src = url;\n        }\n\n        if (hasSameSize) {\n          this.url = url;\n          this.image.src = url;\n\n          if (this.ready) {\n            this.viewBoxImage.src = url;\n            forEach(this.previews, function (element) {\n              element.getElementsByTagName('img')[0].src = url;\n            });\n          }\n        } else {\n          if (this.isImg) {\n            this.replaced = true;\n          }\n\n          this.options.data = null;\n          this.uncreate();\n          this.load(url);\n        }\n      }\n\n      return this;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      if (this.ready && this.disabled) {\n        this.disabled = false;\n        removeClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      if (this.ready && !this.disabled) {\n        this.disabled = true;\n        addClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n    /**\n     * Destroy the cropper and remove the instance from the image\n     * @returns {Cropper} this\n     */\n    destroy: function destroy() {\n      var element = this.element;\n\n      if (!element[NAMESPACE]) {\n        return this;\n      }\n\n      element[NAMESPACE] = undefined;\n\n      if (this.isImg && this.replaced) {\n        element.src = this.originalUrl;\n      }\n\n      this.uncreate();\n      return this;\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     * @param {number} offsetX - The relative offset distance on the x-axis.\n     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n     * @returns {Cropper} this\n     */\n    move: function move(offsetX) {\n      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n      var _this$canvasData = this.canvasData,\n          left = _this$canvasData.left,\n          top = _this$canvasData.top;\n      return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     * @param {number} x - The x-axis coordinate.\n     * @param {number} [y=x] - The y-axis coordinate.\n     * @returns {Cropper} this\n     */\n    moveTo: function moveTo(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var canvasData = this.canvasData;\n      var changed = false;\n      x = Number(x);\n      y = Number(y);\n\n      if (this.ready && !this.disabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n\n        if (changed) {\n          this.renderCanvas(true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var canvasData = this.canvasData;\n      ratio = Number(ratio);\n\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Object} pivot - The zoom pivot point coordinate.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var width = canvasData.width,\n          height = canvasData.height,\n          naturalWidth = canvasData.naturalWidth,\n          naturalHeight = canvasData.naturalHeight;\n      ratio = Number(ratio);\n\n      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n        var newWidth = naturalWidth * ratio;\n        var newHeight = naturalHeight * ratio;\n\n        if (dispatchEvent(this.element, EVENT_ZOOM, {\n          ratio: ratio,\n          oldRatio: width / naturalWidth,\n          originalEvent: _originalEvent\n        }) === false) {\n          return this;\n        }\n\n        if (_originalEvent) {\n          var pointers = this.pointers;\n          var offset = getOffset(this.cropper);\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          }; // Zoom from the triggering point of the event\n\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotate: function rotate(degree) {\n      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotateTo: function rotateTo(degree) {\n      degree = Number(degree);\n\n      if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n        this.imageData.rotate = degree % 360;\n        this.renderCanvas(true, true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Scale the image on the x-axis.\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @returns {Cropper} this\n     */\n    scaleX: function scaleX(_scaleX) {\n      var scaleY = this.imageData.scaleY;\n      return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the image on the y-axis.\n     * @param {number} scaleY - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scaleY: function scaleY(_scaleY) {\n      var scaleX = this.imageData.scaleX;\n      return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n\n    /**\n     * Scale the image\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scale: function scale(scaleX) {\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n      var imageData = this.imageData;\n      var transformed = false;\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n\n      if (this.ready && !this.disabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          transformed = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          transformed = true;\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n     * @returns {Object} The result cropped data.\n     */\n    getData: function getData() {\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n        var ratio = imageData.width / imageData.naturalWidth;\n        forEach(data, function (n, i) {\n          data[i] = n / ratio;\n        });\n\n        if (rounded) {\n          // In case rounding off leads to extra 1px in right or bottom border\n          // we should round the top-left corner and the dimension (#343).\n          var bottom = Math.round(data.y + data.height);\n          var right = Math.round(data.x + data.width);\n          data.x = Math.round(data.x);\n          data.y = Math.round(data.y);\n          data.width = right - data.x;\n          data.height = bottom - data.y;\n        }\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     * @param {Object} data - The new data.\n     * @returns {Cropper} this\n     */\n    setData: function setData(data) {\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData;\n      var cropBoxData = {};\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        var transformed = false;\n\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            transformed = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            transformed = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            transformed = true;\n          }\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n\n        var ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the container size data.\n     * @returns {Object} The result container data.\n     */\n    getContainerData: function getContainerData() {\n      return this.ready ? assign({}, this.containerData) : {};\n    },\n\n    /**\n     * Get the image position and size data.\n     * @returns {Object} The result image data.\n     */\n    getImageData: function getImageData() {\n      return this.sized ? assign({}, this.imageData) : {};\n    },\n\n    /**\n     * Get the canvas position and size data.\n     * @returns {Object} The result canvas data.\n     */\n    getCanvasData: function getCanvasData() {\n      var canvasData = this.canvasData;\n      var data = {};\n\n      if (this.ready) {\n        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data.\n     * @param {Object} data - The new canvas data.\n     * @returns {Cropper} this\n     */\n    setCanvasData: function setCanvasData(data) {\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the crop box position and size data.\n     * @returns {Object} The result crop box data.\n     */\n    getCropBoxData: function getCropBoxData() {\n      var cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data.\n     * @param {Object} data - The new crop box data.\n     * @returns {Cropper} this\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var cropBoxData = this.cropBoxData;\n      var aspectRatio = this.options.aspectRatio;\n      var widthChanged;\n      var heightChanged;\n\n      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n\n      return this;\n    },\n\n    /**\n     * Get a canvas drawn the cropped image.\n     * @param {Object} [options={}] - The config options.\n     * @returns {HTMLCanvasElement} - The result canvas.\n     */\n    getCroppedCanvas: function getCroppedCanvas() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this.ready || !window.HTMLCanvasElement) {\n        return null;\n      }\n\n      var canvasData = this.canvasData;\n      var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.\n\n      if (!this.cropped) {\n        return source;\n      }\n\n      var _this$getData = this.getData(),\n          initialX = _this$getData.x,\n          initialY = _this$getData.y,\n          initialWidth = _this$getData.width,\n          initialHeight = _this$getData.height;\n\n      var ratio = source.width / Math.floor(canvasData.naturalWidth);\n\n      if (ratio !== 1) {\n        initialX *= ratio;\n        initialY *= ratio;\n        initialWidth *= ratio;\n        initialHeight *= ratio;\n      }\n\n      var aspectRatio = initialWidth / initialHeight;\n      var maxSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.maxWidth || Infinity,\n        height: options.maxHeight || Infinity\n      });\n      var minSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.minWidth || 0,\n        height: options.minHeight || 0\n      }, 'cover');\n\n      var _getAdjustedSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.width || (ratio !== 1 ? source.width : initialWidth),\n        height: options.height || (ratio !== 1 ? source.height : initialHeight)\n      }),\n          width = _getAdjustedSizes.width,\n          height = _getAdjustedSizes.height;\n\n      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = normalizeDecimalNumber(width);\n      canvas.height = normalizeDecimalNumber(height);\n      context.fillStyle = options.fillColor || 'transparent';\n      context.fillRect(0, 0, width, height);\n      var _options$imageSmoothi = options.imageSmoothingEnabled,\n          imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,\n          imageSmoothingQuality = options.imageSmoothingQuality;\n      context.imageSmoothingEnabled = imageSmoothingEnabled;\n\n      if (imageSmoothingQuality) {\n        context.imageSmoothingQuality = imageSmoothingQuality;\n      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n\n\n      var sourceWidth = source.width;\n      var sourceHeight = source.height; // Source canvas parameters\n\n      var srcX = initialX;\n      var srcY = initialY;\n      var srcWidth;\n      var srcHeight; // Destination canvas parameters\n\n      var dstX;\n      var dstY;\n      var dstWidth;\n      var dstHeight;\n\n      if (srcX <= -initialWidth || srcX > sourceWidth) {\n        srcX = 0;\n        srcWidth = 0;\n        dstX = 0;\n        dstWidth = 0;\n      } else if (srcX <= 0) {\n        dstX = -srcX;\n        srcX = 0;\n        srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n        dstWidth = srcWidth;\n      } else if (srcX <= sourceWidth) {\n        dstX = 0;\n        srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n        dstWidth = srcWidth;\n      }\n\n      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n        srcY = 0;\n        srcHeight = 0;\n        dstY = 0;\n        dstHeight = 0;\n      } else if (srcY <= 0) {\n        dstY = -srcY;\n        srcY = 0;\n        srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n        dstHeight = srcHeight;\n      } else if (srcY <= sourceHeight) {\n        dstY = 0;\n        srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n        dstHeight = srcHeight;\n      }\n\n      var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid \"IndexSizeError\"\n\n      if (dstWidth > 0 && dstHeight > 0) {\n        var scale = width / initialWidth;\n        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n      } // All the numerical parameters should be integer for `drawImage`\n      // https://github.com/fengyuanchen/cropper/issues/476\n\n\n      context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {\n        return Math.floor(normalizeDecimalNumber(param));\n      }))));\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box.\n     * @param {number} aspectRatio - The new aspect ratio.\n     * @returns {Cropper} this\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var options = this.options;\n\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n        if (this.ready) {\n          this.initCropBox();\n\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Change the drag mode.\n     * @param {string} mode - The new drag mode.\n     * @returns {Cropper} this\n     */\n    setDragMode: function setDragMode(mode) {\n      var options = this.options,\n          dragBox = this.dragBox,\n          face = this.face;\n\n      if (this.ready && !this.disabled) {\n        var croppable = mode === DRAG_MODE_CROP;\n        var movable = options.movable && mode === DRAG_MODE_MOVE;\n        mode = croppable || movable ? mode : DRAG_MODE_NONE;\n        options.dragMode = mode;\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  var AnotherCropper = WINDOW.Cropper;\n\n  var Cropper =\n  /*#__PURE__*/\n  function () {\n    /**\n     * Create a new Cropper.\n     * @param {Element} element - The target element for cropping.\n     * @param {Object} [options={}] - The configuration options.\n     */\n    function Cropper(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Cropper);\n\n      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n        throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n      }\n\n      this.element = element;\n      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n      this.cropped = false;\n      this.disabled = false;\n      this.pointers = {};\n      this.ready = false;\n      this.reloading = false;\n      this.replaced = false;\n      this.sized = false;\n      this.sizing = false;\n      this.init();\n    }\n\n    _createClass(Cropper, [{\n      key: \"init\",\n      value: function init() {\n        var element = this.element;\n        var tagName = element.tagName.toLowerCase();\n        var url;\n\n        if (element[NAMESPACE]) {\n          return;\n        }\n\n        element[NAMESPACE] = this;\n\n        if (tagName === 'img') {\n          this.isImg = true; // e.g.: \"img/picture.jpg\"\n\n          url = element.getAttribute('src') || '';\n          this.originalUrl = url; // Stop when it's a blank image\n\n          if (!url) {\n            return;\n          } // e.g.: \"http://example.com/img/picture.jpg\"\n\n\n          url = element.src;\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n          url = element.toDataURL();\n        }\n\n        this.load(url);\n      }\n    }, {\n      key: \"load\",\n      value: function load(url) {\n        var _this = this;\n\n        if (!url) {\n          return;\n        }\n\n        this.url = url;\n        this.imageData = {};\n        var element = this.element,\n            options = this.options;\n\n        if (!options.rotatable && !options.scalable) {\n          options.checkOrientation = false;\n        } // Only IE10+ supports Typed Arrays\n\n\n        if (!options.checkOrientation || !window.ArrayBuffer) {\n          this.clone();\n          return;\n        } // Detect the mime type of the image directly if it is a Data URL\n\n\n        if (REGEXP_DATA_URL.test(url)) {\n          // Read ArrayBuffer from Data URL of JPEG images directly for better performance\n          if (REGEXP_DATA_URL_JPEG.test(url)) {\n            this.read(dataURLToArrayBuffer(url));\n          } else {\n            // Only a JPEG image may contains Exif Orientation information,\n            // the rest types of Data URLs are not necessary to check orientation at all.\n            this.clone();\n          }\n\n          return;\n        } // 1. Detect the mime type of the image by a XMLHttpRequest.\n        // 2. Load the image as ArrayBuffer for reading orientation if its a JPEG image.\n\n\n        var xhr = new XMLHttpRequest();\n        var clone = this.clone.bind(this);\n        this.reloading = true;\n        this.xhr = xhr; // 1. Cross origin requests are only supported for protocol schemes:\n        // http, https, data, chrome, chrome-extension.\n        // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy\n        // in some browsers as IE11 and Safari.\n\n        xhr.onabort = clone;\n        xhr.onerror = clone;\n        xhr.ontimeout = clone;\n\n        xhr.onprogress = function () {\n          // Abort the request directly if it not a JPEG image for better performance\n          if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {\n            xhr.abort();\n          }\n        };\n\n        xhr.onload = function () {\n          _this.read(xhr.response);\n        };\n\n        xhr.onloadend = function () {\n          _this.reloading = false;\n          _this.xhr = null;\n        }; // Bust cache when there is a \"crossOrigin\" property to avoid browser cache error\n\n\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n          url = addTimestamp(url);\n        }\n\n        xhr.open('GET', url);\n        xhr.responseType = 'arraybuffer';\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\n        xhr.send();\n      }\n    }, {\n      key: \"read\",\n      value: function read(arrayBuffer) {\n        var options = this.options,\n            imageData = this.imageData; // Reset the orientation value to its default value 1\n        // as some iOS browsers will render image with its orientation\n\n        var orientation = resetAndGetOrientation(arrayBuffer);\n        var rotate = 0;\n        var scaleX = 1;\n        var scaleY = 1;\n\n        if (orientation > 1) {\n          // Generate a new URL which has the default orientation value\n          this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);\n\n          var _parseOrientation = parseOrientation(orientation);\n\n          rotate = _parseOrientation.rotate;\n          scaleX = _parseOrientation.scaleX;\n          scaleY = _parseOrientation.scaleY;\n        }\n\n        if (options.rotatable) {\n          imageData.rotate = rotate;\n        }\n\n        if (options.scalable) {\n          imageData.scaleX = scaleX;\n          imageData.scaleY = scaleY;\n        }\n\n        this.clone();\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var element = this.element,\n            url = this.url;\n        var crossOrigin = element.crossOrigin;\n        var crossOriginUrl = url;\n\n        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n          if (!crossOrigin) {\n            crossOrigin = 'anonymous';\n          } // Bust cache when there is not a \"crossOrigin\" property (#519)\n\n\n          crossOriginUrl = addTimestamp(url);\n        }\n\n        this.crossOrigin = crossOrigin;\n        this.crossOriginUrl = crossOriginUrl;\n        var image = document.createElement('img');\n\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n\n        image.src = crossOriginUrl || url;\n        image.alt = element.alt || 'The image to crop';\n        this.image = image;\n        image.onload = this.start.bind(this);\n        image.onerror = this.stop.bind(this);\n        addClass(image, CLASS_HIDE);\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        this.sizing = true; // Match all browsers that use WebKit as the layout engine in iOS devices,\n        // such as Safari for iOS, Chrome for iOS, and in-app browsers.\n\n        var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);\n\n        var done = function done(naturalWidth, naturalHeight) {\n          assign(_this2.imageData, {\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            aspectRatio: naturalWidth / naturalHeight\n          });\n          _this2.sizing = false;\n          _this2.sized = true;\n\n          _this2.build();\n        }; // Most modern browsers (excepts iOS WebKit)\n\n\n        if (image.naturalWidth && !isIOSWebKit) {\n          done(image.naturalWidth, image.naturalHeight);\n          return;\n        }\n\n        var sizingImage = document.createElement('img');\n        var body = document.body || document.documentElement;\n        this.sizingImage = sizingImage;\n\n        sizingImage.onload = function () {\n          done(sizingImage.width, sizingImage.height);\n\n          if (!isIOSWebKit) {\n            body.removeChild(sizingImage);\n          }\n        };\n\n        sizingImage.src = image.src; // iOS WebKit will convert the image automatically\n        // with its orientation once append it into DOM (#279)\n\n        if (!isIOSWebKit) {\n          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n          body.appendChild(sizingImage);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        image.parentNode.removeChild(image);\n        this.image = null;\n      }\n    }, {\n      key: \"build\",\n      value: function build() {\n        if (!this.sized || this.ready) {\n          return;\n        }\n\n        var element = this.element,\n            options = this.options,\n            image = this.image; // Create cropper elements\n\n        var container = element.parentNode;\n        var template = document.createElement('div');\n        template.innerHTML = TEMPLATE;\n        var cropper = template.querySelector(\".\".concat(NAMESPACE, \"-container\"));\n        var canvas = cropper.querySelector(\".\".concat(NAMESPACE, \"-canvas\"));\n        var dragBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-drag-box\"));\n        var cropBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-crop-box\"));\n        var face = cropBox.querySelector(\".\".concat(NAMESPACE, \"-face\"));\n        this.container = container;\n        this.cropper = cropper;\n        this.canvas = canvas;\n        this.dragBox = dragBox;\n        this.cropBox = cropBox;\n        this.viewBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-view-box\"));\n        this.face = face;\n        canvas.appendChild(image); // Hide the original image\n\n        addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image\n\n        container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden\n\n        if (!this.isImg) {\n          removeClass(image, CLASS_HIDE);\n        }\n\n        this.initPreview();\n        this.bind();\n        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n        addClass(cropBox, CLASS_HIDDEN);\n\n        if (!options.guides) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-dashed\")), CLASS_HIDDEN);\n        }\n\n        if (!options.center) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-center\")), CLASS_HIDDEN);\n        }\n\n        if (options.background) {\n          addClass(cropper, \"\".concat(NAMESPACE, \"-bg\"));\n        }\n\n        if (!options.highlight) {\n          addClass(face, CLASS_INVISIBLE);\n        }\n\n        if (options.cropBoxMovable) {\n          addClass(face, CLASS_MOVE);\n          setData(face, DATA_ACTION, ACTION_ALL);\n        }\n\n        if (!options.cropBoxResizable) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-line\")), CLASS_HIDDEN);\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-point\")), CLASS_HIDDEN);\n        }\n\n        this.render();\n        this.ready = true;\n        this.setDragMode(options.dragMode);\n\n        if (options.autoCrop) {\n          this.crop();\n        }\n\n        this.setData(options.data);\n\n        if (isFunction(options.ready)) {\n          addListener(element, EVENT_READY, options.ready, {\n            once: true\n          });\n        }\n\n        dispatchEvent(element, EVENT_READY);\n      }\n    }, {\n      key: \"unbuild\",\n      value: function unbuild() {\n        if (!this.ready) {\n          return;\n        }\n\n        this.ready = false;\n        this.unbind();\n        this.resetPreview();\n        this.cropper.parentNode.removeChild(this.cropper);\n        removeClass(this.element, CLASS_HIDDEN);\n      }\n    }, {\n      key: \"uncreate\",\n      value: function uncreate() {\n        if (this.ready) {\n          this.unbuild();\n          this.ready = false;\n          this.cropped = false;\n        } else if (this.sizing) {\n          this.sizingImage.onload = null;\n          this.sizing = false;\n          this.sized = false;\n        } else if (this.reloading) {\n          this.xhr.onabort = null;\n          this.xhr.abort();\n        } else if (this.image) {\n          this.stop();\n        }\n      }\n      /**\n       * Get the no conflict cropper class.\n       * @returns {Cropper} The cropper class.\n       */\n\n    }], [{\n      key: \"noConflict\",\n      value: function noConflict() {\n        window.Cropper = AnotherCropper;\n        return Cropper;\n      }\n      /**\n       * Change the default options.\n       * @param {Object} options - The new default options.\n       */\n\n    }, {\n      key: \"setDefaults\",\n      value: function setDefaults(options) {\n        assign(DEFAULTS, isPlainObject(options) && options);\n      }\n    }]);\n\n    return Cropper;\n  }();\n\n  assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n\n  return Cropper;\n\n}));\n", "/*!\n * jQuery Cropper v1.0.0\n * https://github.com/fengyuanchen/jquery-cropper\n *\n * Copyright (c) 2018 Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2018-04-01T06:20:13.168Z\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery'), require('cropperjs')) :\n    typeof define === 'function' && define.amd ? define(['jquery', 'cropperjs'], factory) :\n    (factory(global.jQuery,global.Cropper));\n  }(this, (function ($,Cropper) { 'use strict';\n\n    $ = $ && $.hasOwnProperty('default') ? $['default'] : $;\n    Cropper = Cropper && Cropper.hasOwnProperty('default') ? Cropper['default'] : Cropper;\n\n    if ($.fn) {\n      var AnotherCropper = $.fn.cropper;\n      var NAMESPACE = 'cropper';\n\n      $.fn.cropper = function jQueryCropper(option) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var result = void 0;\n\n        this.each(function (i, element) {\n          var $element = $(element);\n          var isDestroy = option === 'destroy';\n          var cropper = $element.data(NAMESPACE);\n\n          if (!cropper) {\n            if (isDestroy) {\n              return;\n            }\n\n            var options = $.extend({}, $element.data(), $.isPlainObject(option) && option);\n\n            cropper = new Cropper(element, options);\n            $element.data(NAMESPACE, cropper);\n          }\n\n          if (typeof option === 'string') {\n            var fn = cropper[option];\n\n            if ($.isFunction(fn)) {\n              result = fn.apply(cropper, args);\n\n              if (result === cropper) {\n                result = undefined;\n              }\n\n              if (isDestroy) {\n                $element.removeData(NAMESPACE);\n              }\n            }\n          }\n        });\n\n        return result !== undefined ? result : this;\n      };\n\n      $.fn.cropper.Constructor = Cropper;\n      $.fn.cropper.setDefaults = Cropper.setDefaults;\n      $.fn.cropper.noConflict = function noConflict() {\n        $.fn.cropper = AnotherCropper;\n        return this;\n      };\n    }\n\n  })));\n", "/*\nCopyright (c) 2014 Christophe Matthieu,\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\n\n(function($){\n    'use strict';\n        var rad = Math.PI/180;\n\n        // public methods\n        var methods = {\n                init : function(settings) {\n                    return this.each(function() {\n                        var $this = $(this), transfo = $this.data('transfo');\n                        if (!transfo) {\n                            _init($this, settings);\n                        } else {\n                            _overwriteOptions($this, transfo, settings);\n                            _targetCss($this, transfo);\n                        }\n                    });\n                },\n\n                destroy : function() {\n                    return this.each(function() {\n                        var $this = $(this);\n                        if ($this.data('transfo')) {\n                            _destroy($this);\n                        }\n                    });\n                },\n\n                reset : function() {\n                    return this.each(function() {\n                        var $this = $(this);\n                        if ($this.data('transfo')) {\n                            _reset($this);\n                        }\n                    });\n                },\n\n                toggle : function() {\n                    return this.each(function() {\n                        var $this = $(this);\n                        var transfo = $this.data('transfo');\n                        if (transfo) {\n                            transfo.settings.hide = !transfo.settings.hide;\n                            _showHide($this, transfo);\n                        }\n                    });\n                },\n\n                hide : function() {\n                    return this.each(function() {\n                        var $this = $(this);\n                        var transfo = $this.data('transfo');\n                        if (transfo) {\n                            transfo.settings.hide = true;\n                            _showHide($this, transfo);\n                        }\n                    });\n                },\n\n                show : function() {\n                    return this.each(function() {\n                        var $this = $(this);\n                        var transfo = $this.data('transfo');\n                        if (transfo) {\n                            transfo.settings.hide = false;\n                            _showHide($this, transfo);\n                        }\n                    });\n                },\n\n                settings :  function() {\n                    if(this.length > 1) {\n                        this.map(function () {\n                            var $this = $(this);\n                            return $this.data('transfo') && $this.data('transfo').settings;\n                        });\n                    }\n                    return this.data('transfo') && $this.data('transfo').settings;\n                },\n                center :  function() {\n                    if(this.length > 1) {\n                        this.map(function () {\n                            var $this = $(this);\n                            return $this.data('transfo') && $this.data('transfo').$center.offset();\n                        });\n                    }\n                    return this.data('transfo') && this.data('transfo').$center.offset();\n                }\n        };\n\n        $.fn.transfo = function( method ) {\n            if ( methods[method] ) {\n                    return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n            } else if ( typeof method === 'object' || ! method ) {\n                    return methods.init.apply( this, arguments );\n            } else {\n                    $.error( 'Method ' +  method + ' does not exist on jQuery.transfo' );\n            }\n            return false;\n        };\n\n        function _init ($this, settings) {\n            var transfo = {};\n            $this.data('transfo', transfo);\n            transfo.settings = settings;\n            transfo.settings.document = transfo.settings.document || document;\n\n            // generate all the controls markup\n            var css = \"box-sizing: border-box; position: absolute; background-color: #fff; border: 1px solid #ccc; width: 8px; height: 8px; margin-left: -4px; margin-top: -4px;\";\n            transfo.$markup = $(''\n                + '<div class=\"transfo-container\">'\n                +  '<div class=\"transfo-controls\">'\n                +   '<div style=\"cursor: crosshair; position: absolute; margin: -30px; top: 0; right: 0; padding: 1px 0 0 1px;\" class=\"transfo-rotator\">'\n                +    '<span class=\"fa-stack fa-lg\">'\n                +    '<i class=\"fa fa-circle fa-stack-2x\"></i>'\n                +    '<i class=\"fa fa-repeat fa-stack-1x fa-inverse\"></i>'\n                +    '</span>'\n                +   '</div>'\n                +   '<div style=\"' + css + 'top: 0%; left: 0%; cursor: nw-resize;\" class=\"transfo-scaler-tl\"></div>'\n                +   '<div style=\"' + css + 'top: 0%; left: 100%; cursor: ne-resize;\" class=\"transfo-scaler-tr\"></div>'\n                +   '<div style=\"' + css + 'top: 100%; left: 100%; cursor: se-resize;\" class=\"transfo-scaler-br\"></div>'\n                +   '<div style=\"' + css + 'top: 100%; left: 0%; cursor: sw-resize;\" class=\"transfo-scaler-bl\"></div>'\n                +   '<div style=\"' + css + 'top: 0%; left: 50%; cursor: n-resize;\" class=\"transfo-scaler-tc\"></div>'\n                +   '<div style=\"' + css + 'top: 100%; left: 50%; cursor: s-resize;\" class=\"transfo-scaler-bc\"></div>'\n                +   '<div style=\"' + css + 'top: 50%; left: 0%; cursor: w-resize;\" class=\"transfo-scaler-ml\"></div>'\n                +   '<div style=\"' + css + 'top: 50%; left: 100%; cursor: e-resize;\" class=\"transfo-scaler-mr\"></div>'\n                +   '<div style=\"' + css + 'border: 0; width: 0px; height: 0px; top: 50%; left: 50%;\" class=\"transfo-scaler-mc\"></div>'\n                +  '</div>'\n                + '</div>');\n            transfo.$center = transfo.$markup.find(\".transfo-scaler-mc\");\n\n            // init setting and get css to set wrap\n            _setOptions($this, transfo);\n            _overwriteOptions ($this, transfo, settings);\n\n            // append controls to container\n            $(transfo.settings.document.body).append(transfo.$markup);\n\n            // set transfo container and markup\n            setTimeout(function () {\n                _targetCss($this, transfo);\n            },0);\n\n            _bind($this, transfo);\n            \n            _targetCss($this, transfo);\n            _stop_animation($this[0]);\n        }\n\n        function _overwriteOptions ($this, transfo, settings) {\n            transfo.settings = $.extend(transfo.settings, settings || {});\n        }\n\n        function _stop_animation (target) {\n            target.style.webkitAnimationPlayState = \"paused\";\n            target.style.animationPlayState = \"paused\";\n            target.style.webkitTransition = \"none\";\n            target.style.transition = \"none\";\n        }\n\n        function _setOptions ($this, transfo) {\n            var style = $this.attr(\"style\") || \"\";\n            var transform = style.match(/transform\\s*:([^;]+)/) ? style.match(/transform\\s*:([^;]+)/)[1] : \"\";\n\n            transfo.settings = {};\n\n            transfo.settings.angle=      transform.indexOf('rotate') != -1 ? parseFloat(transform.match(/rotate\\(([^)]+)deg\\)/)[1]) : 0;\n            transfo.settings.scalex=     transform.indexOf('scaleX') != -1 ? parseFloat(transform.match(/scaleX\\(([^)]+)\\)/)[1]) : 1;\n            transfo.settings.scaley=     transform.indexOf('scaleY') != -1 ? parseFloat(transform.match(/scaleY\\(([^)]+)\\)/)[1]) : 1;\n\n            transfo.settings.style = style.replace(/[^;]*transform[^;]+/g, '').replace(/;+/g, ';');\n\n            $this.attr(\"style\", transfo.settings.style);\n            _stop_animation($this[0]);\n            transfo.settings.pos = $this.offset();\n\n            transfo.settings.height = $this.innerHeight();\n            transfo.settings.width = $this.innerWidth();\n\n            var translatex = transform.match(/translateX\\(([0-9.-]+)(%|px)\\)/);\n            var translatey = transform.match(/translateY\\(([0-9.-]+)(%|px)\\)/);\n            transfo.settings.translate = \"%\";\n\n            if (translatex && translatex[2] === \"%\") {\n                transfo.settings.translatexp = parseFloat(translatex[1]);\n                transfo.settings.translatex = transfo.settings.translatexp / 100 * transfo.settings.width;\n            } else {\n                transfo.settings.translatex = translatex ? parseFloat(translatex[1]) : 0;\n            }\n            if (translatey && translatey[2] === \"%\") {\n                transfo.settings.translateyp = parseFloat(translatey[1]);\n                transfo.settings.translatey = transfo.settings.translateyp / 100 * transfo.settings.height;\n            } else {\n                transfo.settings.translatey = translatey ? parseFloat(translatey[1]) : 0;\n            }\n\n            transfo.settings.css = window.getComputedStyle($this[0], null);\n\n            transfo.settings.rotationStep = 5;\n            transfo.settings.hide = false;\n            transfo.settings.callback = function () {};\n        }\n\n        function _bind ($this, transfo) {\n            function mousedown (event) {\n                _mouseDown($this, this, transfo, event);\n                $(transfo.settings.document).on(\"mousemove\", mousemove).on(\"mouseup\", mouseup);\n            }\n            function mousemove (event) {\n                _mouseMove($this, this, transfo, event);\n            }\n            function mouseup (event) {\n                _mouseUp($this, this, transfo, event);\n                $(transfo.settings.document).off(\"mousemove\", mousemove).off(\"mouseup\", mouseup);\n            }\n\n            transfo.$markup.off().on(\"mousedown\", mousedown);\n            transfo.$markup.find(\".transfo-controls >:not(.transfo-scaler-mc)\").off().on(\"mousedown\", mousedown);\n        }\n\n        function _mouseDown($this, div, transfo, event) {\n            event.preventDefault();\n            if (transfo.active || event.which !== 1) return;\n\n            var type = \"position\", $e = $(div);\n            if ($e.hasClass(\"transfo-rotator\")) type = \"rotator\";\n            else if ($e.hasClass(\"transfo-scaler-tl\")) type = \"tl\";\n            else if ($e.hasClass(\"transfo-scaler-tr\")) type = \"tr\";\n            else if ($e.hasClass(\"transfo-scaler-br\")) type = \"br\";\n            else if ($e.hasClass(\"transfo-scaler-bl\")) type = \"bl\";\n            else if ($e.hasClass(\"transfo-scaler-tc\")) type = \"tc\";\n            else if ($e.hasClass(\"transfo-scaler-bc\")) type = \"bc\";\n            else if ($e.hasClass(\"transfo-scaler-ml\")) type = \"ml\";\n            else if ($e.hasClass(\"transfo-scaler-mr\")) type = \"mr\";\n\n            transfo.active = {\n                \"type\": type,\n                \"scalex\": transfo.settings.scalex,\n                \"scaley\": transfo.settings.scaley,\n                \"pageX\": event.pageX,\n                \"pageY\": event.pageY,\n                \"center\": transfo.$center.offset(),\n            };\n        }\n        function _mouseUp($this, div, transfo, event) {\n            transfo.active = null;\n        }\n\n        function _mouseMove($this, div, transfo, event) {\n            event.preventDefault();\n            if (!transfo.active) return;\n            var settings = transfo.settings;\n            var center = transfo.active.center;\n            var cdx = center.left - event.pageX;\n            var cdy = center.top - event.pageY;\n\n            if (transfo.active.type == \"rotator\") {\n                var ang, dang = Math.atan((settings.width * settings.scalex) / (settings.height * settings.scaley)) / rad;\n\n                if (cdy) ang = Math.atan(- cdx / cdy) / rad;\n                else ang = 0;\n                if (event.pageY >= center.top && event.pageX >= center.left) ang += 180;\n                else if (event.pageY >= center.top && event.pageX < center.left) ang += 180;\n                else if (event.pageY < center.top && event.pageX < center.left) ang += 360;\n                \n                ang -= dang;\n                if (settings.scaley < 0 && settings.scalex < 0) ang += 180;\n\n                if (!event.ctrlKey) {\n                    settings.angle = Math.round(ang / transfo.settings.rotationStep) * transfo.settings.rotationStep;\n                } else {\n                    settings.angle = ang;\n                }\n\n                // reset position : don't move center\n                _targetCss($this, transfo);\n                var new_center = transfo.$center.offset();\n                var x = center.left - new_center.left;\n                var y = center.top - new_center.top;\n                var angle = ang * rad;\n                settings.translatex += x*Math.cos(angle) - y*Math.sin(-angle);\n                settings.translatey += - x*Math.sin(angle) + y*Math.cos(-angle);\n            }\n            else if (transfo.active.type == \"position\") {\n                var angle = settings.angle * rad;\n                var x = event.pageX - transfo.active.pageX;\n                var y = event.pageY - transfo.active.pageY;\n                transfo.active.pageX = event.pageX;\n                transfo.active.pageY = event.pageY;\n                var dx = x*Math.cos(angle) - y*Math.sin(-angle);\n                var dy = - x*Math.sin(angle) + y*Math.cos(-angle);\n\n                settings.translatex += dx;\n                settings.translatey += dy;\n            }\n            else if (transfo.active.type.length === 2) {\n                var angle = settings.angle * rad;\n                var dx =   cdx*Math.cos(angle) - cdy*Math.sin(-angle);\n                var dy = - cdx*Math.sin(angle) + cdy*Math.cos(-angle);\n                if (transfo.active.type.indexOf(\"t\") != -1) {\n                    settings.scaley = dy / (settings.height/2);\n                }\n                if (transfo.active.type.indexOf(\"b\") != -1) {\n                    settings.scaley = - dy / (settings.height/2);\n                }\n                if (transfo.active.type.indexOf(\"l\") != -1) {\n                    settings.scalex = dx / (settings.width/2);\n                }\n                if (transfo.active.type.indexOf(\"r\") != -1) {\n                    settings.scalex = - dx / (settings.width/2);\n                }\n                if (settings.scaley > 0 && settings.scaley < 0.05) settings.scaley = 0.05;\n                if (settings.scalex > 0 && settings.scalex < 0.05) settings.scalex = 0.05;\n                if (settings.scaley < 0 && settings.scaley > -0.05) settings.scaley = -0.05;\n                if (settings.scalex < 0 && settings.scalex > -0.05) settings.scalex = -0.05;\n\n                if (event.shiftKey &&\n                    (transfo.active.type === \"tl\" || transfo.active.type === \"bl\" ||\n                     transfo.active.type === \"tr\" || transfo.active.type === \"br\")) {\n                    settings.scaley = settings.scalex;\n                }\n            }\n\n            settings.angle = Math.round(settings.angle);\n            settings.translatex = Math.round(settings.translatex);\n            settings.translatey = Math.round(settings.translatey);\n            settings.scalex = Math.round(settings.scalex*100)/100;\n            settings.scaley = Math.round(settings.scaley*100)/100;\n\n            _targetCss($this, transfo);\n            _stop_animation($this[0]);\n            return false;\n        }\n\n        function _setCss($this, css, settings) {\n            var transform = \"\";\n            var trans = false;\n            if (settings.angle !== 0) {\n                trans = true;\n                transform += \" rotate(\"+settings.angle+\"deg) \";\n            }\n            if (settings.translatex) {\n                trans = true;\n                transform += \" translateX(\"+(settings.translate === \"%\" ? settings.translatexp+\"%\" : settings.translatex+\"px\")+\") \";\n            }\n            if (settings.translatey) {\n                trans = true;\n                transform += \" translateY(\"+(settings.translate === \"%\" ? settings.translateyp+\"%\" : settings.translatey+\"px\")+\") \";\n            }\n            if (settings.scalex != 1) {\n                trans = true;\n                transform += \" scaleX(\"+settings.scalex+\") \";\n            }\n            if (settings.scaley != 1){\n                trans = true;\n                transform += \" scaleY(\"+settings.scaley+\") \";\n            }\n\n            if (trans) {\n                css += \";\"\n                        /* Safari */\n                css += \"-webkit-transform:\" + transform + \";\"\n                        /* Firefox */\n                    + \"-moz-transform:\" + transform + \";\"\n                        /* IE */\n                    + \"-ms-transform:\" + transform + \";\"\n                        /* Opera */\n                    + \"-o-transform:\" + transform + \";\"\n                        /* Other */\n                    + \"transform:\" + transform + \";\";\n            }\n\n            css = css.replace(/(\\s*;)+/g, ';').replace(/^\\s*;|;\\s*$/g, '');\n\n            $this.attr(\"style\", css);\n        }\n\n        function _targetCss ($this, transfo) {\n            var settings = transfo.settings;\n            var width = parseFloat(settings.css.width);\n            var height = parseFloat(settings.css.height);\n            settings.translatexp = Math.round(settings.translatex/width*1000)/10;\n            settings.translateyp = Math.round(settings.translatey/height*1000)/10;\n\n            _setCss($this, settings.style, settings);\n\n            transfo.$markup.css({\n                \"position\": \"absolute\",\n                \"width\": width + \"px\",\n                \"height\": height + \"px\",\n                \"top\": settings.pos.top + \"px\",\n                \"left\": settings.pos.left + \"px\"\n            });\n\n            var $controls = transfo.$markup.find('.transfo-controls');\n            _setCss($controls,\n                \"width:\" + width + \"px;\" +\n                \"height:\" + height + \"px;\" +\n                \"cursor: move;\",\n                settings);\n\n            $controls.children().css(\"transform\", \"scaleX(\"+(1/settings.scalex)+\") scaleY(\"+(1/settings.scaley)+\")\");\n\n            _showHide($this, transfo);\n\n            transfo.settings.callback.call($this[0], $this);\n        }\n\n        function _showHide ($this, transfo) {\n            transfo.$markup.css(\"z-index\", transfo.settings.hide ? -1 : 1000);\n            if (transfo.settings.hide) {\n                transfo.$markup.find(\".transfo-controls > *\").hide();\n                transfo.$markup.find(\".transfo-scaler-mc\").show();\n            } else {\n                transfo.$markup.find(\".transfo-controls > *\").show();\n            }\n        }\n\n        function _destroy ($this) {\n            $this.data('transfo').$markup.remove();\n            $this.removeData('transfo');\n        }\n\n        function _reset ($this) {\n            var transfo = $this.data('transfo');\n            _destroy($this);\n            $this.transfo(transfo.settings);\n        }\n\n})(jQuery);\n", "/* \nWebGLImageFilter - MIT Licensed\n\n2013, Dominic Szablewski - phoboslab.org\n*/\n\n(function(window){\n\nvar WebGLProgram = function( gl, vertexSource, fragmentSource ) {\n\n\tvar _collect = function( source, prefix, collection ) {\n\t\tvar r = new RegExp('\\\\b' + prefix + ' \\\\w+ (\\\\w+)', 'ig');\n\t\tsource.replace(r, function(match, name) {\n\t\t\tcollection[name] = 0;\n\t\t\treturn match;\n\t\t});\n\t};\n\n\tvar _compile = function( gl, source, type ) {\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, source);\n\t\tgl.compileShader(shader);\n\n\t\tif( !gl.getShaderParameter(shader, gl.COMPILE_STATUS) ) {\n\t\t\tconsole.log(gl.getShaderInfoLog(shader));\n\t\t\treturn null;\n\t\t}\n\t\treturn shader;\n\t};\n\n\n\tthis.uniform = {};\n\tthis.attribute = {};\n\n\tvar _vsh = _compile(gl, vertexSource, gl.VERTEX_SHADER);\n\tvar _fsh = _compile(gl, fragmentSource, gl.FRAGMENT_SHADER);\n\n\tthis.id = gl.createProgram();\n\tgl.attachShader(this.id, _vsh);\n\tgl.attachShader(this.id, _fsh);\n\tgl.linkProgram(this.id);\n\n\tif( !gl.getProgramParameter(this.id, gl.LINK_STATUS) ) {\n\t\tconsole.log(gl.getProgramInfoLog(this.id));\n\t}\n\n\tgl.useProgram(this.id);\n\n\t// Collect attributes\n\t_collect(vertexSource, 'attribute', this.attribute);\n\tfor( var a in this.attribute ) {\n\t\tthis.attribute[a] = gl.getAttribLocation(this.id, a);\n\t}\n\n\t// Collect uniforms\n\t_collect(vertexSource, 'uniform', this.uniform);\n\t_collect(fragmentSource, 'uniform', this.uniform);\n\tfor( var u in this.uniform ) {\n\t\tthis.uniform[u] = gl.getUniformLocation(this.id, u);\n\t}\n};\n\nconst identityMatrix = [\n\t1, 0, 0, 0, 0,\n\t0, 1, 0, 0, 0,\n\t0, 0, 1, 0, 0,\n\t0, 0, 0, 1, 0,\n];\n\nconst weightedAvg = (a, b, w) => a * w + b * (1 - w);\n\nvar WebGLImageFilter = window.WebGLImageFilter = function (params) {\n\tif (!params)\n\t\tparams = { };\n\n\tvar \n\t\tgl = null,\n\t\t_drawCount = 0,\n\t\t_sourceTexture = null,\n\t\t_lastInChain = false,\n\t\t_currentFramebufferIndex = -1,\n\t\t_tempFramebuffers = [null, null],\n\t\t_filterChain = [],\n\t\t_width = -1, \n\t\t_height = -1,\n\t\t_vertexBuffer = null,\n\t\t_currentProgram = null,\n\t\t_canvas = params.canvas || document.createElement('canvas');\n\n\t// key is the shader program source, value is the compiled program\n\tvar _shaderProgramCache = { };\n\n\tvar gl = _canvas.getContext(\"webgl\") || _canvas.getContext(\"experimental-webgl\");\n\tif( !gl ) {\n\t\tthrow \"Couldn't get WebGL context\";\n\t}\n\n\t\n\tthis.addFilter = function( name ) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\tvar filter = _filter[name];\n\n\t\t_filterChain.push({func:filter, args:args});\n\t};\n\n\tthis.reset = function() {\n\t\t_filterChain = [];\n\t};\n\t\n\tthis.apply = function( image ) {\n\t\t_resize( image.width, image.height );\n\t\t_drawCount = 0;\n\n\t\t// Create the texture for the input image if we haven't yet\n\t\tif (!_sourceTexture)\n\t\t\t_sourceTexture = gl.createTexture();\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, _sourceTexture);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST); \n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\n\t\t// No filters? Just draw\n\t\tif( _filterChain.length == 0 ) {\n\t\t\tvar program = _compileShader(SHADER.FRAGMENT_IDENTITY);\n\t\t\t_draw();\n\t\t\treturn _canvas;\n\t\t}\n\n\t\tfor( var i = 0; i < _filterChain.length; i++ ) {\n\t\t\t_lastInChain = (i == _filterChain.length-1);\n\t\t\tvar f = _filterChain[i];\n\n\t\t\tf.func.apply(this, f.args || []);\n\t\t}\n\n\t\treturn _canvas;\n\t};\n\n\tvar _resize = function( width, height ) {\n\t\t// Same width/height? Nothing to do here\n\t\tif( width == _width && height == _height ) { return; }\n\n\n\t\t_canvas.width = _width = width;\n\t\t_canvas.height = _height = height;\n\n\t\t// Create the context if we don't have it yet\n\t\tif( !_vertexBuffer ) {\n\t\t\t// Create the vertex buffer for the two triangles [x, y, u, v] * 6\n\t\t\tvar vertices = new Float32Array([\n\t\t\t\t-1, -1, 0, 1,  1, -1, 1, 1,  -1, 1, 0, 0,\n\t\t\t\t-1, 1, 0, 0,  1, -1, 1, 1,  1, 1, 1, 0\n\t\t\t]);\n\t\t\t_vertexBuffer = gl.createBuffer(),\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, _vertexBuffer);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n\t\t\t// Note sure if this is a good idea; at least it makes texture loading\n\t\t\t// in Ejecta instant.\n\t\t\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n\t\t}\n\n\t\tgl.viewport(0, 0, _width, _height);\n\n\t\t// Delete old temp framebuffers\n\t\t_tempFramebuffers = [null, null];\n\t};\n\n\tvar _getTempFramebuffer = function( index ) {\n\t\t_tempFramebuffers[index] = \n\t\t\t_tempFramebuffers[index] || \n\t\t\t_createFramebufferTexture( _width, _height );\n\n\t\treturn _tempFramebuffers[index];\n\t};\n\n\tvar _createFramebufferTexture = function( width, height ) {\n\t\tvar fbo = gl.createFramebuffer();\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n\n\t\tvar renderbuffer = gl.createRenderbuffer();\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n\n\t\tvar texture = gl.createTexture();\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\treturn {fbo: fbo, texture: texture};\n\t};\n\n\tvar _draw = function( flags ) {\n\t\tvar source = null, \n\t\t\ttarget = null,\n\t\t\tflipY = false;\n\n\t\t// Set up the source\n\t\tif( _drawCount == 0 ) {\n\t\t\t// First draw call - use the source texture\n\t\t\tsource = _sourceTexture;\n\t\t}\n\t\telse {\n\t\t\t// All following draw calls use the temp buffer last drawn to\n\t\t\tsource =  _getTempFramebuffer(_currentFramebufferIndex).texture;\n\t\t}\n\t\t_drawCount++;\n\n\n\t\t// Set up the target\n\t\tif( _lastInChain && !(flags & DRAW.INTERMEDIATE) ) {\n\t\t\t// Last filter in our chain - draw directly to the WebGL Canvas. We may\n\t\t\t// also have to flip the image vertically now\n\t\t\ttarget = null;\n\t\t\tflipY = _drawCount % 2 == 0;\n\t\t}\n\t\telse {\n\t\t\t// Intermediate draw call - get a temp buffer to draw to\n\t\t\t_currentFramebufferIndex = (_currentFramebufferIndex+1) % 2;\n\t\t\ttarget = _getTempFramebuffer(_currentFramebufferIndex).fbo;\n\t\t}\n\n\t\t// Bind the source and target and draw the two triangles\n\t\tgl.bindTexture(gl.TEXTURE_2D, source);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, target);\n\n\t\tgl.uniform1f(_currentProgram.uniform.flipY, (flipY ? -1 : 1) );\n\t\tgl.drawArrays(gl.TRIANGLES, 0, 6);\n\t};\n\n\tvar _compileShader = function( fragmentSource ) {\n\t\tif (_shaderProgramCache[fragmentSource]) {\n\t\t\t_currentProgram = _shaderProgramCache[fragmentSource];\n\t\t\tgl.useProgram(_currentProgram.id);\n\t\t\treturn _currentProgram;\n\t\t}\n\n\t\t// Compile shaders\n\t\t_currentProgram = new WebGLProgram( gl, SHADER.VERTEX_IDENTITY, fragmentSource );\n\n\t\tvar floatSize = Float32Array.BYTES_PER_ELEMENT;\n\t\tvar vertSize = 4 * floatSize;\n\t\tgl.enableVertexAttribArray(_currentProgram.attribute.pos);\n\t\tgl.vertexAttribPointer(_currentProgram.attribute.pos, 2, gl.FLOAT, false, vertSize , 0 * floatSize);\n\t\tgl.enableVertexAttribArray(_currentProgram.attribute.uv);\n\t\tgl.vertexAttribPointer(_currentProgram.attribute.uv, 2, gl.FLOAT, false, vertSize, 2 * floatSize);\n\n\t\t_shaderProgramCache[fragmentSource] = _currentProgram;\n\t\treturn _currentProgram;\n\t};\n\n\n\tvar DRAW = { INTERMEDIATE: 1 };\n\n\tvar SHADER = {};\n\tSHADER.VERTEX_IDENTITY = [\n\t\t'precision highp float;',\n\t\t'attribute vec2 pos;',\n\t\t'attribute vec2 uv;',\n\t\t'varying vec2 vUv;',\n\t\t'uniform float flipY;',\n\n\t\t'void main(void) {',\n\t\t\t'vUv = uv;',\n\t\t\t'gl_Position = vec4(pos.x, pos.y*flipY, 0.0, 1.);',\n\t\t'}'\n\t].join('\\n');\n\n\tSHADER.FRAGMENT_IDENTITY = [\n\t\t'precision highp float;',\n\t\t'varying vec2 vUv;',\n\t\t'uniform sampler2D texture;',\n\n\t\t'void main(void) {',\n\t\t\t'gl_FragColor = texture2D(texture, vUv);',\n\t\t'}',\n\t].join('\\n');\n\n\n\tvar _filter = {};\n\n\n\n\t// -------------------------------------------------------------------------\n\t// Color Matrix Filter\n\n\t_filter.colorMatrix = function( matrix , amount = 1 ) {\n\t\tmatrix = matrix.map((coef, index) => weightedAvg(coef, identityMatrix[index], amount));\n\t\t// Create a Float32 Array and normalize the offset component to 0-1\n\t\tvar m = new Float32Array(matrix);\n\t\tm[4] /= 255;\n\t\tm[9] /= 255;\n\t\tm[14] /= 255;\n\t\tm[19] /= 255;\n\n\t\t// Can we ignore the alpha value? Makes things a bit faster.\n\t\tvar shader = (1==m[18]&&0==m[3]&&0==m[8]&&0==m[13]&&0==m[15]&&0==m[16]&&0==m[17]&&0==m[19])\n\t\t\t? _filter.colorMatrix.SHADER.WITHOUT_ALPHA\n\t\t\t: _filter.colorMatrix.SHADER.WITH_ALPHA;\n\t\t\n\t\tvar program = _compileShader(shader);\n\t\tgl.uniform1fv(program.uniform.m, m);\n\t\t_draw();\n\t};\n\n\t_filter.colorMatrix.SHADER = {};\n\t_filter.colorMatrix.SHADER.WITH_ALPHA = [\n\t\t'precision highp float;',\n\t\t'varying vec2 vUv;',\n\t\t'uniform sampler2D texture;',\n\t\t'uniform float m[20];',\n\n\t\t'void main(void) {',\n\t\t\t'vec4 c = texture2D(texture, vUv);',\n\t\t\t'gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];',\n\t\t\t'gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];',\n\t\t\t'gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];',\n\t\t\t'gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];',\n\t\t'}',\n\t].join('\\n');\n\t_filter.colorMatrix.SHADER.WITHOUT_ALPHA = [\n\t\t'precision highp float;',\n\t\t'varying vec2 vUv;',\n\t\t'uniform sampler2D texture;',\n\t\t'uniform float m[20];',\n\n\t\t'void main(void) {',\n\t\t\t'vec4 c = texture2D(texture, vUv);',\n\t\t\t'gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[4];',\n\t\t\t'gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[9];',\n\t\t\t'gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[14];',\n\t\t\t'gl_FragColor.a = c.a;',\n\t\t'}',\n\t].join('\\n');\n\n\t_filter.brightness = function( brightness ) {\n\t\tvar b = (brightness || 0) + 1;\n\t\t_filter.colorMatrix([\n\t\t\t\tb, 0, 0, 0, 0,\n\t\t\t\t0, b, 0, 0, 0,\n\t\t\t\t0, 0, b, 0, 0,\n\t\t\t\t0, 0, 0, 1, 0\n\t\t]);\n\t};\n\n\t_filter.saturation = function( amount ) {\n\t\tvar x = (amount || 0) * 2/3 + 1;\n\t\tvar y = ((x-1) *-0.5);\n\t\t_filter.colorMatrix([\n\t\t\tx, y, y, 0, 0,\n\t\t\ty, x, y, 0, 0,\n\t\t\ty, y, x, 0, 0,\n\t\t\t0, 0, 0, 1, 0\n\t\t]);\n\t};\n\n\t_filter.desaturate = function() {\n\t\t_filter.saturation(-1);\n\t};\n\n\t_filter.contrast = function( amount ) {\n\t\tvar v = (amount || 0) + 1;\n\t\tvar o = -128 * (v-1);\n\t\t\n\t\t_filter.colorMatrix([\n\t\t\tv, 0, 0, 0, o,\n\t\t\t0, v, 0, 0, o,\n\t\t\t0, 0, v, 0, o,\n\t\t\t0, 0, 0, 1, 0\n\t\t]);\n\t};\n\n\t_filter.negative = function() {\n\t\t_filter.contrast(-2);\n\t};\n\n\t_filter.hue = function( rotation ) {\n\t\trotation = (rotation || 0)/180 * Math.PI;\n\t\tvar cos = Math.cos(rotation),\n\t\t\tsin = Math.sin(rotation),\n\t\t\tlumR = 0.213,\n\t\t\tlumG = 0.715,\n\t\t\tlumB = 0.072;\n\n\t\t_filter.colorMatrix([\n\t\t\tlumR+cos*(1-lumR)+sin*(-lumR),lumG+cos*(-lumG)+sin*(-lumG),lumB+cos*(-lumB)+sin*(1-lumB),0,0,\n\t\t\tlumR+cos*(-lumR)+sin*(0.143),lumG+cos*(1-lumG)+sin*(0.140),lumB+cos*(-lumB)+sin*(-0.283),0,0,\n\t\t\tlumR+cos*(-lumR)+sin*(-(1-lumR)),lumG+cos*(-lumG)+sin*(lumG),lumB+cos*(1-lumB)+sin*(lumB),0,0,\n\t\t\t0, 0, 0, 1, 0\n\t\t]);\n\t};\n\n\t_filter.desaturateLuminance = function( amount ) {\n\t\t_filter.colorMatrix([\n\t\t\t0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n\t\t\t0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n\t\t\t0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n\t\t\t0, 0, 0, 1, 0\n\t\t], amount);\n\t};\n\n\t_filter.sepia = function( amount ) {\n\t\t_filter.colorMatrix([\n\t\t\t0.393, 0.7689999, 0.18899999, 0, 0,\n\t\t\t0.349, 0.6859999, 0.16799999, 0, 0,\n\t\t\t0.272, 0.5339999, 0.13099999, 0, 0,\n\t\t\t0,0,0,1,0\n\t\t], amount);\n\t};\n\n\t_filter.brownie = function( amount ) {\n\t\t_filter.colorMatrix([\n\t\t\t0.5997023498159715,0.34553243048391263,-0.2708298674538042,0,47.43192855600873,\n\t\t\t-0.037703249837783157,0.8609577587992641,0.15059552388459913,0,-36.96841498319127,\n\t\t\t0.24113635128153335,-0.07441037908422492,0.44972182064877153,0,-7.562075277591283,\n\t\t\t0,0,0,1,0\n\t\t], amount);\n\t};\n\n\t_filter.vintagePinhole = function( amount ) {\n\t\t_filter.colorMatrix([\n\t\t\t0.6279345635605994,0.3202183420819367,-0.03965408211312453,0,9.651285835294123,\n\t\t\t0.02578397704808868,0.6441188644374771,0.03259127616149294,0,7.462829176470591,\n\t\t\t0.0466055556782719,-0.0851232987247891,0.5241648018700465,0,5.159190588235296,\n\t\t\t0,0,0,1,0\n\t\t], amount);\n\t};\n\n\t_filter.kodachrome = function( amount ) {\n\t\t_filter.colorMatrix([\n\t\t\t1.1285582396593525,-0.3967382283601348,-0.03992559172921793,0,63.72958762196502,\n\t\t\t-0.16404339962244616,1.0835251566291304,-0.05498805115633132,0,24.732407896706203,\n\t\t\t-0.16786010706155763,-0.5603416277695248,1.6014850761964943,0,35.62982807460946,\n\t\t\t0,0,0,1,0\n\t\t], amount);\n\t};\n\n\t_filter.technicolor = function( amount ) {\n\t\t_filter.colorMatrix([\n\t\t\t1.9125277891456083,-0.8545344976951645,-0.09155508482755585,0,11.793603434377337,\n\t\t\t-0.3087833385928097,1.7658908555458428,-0.10601743074722245,0,-70.35205161461398,\n\t\t\t-0.231103377548616,-0.7501899197440212,1.847597816108189,0,30.950940869491138,\n\t\t\t0,0,0,1,0\n\t\t], amount);\n\t};\n\n\t_filter.polaroid = function( amount ) {\n\t\t_filter.colorMatrix([\n\t\t\t1.438,-0.062,-0.062,0,0,\n\t\t\t-0.122,1.378,-0.122,0,0,\n\t\t\t-0.016,-0.016,1.483,0,0,\n\t\t\t0,0,0,1,0\n\t\t], amount);\n\t};\n\n\t_filter.shiftToBGR = function(amount) {\n\t\t_filter.colorMatrix([\n\t\t\t0,0,1,0,0,\n\t\t\t0,1,0,0,0,\n\t\t\t1,0,0,0,0,\n\t\t\t0,0,0,1,0\n\t\t], amount);\n\t};\n\n\n\t// -------------------------------------------------------------------------\n\t// Convolution Filter\n\n\t_filter.convolution = function( matrix ) {\n\t\tvar m = new Float32Array(matrix);\n\t\tvar pixelSizeX = 1 / _width;\n\t\tvar pixelSizeY = 1 / _height;\n\n\t\tvar program = _compileShader(_filter.convolution.SHADER);\n\t\tgl.uniform1fv(program.uniform.m, m);\n\t\tgl.uniform2f(program.uniform.px, pixelSizeX, pixelSizeY);\n\t\t_draw();\n\t};\n\n\t_filter.convolution.SHADER = [\n\t\t'precision highp float;',\n\t\t'varying vec2 vUv;',\n\t\t'uniform sampler2D texture;',\n\t\t'uniform vec2 px;',\n\t\t'uniform float m[9];',\n\n\t\t'void main(void) {',\n\t\t\t'vec4 c11 = texture2D(texture, vUv - px);', // top left\n\t\t\t'vec4 c12 = texture2D(texture, vec2(vUv.x, vUv.y - px.y));', // top center\n\t\t\t'vec4 c13 = texture2D(texture, vec2(vUv.x + px.x, vUv.y - px.y));', // top right\n\n\t\t\t'vec4 c21 = texture2D(texture, vec2(vUv.x - px.x, vUv.y) );', // mid left\n\t\t\t'vec4 c22 = texture2D(texture, vUv);', // mid center\n\t\t\t'vec4 c23 = texture2D(texture, vec2(vUv.x + px.x, vUv.y) );', // mid right\n\n\t\t\t'vec4 c31 = texture2D(texture, vec2(vUv.x - px.x, vUv.y + px.y) );', // bottom left\n\t\t\t'vec4 c32 = texture2D(texture, vec2(vUv.x, vUv.y + px.y) );', // bottom center\n\t\t\t'vec4 c33 = texture2D(texture, vUv + px );', // bottom right\n\n\t\t\t'gl_FragColor = ',\n\t\t\t\t'c11 * m[0] + c12 * m[1] + c22 * m[2] +',\n\t\t\t\t'c21 * m[3] + c22 * m[4] + c23 * m[5] +',\n\t\t\t\t'c31 * m[6] + c32 * m[7] + c33 * m[8];',\n\t\t\t'gl_FragColor.a = c22.a;',\n\t\t'}',\n\t].join('\\n');\n\n\n\t_filter.detectEdges = function() {\n\t\t_filter.convolution.call(this, [\n\t\t\t0, 1, 0,\n\t\t\t1, -4, 1,\n\t\t\t0, 1, 0\n\t\t]);\n\t};\n\n\t_filter.sobelX = function() {\n\t\t_filter.convolution.call(this, [\n\t\t\t-1, 0, 1,\n\t\t\t-2, 0, 2,\n\t\t\t-1, 0, 1\n\t\t]);\n\t};\n\n\t_filter.sobelY = function() {\n\t\t_filter.convolution.call(this, [\n\t\t\t-1, -2, -1,\n\t\t\t 0,  0,  0,\n\t\t\t 1,  2,  1\n\t\t]);\n\t};\n\n\t_filter.sharpen = function( amount ) {\n\t\tvar a = amount || 1;\n\t\t_filter.convolution.call(this, [\n\t\t\t0, -1*a, 0,\n\t\t\t-1*a, 1 + 4*a, -1*a,\n\t\t\t0, -1*a, 0\n\t\t]);\n\t};\n\n\t_filter.emboss = function( size ) {\n\t\tvar s = size || 1;\n\t\t_filter.convolution.call(this, [\n\t\t\t-2*s, -1*s, 0,\n\t\t\t-1*s, 1, 1*s,\n\t\t\t0, 1*s, 2*s\n\t\t]);\n\t};\n\n\n\t// -------------------------------------------------------------------------\n\t// Blur Filter\n\n\t_filter.blur = function( size ) {\n\t\tvar blurSizeX = (size/7) / _width;\n\t\tvar blurSizeY = (size/7) / _height;\n\n\t\tvar program = _compileShader(_filter.blur.SHADER);\n\n\t\t// Vertical\n\t\tgl.uniform2f(program.uniform.px, 0, blurSizeY);\n\t\t_draw(DRAW.INTERMEDIATE);\n\n\t\t// Horizontal\n\t\tgl.uniform2f(program.uniform.px, blurSizeX, 0);\n\t\t_draw();\n\t};\n\n\t_filter.blur.SHADER = [\n\t\t'precision highp float;',\n\t\t'varying vec2 vUv;',\n\t\t'uniform sampler2D texture;',\n\t\t'uniform vec2 px;',\n\n\t\t'void main(void) {',\n\t\t\t'gl_FragColor = vec4(0.0);',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2(-7.0*px.x, -7.0*px.y))*0.0044299121055113265;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2(-6.0*px.x, -6.0*px.y))*0.00895781211794;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2(-5.0*px.x, -5.0*px.y))*0.0215963866053;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2(-4.0*px.x, -4.0*px.y))*0.0443683338718;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2(-3.0*px.x, -3.0*px.y))*0.0776744219933;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2(-2.0*px.x, -2.0*px.y))*0.115876621105;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2(-1.0*px.x, -1.0*px.y))*0.147308056121;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv                             )*0.159576912161;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2( 1.0*px.x,  1.0*px.y))*0.147308056121;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2( 2.0*px.x,  2.0*px.y))*0.115876621105;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2( 3.0*px.x,  3.0*px.y))*0.0776744219933;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2( 4.0*px.x,  4.0*px.y))*0.0443683338718;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2( 5.0*px.x,  5.0*px.y))*0.0215963866053;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2( 6.0*px.x,  6.0*px.y))*0.00895781211794;',\n\t\t\t'gl_FragColor += texture2D(texture, vUv + vec2( 7.0*px.x,  7.0*px.y))*0.0044299121055113265;',\n\t\t'}',\n\t].join('\\n');\n\n\n\t// -------------------------------------------------------------------------\n\t// Pixelate Filter\n\n\t_filter.pixelate = function( size ) {\n\t\tvar blurSizeX = (size) / _width;\n\t\tvar blurSizeY = (size) / _height;\n\n\t\tvar program = _compileShader(_filter.pixelate.SHADER);\n\n\t\t// Horizontal\n\t\tgl.uniform2f(program.uniform.size, blurSizeX, blurSizeY);\n\t\t_draw();\n\t};\n\n\t_filter.pixelate.SHADER = [\n\t\t'precision highp float;',\n\t\t'varying vec2 vUv;',\n\t\t'uniform vec2 size;',\n\t\t'uniform sampler2D texture;',\n\n\t\t'vec2 pixelate(vec2 coord, vec2 size) {',\n\t\t\t'return floor( coord / size ) * size;',\n\t\t'}',\n\n\t\t'void main(void) {',\n\t\t\t'gl_FragColor = vec4(0.0);',\n\t\t\t'vec2 coord = pixelate(vUv, size);',\n\t\t\t'gl_FragColor += texture2D(texture, coord);',\n\t\t'}',\n\t].join('\\n');\n};\n\n})(window);\n", "/*! @license DOMPurify 2.3.1 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.1/LICENSE */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.DOMPurify = factory());\n}(this, function () { 'use strict';\n\n  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n  var hasOwnProperty = Object.hasOwnProperty,\n      setPrototypeOf = Object.setPrototypeOf,\n      isFrozen = Object.isFrozen,\n      getPrototypeOf = Object.getPrototypeOf,\n      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n  var freeze = Object.freeze,\n      seal = Object.seal,\n      create = Object.create; // eslint-disable-line import/no-mutable-exports\n\n  var _ref = typeof Reflect !== 'undefined' && Reflect,\n      apply = _ref.apply,\n      construct = _ref.construct;\n\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n\n  if (!freeze) {\n    freeze = function freeze(x) {\n      return x;\n    };\n  }\n\n  if (!seal) {\n    seal = function seal(x) {\n      return x;\n    };\n  }\n\n  if (!construct) {\n    construct = function construct(Func, args) {\n      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();\n    };\n  }\n\n  var arrayForEach = unapply(Array.prototype.forEach);\n  var arrayPop = unapply(Array.prototype.pop);\n  var arrayPush = unapply(Array.prototype.push);\n\n  var stringToLowerCase = unapply(String.prototype.toLowerCase);\n  var stringMatch = unapply(String.prototype.match);\n  var stringReplace = unapply(String.prototype.replace);\n  var stringIndexOf = unapply(String.prototype.indexOf);\n  var stringTrim = unapply(String.prototype.trim);\n\n  var regExpTest = unapply(RegExp.prototype.test);\n\n  var typeErrorCreate = unconstruct(TypeError);\n\n  function unapply(func) {\n    return function (thisArg) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return apply(func, thisArg, args);\n    };\n  }\n\n  function unconstruct(func) {\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return construct(func, args);\n    };\n  }\n\n  /* Add properties to a lookup table */\n  function addToSet(set, array) {\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n\n    var l = array.length;\n    while (l--) {\n      var element = array[l];\n      if (typeof element === 'string') {\n        var lcElement = stringToLowerCase(element);\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!isFrozen(array)) {\n            array[l] = lcElement;\n          }\n\n          element = lcElement;\n        }\n      }\n\n      set[element] = true;\n    }\n\n    return set;\n  }\n\n  /* Shallow clone an object */\n  function clone(object) {\n    var newObject = create(null);\n\n    var property = void 0;\n    for (property in object) {\n      if (apply(hasOwnProperty, object, [property])) {\n        newObject[property] = object[property];\n      }\n    }\n\n    return newObject;\n  }\n\n  /* IE10 doesn't support __lookupGetter__ so lets'\n   * simulate it. It also automatically checks\n   * if the prop is function or getter and behaves\n   * accordingly. */\n  function lookupGetter(object, prop) {\n    while (object !== null) {\n      var desc = getOwnPropertyDescriptor(object, prop);\n      if (desc) {\n        if (desc.get) {\n          return unapply(desc.get);\n        }\n\n        if (typeof desc.value === 'function') {\n          return unapply(desc.value);\n        }\n      }\n\n      object = getPrototypeOf(object);\n    }\n\n    function fallbackValue(element) {\n      console.warn('fallback value for', element);\n      return null;\n    }\n\n    return fallbackValue;\n  }\n\n  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\n\n  // SVG\n  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\n\n  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n\n  // List of SVG elements that are disallowed by default.\n  // We still need to know them so that we can do namespace\n  // checks properly in case one wants to add them to\n  // allow-list.\n  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'feimage', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\n\n  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);\n\n  // Similarly to SVG, we want to know all MathML elements,\n  // even those that we disallow by default.\n  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\n\n  var text = freeze(['#text']);\n\n  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'contenteditable', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);\n\n  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n\n  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n\n  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n  // eslint-disable-next-line unicorn/better-regex\n  var MUSTACHE_EXPR = seal(/\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n  var ERB_EXPR = seal(/<%[\\s\\S]*|[\\s\\S]*%>/gm);\n  var DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n  var ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  var IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  var ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n  );\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n  function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n  var getGlobal = function getGlobal() {\n    return typeof window === 'undefined' ? null : window;\n  };\n\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n   * @param {Document} document The document object (to determine policy name suffix)\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n   * are not supported).\n   */\n  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {\n    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    }\n\n    // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n    var suffix = null;\n    var ATTR_NAME = 'data-tt-policy-suffix';\n    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {\n      suffix = document.currentScript.getAttribute(ATTR_NAME);\n    }\n\n    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML: function createHTML(html$$1) {\n          return html$$1;\n        }\n      });\n    } catch (_) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n\n  function createDOMPurify() {\n    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n    var DOMPurify = function DOMPurify(root) {\n      return createDOMPurify(root);\n    };\n\n    /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */\n    DOMPurify.version = '2.3.1';\n\n    /**\n     * Array of elements that DOMPurify removed during sanitation.\n     * Empty if nothing was removed.\n     */\n    DOMPurify.removed = [];\n\n    if (!window || !window.document || window.document.nodeType !== 9) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n\n      return DOMPurify;\n    }\n\n    var originalDocument = window.document;\n\n    var document = window.document;\n    var DocumentFragment = window.DocumentFragment,\n        HTMLTemplateElement = window.HTMLTemplateElement,\n        Node = window.Node,\n        Element = window.Element,\n        NodeFilter = window.NodeFilter,\n        _window$NamedNodeMap = window.NamedNodeMap,\n        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\n        Text = window.Text,\n        Comment = window.Comment,\n        DOMParser = window.DOMParser,\n        trustedTypes = window.trustedTypes;\n\n\n    var ElementPrototype = Element.prototype;\n\n    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n    var getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n\n    // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n    if (typeof HTMLTemplateElement === 'function') {\n      var template = document.createElement('template');\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n\n    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);\n    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';\n\n    var _document = document,\n        implementation = _document.implementation,\n        createNodeIterator = _document.createNodeIterator,\n        createDocumentFragment = _document.createDocumentFragment,\n        getElementsByTagName = _document.getElementsByTagName;\n    var importNode = originalDocument.importNode;\n\n\n    var documentMode = {};\n    try {\n      documentMode = clone(document).documentMode ? document.documentMode : {};\n    } catch (_) {}\n\n    var hooks = {};\n\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n    DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;\n\n    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,\n        ERB_EXPR$$1 = ERB_EXPR,\n        DATA_ATTR$$1 = DATA_ATTR,\n        ARIA_ATTR$$1 = ARIA_ATTR,\n        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,\n        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;\n    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;\n\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n\n    /* allowed element names */\n\n    var ALLOWED_TAGS = null;\n    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));\n\n    /* Allowed attribute names */\n    var ALLOWED_ATTR = null;\n    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));\n\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n    var FORBID_TAGS = null;\n\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n    var FORBID_ATTR = null;\n\n    /* Decide if ARIA attributes are okay */\n    var ALLOW_ARIA_ATTR = true;\n\n    /* Decide if custom data attributes are okay */\n    var ALLOW_DATA_ATTR = true;\n\n    /* Decide if unknown protocols are okay */\n    var ALLOW_UNKNOWN_PROTOCOLS = false;\n\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n    var SAFE_FOR_TEMPLATES = false;\n\n    /* Decide if document with <html>... should be returned */\n    var WHOLE_DOCUMENT = false;\n\n    /* Track whether config is already set on this instance of DOMPurify. */\n    var SET_CONFIG = false;\n\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n    var FORCE_BODY = false;\n\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n    var RETURN_DOM = false;\n\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n    var RETURN_DOM_FRAGMENT = false;\n\n    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n     * `Node` is imported into the current `Document`. If this flag is not enabled the\n     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n     * DOMPurify.\n     *\n     * This defaults to `true` starting DOMPurify 2.2.0. Note that setting it to `false`\n     * might cause XSS from attacks hidden in closed shadowroots in case the browser\n     * supports Declarative Shadow: DOM https://web.dev/declarative-shadow-dom/\n     */\n    var RETURN_DOM_IMPORT = true;\n\n    /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */\n    var RETURN_TRUSTED_TYPE = false;\n\n    /* Output should be free from DOM clobbering attacks? */\n    var SANITIZE_DOM = true;\n\n    /* Keep element content when removing element? */\n    var KEEP_CONTENT = true;\n\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n    var IN_PLACE = false;\n\n    /* Allow usage of profiles like html, svg and mathMl */\n    var USE_PROFILES = {};\n\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n    var FORBID_CONTENTS = null;\n    var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n\n    /* Tags that are safe for data: URIs */\n    var DATA_URI_TAGS = null;\n    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n\n    /* Attributes safe for values like \"javascript:\" */\n    var URI_SAFE_ATTRIBUTES = null;\n    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n\n    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n    /* Document namespace */\n    var NAMESPACE = HTML_NAMESPACE;\n    var IS_EMPTY_INPUT = false;\n\n    /* Keep a reference to config to pass to hooks */\n    var CONFIG = null;\n\n    /* Ideally, do not touch anything below this line */\n    /* ______________________________________________ */\n\n    var formElement = document.createElement('form');\n\n    /**\n     * _parseConfig\n     *\n     * @param  {Object} cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n    var _parseConfig = function _parseConfig(cfg) {\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n\n      /* Shield configuration object from tampering */\n      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {\n        cfg = {};\n      }\n\n      /* Shield configuration object from prototype pollution */\n      cfg = clone(cfg);\n\n      /* Set configuration parameters */\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;\n      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;\n      FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n      RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT !== false; // Default true\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;\n      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n\n      /* Parse profile info */\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));\n        ALLOWED_ATTR = [];\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html);\n          addToSet(ALLOWED_ATTR, html$1);\n        }\n\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg);\n          addToSet(ALLOWED_ATTR, svg$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl);\n          addToSet(ALLOWED_ATTR, mathMl$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n\n      /* Merge configuration parameters */\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n      }\n\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n      }\n\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n      }\n\n      if (cfg.FORBID_CONTENTS) {\n        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n          FORBID_CONTENTS = clone(FORBID_CONTENTS);\n        }\n\n        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);\n      }\n\n      /* Add #text in case KEEP_CONTENT is set to true */\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      }\n\n      // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n      if (freeze) {\n        freeze(cfg);\n      }\n\n      CONFIG = cfg;\n    };\n\n    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n\n    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']);\n\n    /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */\n    var ALL_SVG_TAGS = addToSet({}, svg);\n    addToSet(ALL_SVG_TAGS, svgFilters);\n    addToSet(ALL_SVG_TAGS, svgDisallowed);\n\n    var ALL_MATHML_TAGS = addToSet({}, mathMl);\n    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\n\n    /**\n     *\n     *\n     * @param  {Element} element a DOM element whose namespace is being checked\n     * @returns {boolean} Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */\n    var _checkValidNamespace = function _checkValidNamespace(element) {\n      var parent = getParentNode(element);\n\n      // In JSDOM, if we're inside shadow DOM, then parentNode\n      // can be null. We just simulate parent in this case.\n      if (!parent || !parent.tagName) {\n        parent = {\n          namespaceURI: HTML_NAMESPACE,\n          tagName: 'template'\n        };\n      }\n\n      var tagName = stringToLowerCase(element.tagName);\n      var parentTagName = stringToLowerCase(parent.tagName);\n\n      if (element.namespaceURI === SVG_NAMESPACE) {\n        // The only way to switch from HTML namespace to SVG\n        // is via <svg>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'svg';\n        }\n\n        // The only way to switch from MathML to SVG is via\n        // svg if parent is either <annotation-xml> or MathML\n        // text integration points.\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n        }\n\n        // We only allow elements that are defined in SVG\n        // spec. All others are disallowed in SVG namespace.\n        return Boolean(ALL_SVG_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === MATHML_NAMESPACE) {\n        // The only way to switch from HTML namespace to MathML\n        // is via <math>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'math';\n        }\n\n        // The only way to switch from SVG to MathML is via\n        // <math> and HTML integration points\n        if (parent.namespaceURI === SVG_NAMESPACE) {\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n        }\n\n        // We only allow elements that are defined in MathML\n        // spec. All others are disallowed in MathML namespace.\n        return Boolean(ALL_MATHML_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === HTML_NAMESPACE) {\n        // The only way to switch from SVG to HTML is via\n        // HTML integration points, and from MathML to HTML\n        // is via MathML text integration points\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n\n        // Certain elements are allowed in both SVG and HTML\n        // namespace. We need to specify them explicitly\n        // so that they don't get erronously deleted from\n        // HTML namespace.\n        var commonSvgAndHTMLElements = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n\n        // We disallow tags that are specific for MathML\n        // or SVG and should never appear in HTML namespace\n        return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);\n      }\n\n      // The code should never reach this place (this means\n      // that the element somehow got namespace that is not\n      // HTML, SVG or MathML). Return false just in case.\n      return false;\n    };\n\n    /**\n     * _forceRemove\n     *\n     * @param  {Node} node a DOM node\n     */\n    var _forceRemove = function _forceRemove(node) {\n      arrayPush(DOMPurify.removed, { element: node });\n      try {\n        // eslint-disable-next-line unicorn/prefer-dom-node-remove\n        node.parentNode.removeChild(node);\n      } catch (_) {\n        try {\n          node.outerHTML = emptyHTML;\n        } catch (_) {\n          node.remove();\n        }\n      }\n    };\n\n    /**\n     * _removeAttribute\n     *\n     * @param  {String} name an Attribute name\n     * @param  {Node} node a DOM node\n     */\n    var _removeAttribute = function _removeAttribute(name, node) {\n      try {\n        arrayPush(DOMPurify.removed, {\n          attribute: node.getAttributeNode(name),\n          from: node\n        });\n      } catch (_) {\n        arrayPush(DOMPurify.removed, {\n          attribute: null,\n          from: node\n        });\n      }\n\n      node.removeAttribute(name);\n\n      // We void attribute values for unremovable \"is\"\" attributes\n      if (name === 'is' && !ALLOWED_ATTR[name]) {\n        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n          try {\n            _forceRemove(node);\n          } catch (_) {}\n        } else {\n          try {\n            node.setAttribute(name, '');\n          } catch (_) {}\n        }\n      }\n    };\n\n    /**\n     * _initDocument\n     *\n     * @param  {String} dirty a string of dirty markup\n     * @return {Document} a DOM, filled with the dirty markup\n     */\n    var _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      var doc = void 0;\n      var leadingWhitespace = void 0;\n\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        var matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n        leadingWhitespace = matches && matches[0];\n      }\n\n      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */\n      if (NAMESPACE === HTML_NAMESPACE) {\n        try {\n          doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');\n        } catch (_) {}\n      }\n\n      /* Use createHTMLDocument in case DOMParser is not available */\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createDocument(NAMESPACE, 'template', null);\n        try {\n          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? '' : dirtyPayload;\n        } catch (_) {\n          // Syntax error if dirtyPayload is invalid xml\n        }\n      }\n\n      var body = doc.body || doc.documentElement;\n\n      if (dirty && leadingWhitespace) {\n        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n      }\n\n      /* Work on whole document or just its body */\n      if (NAMESPACE === HTML_NAMESPACE) {\n        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n      }\n\n      return WHOLE_DOCUMENT ? doc.documentElement : body;\n    };\n\n    /**\n     * _createIterator\n     *\n     * @param  {Document} root document/fragment to create iterator for\n     * @return {Iterator} iterator instance\n     */\n    var _createIterator = function _createIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);\n    };\n\n    /**\n     * _isClobbered\n     *\n     * @param  {Node} elm element to check for clobbering attacks\n     * @return {Boolean} true if clobbered, false if safe\n     */\n    var _isClobbered = function _isClobbered(elm) {\n      if (elm instanceof Text || elm instanceof Comment) {\n        return false;\n      }\n\n      if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function') {\n        return true;\n      }\n\n      return false;\n    };\n\n    /**\n     * _isNode\n     *\n     * @param  {Node} obj object to check whether it's a DOM node\n     * @return {Boolean} true is object is a DOM node\n     */\n    var _isNode = function _isNode(object) {\n      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';\n    };\n\n    /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode node to work on with the hook\n     * @param  {Object} data additional hook parameters\n     */\n    var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n      if (!hooks[entryPoint]) {\n        return;\n      }\n\n      arrayForEach(hooks[entryPoint], function (hook) {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    };\n\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   {Node} currentNode to check for permission to exist\n     * @return  {Boolean} true if node was killed, false if left alive\n     */\n    var _sanitizeElements = function _sanitizeElements(currentNode) {\n      var content = void 0;\n\n      /* Execute a hook if present */\n      _executeHook('beforeSanitizeElements', currentNode, null);\n\n      /* Check if element is clobbered or can clobber */\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n\n      /* Check if tagname contains Unicode */\n      if (stringMatch(currentNode.nodeName, /[\\u0080-\\uFFFF]/)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n\n      /* Now let's check the element's type and name */\n      var tagName = stringToLowerCase(currentNode.nodeName);\n\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeElement', currentNode, {\n        tagName: tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n\n      /* Detect mXSS attempts abusing namespace confusion */\n      if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n\n      /* Mitigate a problem with templates inside select */\n      if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n\n      /* Remove element if anything forbids its presence */\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Keep content except for bad-listed elements */\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n          var parentNode = getParentNode(currentNode) || currentNode.parentNode;\n          var childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n          if (childNodes && parentNode) {\n            var childCount = childNodes.length;\n\n            for (var i = childCount - 1; i >= 0; --i) {\n              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));\n            }\n          }\n        }\n\n        _forceRemove(currentNode);\n        return true;\n      }\n\n      /* Check whether element has a valid namespace */\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n\n      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\\/no(script|embed)/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n\n      /* Sanitize element content to be template-safe */\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');\n        content = stringReplace(content, ERB_EXPR$$1, ' ');\n        if (currentNode.textContent !== content) {\n          arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\n          currentNode.textContent = content;\n        }\n      }\n\n      /* Execute a hook if present */\n      _executeHook('afterSanitizeElements', currentNode, null);\n\n      return false;\n    };\n\n    /**\n     * _isValidAttribute\n     *\n     * @param  {string} lcTag Lowercase tag name of containing element.\n     * @param  {string} lcName Lowercase attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        return false;\n\n        /* Check value is safe. First, is attr inert? If so, is safe */\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param  {Node} currentNode to sanitize\n     */\n    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      var attr = void 0;\n      var value = void 0;\n      var lcName = void 0;\n      var l = void 0;\n      /* Execute a hook if present */\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n      var attributes = currentNode.attributes;\n\n      /* Check if we have attributes; if not we might have a text node */\n\n      if (!attributes) {\n        return;\n      }\n\n      var hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR\n      };\n      l = attributes.length;\n\n      /* Go backwards over all attributes; safely remove bad ones */\n      while (l--) {\n        attr = attributes[l];\n        var _attr = attr,\n            name = _attr.name,\n            namespaceURI = _attr.namespaceURI;\n\n        value = stringTrim(attr.value);\n        lcName = stringToLowerCase(name);\n\n        /* Execute a hook if present */\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n        value = hookEvent.attrValue;\n        /* Did the hooks approve of the attribute? */\n        if (hookEvent.forceKeepAttr) {\n          continue;\n        }\n\n        /* Remove attribute */\n        _removeAttribute(name, currentNode);\n\n        /* Did the hooks approve of the attribute? */\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n\n        /* Work around a security issue in jQuery 3.0 */\n        if (regExpTest(/\\/>/i, value)) {\n          _removeAttribute(name, currentNode);\n          continue;\n        }\n\n        /* Sanitize attribute content to be template-safe */\n        if (SAFE_FOR_TEMPLATES) {\n          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');\n          value = stringReplace(value, ERB_EXPR$$1, ' ');\n        }\n\n        /* Is `value` valid for this attribute? */\n        var lcTag = currentNode.nodeName.toLowerCase();\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n\n        /* Handle invalid data-* attribute set by try-catching it */\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n\n          arrayPop(DOMPurify.removed);\n        } catch (_) {}\n      }\n\n      /* Execute a hook if present */\n      _executeHook('afterSanitizeAttributes', currentNode, null);\n    };\n\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param  {DocumentFragment} fragment to iterate over recursively\n     */\n    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      var shadowNode = void 0;\n      var shadowIterator = _createIterator(fragment);\n\n      /* Execute a hook if present */\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n        /* Sanitize tags and elements */\n        if (_sanitizeElements(shadowNode)) {\n          continue;\n        }\n\n        /* Deep shadow DOM detected */\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n\n        /* Check attributes, sanitize if necessary */\n        _sanitizeAttributes(shadowNode);\n      }\n\n      /* Execute a hook if present */\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\n    };\n\n    /**\n     * Sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String|Node} dirty string or DOM node\n     * @param {Object} configuration object\n     */\n    // eslint-disable-next-line complexity\n    DOMPurify.sanitize = function (dirty, cfg) {\n      var body = void 0;\n      var importedNode = void 0;\n      var currentNode = void 0;\n      var oldNode = void 0;\n      var returnNode = void 0;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n      IS_EMPTY_INPUT = !dirty;\n      if (IS_EMPTY_INPUT) {\n        dirty = '<!-->';\n      }\n\n      /* Stringify, in case dirty is an object */\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        // eslint-disable-next-line no-negated-condition\n        if (typeof dirty.toString !== 'function') {\n          throw typeErrorCreate('toString is not a function');\n        } else {\n          dirty = dirty.toString();\n          if (typeof dirty !== 'string') {\n            throw typeErrorCreate('dirty is not a string, aborting');\n          }\n        }\n      }\n\n      /* Check we can run. Otherwise fall back or ignore */\n      if (!DOMPurify.isSupported) {\n        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\n          if (typeof dirty === 'string') {\n            return window.toStaticHTML(dirty);\n          }\n\n          if (_isNode(dirty)) {\n            return window.toStaticHTML(dirty.outerHTML);\n          }\n        }\n\n        return dirty;\n      }\n\n      /* Assign config vars */\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n\n      /* Clean up removed elements */\n      DOMPurify.removed = [];\n\n      /* Check if dirty is correctly typed for IN_PLACE */\n      if (typeof dirty === 'string') {\n        IN_PLACE = false;\n      }\n\n      if (IN_PLACE) ; else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!---->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\n        // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n\n        /* Initialize the document to work on */\n        body = _initDocument(dirty);\n\n        /* Check we have a DOM node from the data */\n        if (!body) {\n          return RETURN_DOM ? null : emptyHTML;\n        }\n      }\n\n      /* Remove first element node (ours) if FORCE_BODY is set */\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n\n      /* Get node iterator */\n      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n\n      /* Now start iterating over the created document */\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Fix IE's strange behavior with manipulated textNodes #89 */\n        if (currentNode.nodeType === 3 && currentNode === oldNode) {\n          continue;\n        }\n\n        /* Sanitize tags and elements */\n        if (_sanitizeElements(currentNode)) {\n          continue;\n        }\n\n        /* Shadow DOM detected, sanitize it */\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n\n        /* Check attributes, sanitize if necessary */\n        _sanitizeAttributes(currentNode);\n\n        oldNode = currentNode;\n      }\n\n      oldNode = null;\n\n      /* If we sanitized `dirty` in-place, return it. */\n      if (IN_PLACE) {\n        return dirty;\n      }\n\n      /* Return sanitized string or DOM */\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-dom-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n\n        if (RETURN_DOM_IMPORT) {\n          /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n\n        return returnNode;\n      }\n\n      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n      /* Sanitize final string template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');\n        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');\n      }\n\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n\n    /**\n     * Public method to set the configuration once\n     * setConfig\n     *\n     * @param {Object} cfg configuration object\n     */\n    DOMPurify.setConfig = function (cfg) {\n      _parseConfig(cfg);\n      SET_CONFIG = true;\n    };\n\n    /**\n     * Public method to remove the configuration\n     * clearConfig\n     *\n     */\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n\n    /**\n     * Public method to check if an attribute value is valid.\n     * Uses last set config, if any. Otherwise, uses config defaults.\n     * isValidAttribute\n     *\n     * @param  {string} tag Tag name of containing element.\n     * @param  {string} attr Attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n     */\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n\n      var lcTag = stringToLowerCase(tag);\n      var lcName = stringToLowerCase(attr);\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n\n    /**\n     * AddHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint entry point for the hook to add\n     * @param {Function} hookFunction function to execute\n     */\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n\n      hooks[entryPoint] = hooks[entryPoint] || [];\n      arrayPush(hooks[entryPoint], hookFunction);\n    };\n\n    /**\n     * RemoveHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint entry point for the hook to remove\n     */\n    DOMPurify.removeHook = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        arrayPop(hooks[entryPoint]);\n      }\n    };\n\n    /**\n     * RemoveHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint entry point for the hooks to remove\n     */\n    DOMPurify.removeHooks = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        hooks[entryPoint] = [];\n      }\n    };\n\n    /**\n     * RemoveAllHooks\n     * Public method to remove all DOMPurify hooks\n     *\n     */\n    DOMPurify.removeAllHooks = function () {\n      hooks = {};\n    };\n\n    return DOMPurify;\n  }\n\n  var purify = createDOMPurify();\n\n  return purify;\n\n}));\n", "/** @odoo-module **/\n\nimport './commands/deleteBackward.js';\nimport './commands/deleteForward.js';\nimport './commands/enter.js';\nimport './commands/shiftEnter.js';\nimport './commands/shiftTab.js';\nimport './commands/tab.js';\nimport './commands/toggleList.js';\nimport './commands/align.js';\n\nimport { sanitize } from './utils/sanitize.js';\nimport { serializeNode, unserializeNode, serializeSelection } from './utils/serialize.js';\nimport {\n    closestBlock,\n    commonParentGet,\n    containsUnremovable,\n    DIRECTIONS,\n    ensureFocus,\n    getCursorDirection,\n    getFurthestUneditableParent,\n    getListMode,\n    getOuid,\n    insertText,\n    isColorGradient,\n    nodeSize,\n    preserveCursor,\n    setCursorStart,\n    setSelection,\n    toggleClass,\n    closestElement,\n    isVisible,\n    isHtmlContentSupported,\n    rgbToHex,\n    isFontAwesome,\n    ICON_SELECTOR,\n    getInSelection,\n    getDeepRange,\n    getRowIndex,\n    getColumnIndex,\n    ancestors,\n    firstLeaf,\n    previousLeaf,\n    nextLeaf,\n    isUnremovable,\n    fillEmpty,\n    isEmptyBlock,\n    URL_REGEX,\n    isSelectionFormat,\n    YOUTUBE_URL_GET_VIDEO_ID,\n    unwrapContents,\n    peek,\n    getAdjacentPreviousSiblings,\n    getAdjacentNextSiblings,\n    isBlock,\n    getTraversedNodes,\n    getSelectedNodes,\n    descendants,\n    hasValidSelection,\n    hasTableSelection,\n    pxToFloat,\n    parseHTML,\n    splitTextNode,\n    isEditorTab,\n    isMacOS,\n    isProtected,\n    isArtificialVoidElement,\n    cleanZWS,\n    isZWS,\n    setCursorEnd,\n    paragraphRelatedElements,\n    getDeepestPosition,\n    leftPos,\n    isNotAllowedContent,\n    EMAIL_REGEX,\n    prepareUpdate,\n    boundariesOut,\n    getFontSizeDisplayValue,\n    rightLeafOnlyNotBlockPath,\n    lastLeaf,\n    isUnbreakable,\n    splitAroundUntil,\n    ZERO_WIDTH_CHARS,\n    ZERO_WIDTH_CHARS_REGEX,\n    getAdjacentCharacter,\n    isLinkEligibleForZwnbsp,\n} from './utils/utils.js';\nimport { editorCommands } from './commands/commands.js';\nimport { Powerbox } from './powerbox/Powerbox.js';\nimport { TablePicker } from './tablepicker/TablePicker.js';\n\nexport * from './utils/utils.js';\nimport { UNBREAKABLE_ROLLBACK_CODE, UNREMOVABLE_ROLLBACK_CODE } from './utils/constants.js';\n/* global DOMPurify */\n\nconst BACKSPACE_ONLY_COMMANDS = ['oDeleteBackward', 'oDeleteForward'];\nconst BACKSPACE_FIRST_COMMANDS = BACKSPACE_ONLY_COMMANDS.concat(['oEnter', 'oShiftEnter']);\n\n// 60 seconds\nconst HISTORY_SNAPSHOT_INTERVAL = 1000 * 60;\n// 10 seconds\nconst HISTORY_SNAPSHOT_BUFFER_TIME = 1000 * 10;\n\nconst KEYBOARD_TYPES = { VIRTUAL: 'VIRTUAL', PHYSICAL: 'PHYSICAL', UNKNOWN: 'UKNOWN' };\n\nexport const AVATAR_SIZE = 25;\n\nconst IS_KEYBOARD_EVENT_UNDO = ev => ev.key === 'z' && (ev.ctrlKey || ev.metaKey);\nconst IS_KEYBOARD_EVENT_REDO = ev => ev.key === 'y' && (ev.ctrlKey || ev.metaKey);\nconst IS_KEYBOARD_EVENT_BOLD = ev => ev.key === 'b' && (ev.ctrlKey || ev.metaKey);\nconst IS_KEYBOARD_EVENT_ITALIC = ev => ev.key === 'i' && (ev.ctrlKey || ev.metaKey);\nconst IS_KEYBOARD_EVENT_UNDERLINE = ev => ev.key === 'u' && (ev.ctrlKey || ev.metaKey);\nconst IS_KEYBOARD_EVENT_STRIKETHROUGH = ev => ev.key === '5' && (ev.ctrlKey || ev.metaKey);\nconst IS_KEYBOARD_EVENT_LEFT_ARROW = ev => ev.key === 'ArrowLeft' && !(ev.ctrlKey || ev.metaKey);\nconst IS_KEYBOARD_EVENT_RIGHT_ARROW = ev => ev.key === 'ArrowRight' && !(ev.ctrlKey || ev.metaKey);\n\nconst CLIPBOARD_BLACKLISTS = {\n    unwrap: ['.Apple-interchange-newline', 'DIV'], // These elements' children will be unwrapped.\n    remove: ['META', 'STYLE', 'SCRIPT'], // These elements will be removed along with their children.\n};\nexport const CLIPBOARD_WHITELISTS = {\n    nodes: [\n        // Style\n        'P',\n        'H1',\n        'H2',\n        'H3',\n        'H4',\n        'H5',\n        'H6',\n        'BLOCKQUOTE',\n        'PRE',\n        // List\n        'UL',\n        'OL',\n        'LI',\n        // Inline style\n        'I',\n        'B',\n        'U',\n        'S',\n        'EM',\n        'FONT',\n        'STRONG',\n        // Table\n        'TABLE',\n        'THEAD',\n        'TH',\n        'TBODY',\n        'TR',\n        'TD',\n        // Miscellaneous\n        'IMG',\n        'BR',\n        'A',\n        '.fa',\n    ],\n    classes: [\n        // Media\n        /^float-/,\n        'd-block',\n        'mx-auto',\n        'img-fluid',\n        'img-thumbnail',\n        'rounded',\n        'rounded-circle',\n        'table',\n        'table-bordered',\n        /^padding-/,\n        /^shadow/,\n        // Odoo colors\n        /^text-o-/,\n        /^bg-o-/,\n        // Odoo lists\n        'o_checked',\n        'o_checklist',\n        'oe-nested',\n        // Miscellaneous\n        /^btn/,\n        /^fa/,\n    ],\n    attributes: ['class', 'href', 'src', 'target'],\n    styledTags: ['SPAN', 'B', 'STRONG', 'I', 'S', 'U', 'FONT', 'TD'],\n};\n\n// Commands that don't require a DOM selection but take an argument instead.\nconst SELECTIONLESS_COMMANDS = ['addRow', 'addColumn', 'removeRow', 'removeColumn', 'resetSize'];\n\nconst FORMATTING_COMMANDS = ['applyColor', 'bold', 'italic', 'underline', 'strikeThrough', 'setFontSize']\n\nfunction defaultOptions(defaultObject, object) {\n    const newObject = Object.assign({}, defaultObject, object);\n    for (const [key, value] of Object.entries(object)) {\n        if (typeof value === 'undefined') {\n            newObject[key] = defaultObject[key];\n        }\n    }\n    return newObject;\n}\nfunction getImageFiles(dataTransfer) {\n    return [...dataTransfer.items]\n        .filter(item => item.kind === 'file' && item.type.includes('image/'))\n        .map((item) => item.getAsFile());\n}\nfunction getImageUrl (file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.readAsDataURL(file);\n        reader.onloadend = (e) => {\n            if (reader.error) {\n                return reject(reader.error);\n            }\n            resolve(e.target.result);\n        };\n    });\n}\nexport class OdooEditor extends EventTarget {\n    constructor(editable, options = {}) {\n        super();\n\n        this.options = defaultOptions(\n            {\n                controlHistoryFromDocument: false,\n                getContextFromParentRect: () => {\n                    return { top: 0, left: 0 };\n                },\n                getScrollContainerRect: () => document.body.getBoundingClientRect(),\n                toSanitize: true,\n                isRootEditable: true,\n                placeholder: false,\n                showEmptyElementHint: true,\n                defaultLinkAttributes: {},\n                plugins: [],\n                getUnremovableElements: () => [],\n                getReadOnlyAreas: () => [],\n                getContentEditableAreas: () => [],\n                getPowerboxElement: () => {\n                    const selection = document.getSelection();\n                    if (selection.isCollapsed && selection.rangeCount) {\n                        return closestElement(selection.anchorNode, 'P, DIV');\n                    }\n                },\n                preHistoryUndo: () => {},\n                beforeAnyCommand: () => {},\n                isHintBlacklisted: () => false,\n                filterMutationRecords: (records) => records,\n                /**\n                 * In case an external asynchronous post processing has to be\n                 * applied on some nodes after an external step (i.e. render\n                 * an OWL Component), the owner of the post-processing will\n                 * return a Promise through this hook resolved when it is done.\n                 * Further collaborative external steps will be buffered as\n                 * long as that promise is not resolved, to avoid a situation\n                 * where the editor tries to apply mutations inside a node that\n                 * is currently being rendered (not ready).\n                 *\n                 * @param {Element} editable\n                 * @returns {Promise|null} Promise that will be resolved when\n                 *          the rendering is done, or null if there is no\n                 *          rendering to do. The editor will buffer new external\n                 *          steps (collaborative) until the promise is resolved.\n                 */\n                postProcessExternalSteps: () => null,\n                onPostSanitize: () => {},\n                direction: 'ltr',\n                _t: string => string,\n                allowCommandVideo: true,\n                renderingClasses: [],\n                allowInlineAtRoot: false,\n                useResponsiveFontSizes: true,\n                showResponsiveFontSizesBadges: false,\n                showExtendedTextStylesOptions: false,\n                autoActivateContentEditable: true,\n                // TODO probably move `getCSSVariableValue` and\n                // `convertNumericToUnit` as odoo-editor utils to avoid this\n                getCSSVariableValue: () => null,\n                convertNumericToUnit: x => x,\n            },\n            options,\n        );\n\n        // --------------\n        // Set properties\n        // --------------\n\n        this.document = options.document || document;\n        this.isDestroyed = false;\n\n        this.isMobile = matchMedia('(max-width: 767px)').matches;\n        this.isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\n        this.isPrepareUpdateLocked = false;\n\n        // Keyboard type detection, happens only at the first keydown event.\n        this.keyboardType = KEYBOARD_TYPES.UNKNOWN;\n\n        // Wether we should check for unbreakable the next history step.\n        this._checkStepUnbreakable = true;\n\n        // All dom listeners currently active.\n        this._domListeners = [];\n\n        // Set of labels that which prevent the automatic step mechanism if\n        // it contains at least one element.\n        this._observerTimeoutUnactive = new Set();\n        // Set of labels that which prevent the observer to be active if\n        // it contains at least one element.\n        this._observerUnactiveLabels = new Set();\n\n        // The state of the dom.\n        this._currentMouseState = 'mouseup';\n\n        this._onKeyupResetContenteditableNodes = [];\n\n        // Track if we need to rollback mutations in case unbreakable or unremovable are being added or removed.\n        this._toRollback = false;\n\n        // Map that from an node id to the dom node.\n        this._idToNodeMap = new Map();\n\n        // Instanciate plugins.\n        this._plugins = [];\n        for (const plugin of this.options.plugins) {\n            this._pluginAdd(plugin);\n        }\n\n        // -------------------\n        // Alter the editable\n        // -------------------\n\n        if (editable.innerHTML.trim() === '') {\n            editable.innerHTML = '<p><br></p>';\n        }\n        this.initElementForEdition(editable);\n\n        // Convention: root node is ID root.\n        editable.oid = 'root';\n        this._idToNodeMap.set(1, editable);\n        this.editable = editable;\n        this.editable.classList.add(\"odoo-editor-editable\");\n        if (this.options.toSanitize) {\n            sanitize(editable);\n            this.options.onPostSanitize(editable);\n        }\n        this.editable.setAttribute('dir', this.options.direction);\n\n        // Set contenteditable before clone as FF updates the content at this point.\n        this.canActivateContentEditable = this.options.autoActivateContentEditable;\n        if (this.canActivateContentEditable) {\n            this._activateContenteditable();\n        }\n        this._collabClientId = this.options.collaborationClientId;\n        this._collabClientAvatarUrl = this.options.collaborationClientAvatarUrl;\n\n        // Collaborator selection and caret display.\n        this._collabSelectionInfos = new Map();\n        this._collabSelectionColor = `hsl(${(Math.random() * 360).toFixed(0)}, 75%, 50%)`;\n        this._avatarsOverlaps = {}\n\n        // This main container is used to contain a tree of sub containers.\n        // By having one parent that contains a tree of containers, it is easy\n        // to change the z-index of any container by changing their place in the\n        // tree rather than tweaking a z-index number.\n        this.mainAbsoluteContainer = this.document.createElement('div');\n        this.mainAbsoluteContainer.classList.add('oe-absolute-container');\n        this.editable.before(this.mainAbsoluteContainer);\n\n        // This container contains the users selections.\n        this._selectionsContainer = this.makeAbsoluteContainer('oe-selections-container');\n        // This container contains the users avatars.\n        this._avatarsContainer = this.makeAbsoluteContainer('oe-avatars-container');\n        // This container contains the users counter that overlap the users avatars.\n        this._avatarsCountersContainer = this.makeAbsoluteContainer('oe-avatars-counters-container');\n\n        // Promise for extra rendering, collaborative external steps will be\n        // buffered (delayed) until it is resolved.\n        this._postProcessExternalStepsPromise = null;\n        this._externalStepsBuffer = [];\n\n        this.idSet(editable);\n        this._historyStepsActive = true;\n        this.historyReset();\n        if (this.options.initialHistoryId) {\n            this.historySetInitialId(this.options.initialHistoryId);\n        }\n\n        this._pluginCall('start', [editable]);\n        this._pluginCall('sanitizeElement', [editable]);\n\n        // ------\n        // Tables\n        // ------\n\n        // Create the table picker for the Powerbox.\n        this.powerboxTablePicker = new TablePicker({\n            document: this.document,\n            floating: true,\n            getContextFromParentRect: this.options.getContextFromParentRect,\n            direction: this.options.direction,\n        });\n        document.body.appendChild(this.powerboxTablePicker.el);\n        this.powerboxTablePicker.addEventListener('cell-selected', ev => {\n            this.execCommand('insertTable', {\n                rowNumber: ev.detail.rowNumber,\n                colNumber: ev.detail.colNumber,\n            });\n        });\n        // Create the table UI.\n        this._tableUiContainer = this.document.createElement('div');\n        this._tableUiContainer.classList.add('o_table_ui_container');\n        const parser = new DOMParser();\n        const isRTL = this.options.direction === \"rtl\";\n        for (const direction of ['row', 'column']) {\n            // Create the containers and the menu toggler.\n            const iconClass = (direction === 'row') ? 'fa-ellipsis-v' : 'fa-ellipsis-h';\n            const ui = parser.parseFromString(`<div class=\"o_table_ui o_${direction}_ui\" style=\"visibility: hidden;\">\n                <div>\n                    <span class=\"o_table_ui_menu_toggler fa ${iconClass}\"></span>\n                    <div class=\"o_table_ui_menu\"></div>\n                </div>\n            </div>`, 'text/html').body.firstElementChild;\n            const uiMenu = ui.querySelector('.o_table_ui_menu');\n            // Create the move buttons.\n            if (direction === 'column') {\n                if (isRTL) {\n                    uiMenu.append(...parser.parseFromString(`\n                        <div class=\"o_move_right\"><span class=\"fa fa-chevron-right\"></span>` + this.options._t('Move left') + `</div>\n                        <div class=\"o_move_left\"><span class=\"fa fa-chevron-left\"></span>` + this.options._t('Move right') + `</div>\n                    `, 'text/html').body.children);\n                } else {\n                    uiMenu.append(...parser.parseFromString(`\n                        <div class=\"o_move_left\"><span class=\"fa fa-chevron-left\"></span>` + this.options._t('Move left') + `</div>\n                        <div class=\"o_move_right\"><span class=\"fa fa-chevron-right\"></span>` + this.options._t('Move right') + `</div>\n                    `, 'text/html').body.children);\n                }\n                this.addDomListener(uiMenu.querySelector('.o_move_left'), 'click', this._onTableMoveLeftClick);\n                this.addDomListener(uiMenu.querySelector('.o_move_right'), 'click', this._onTableMoveRightClick);\n            } else {\n                uiMenu.append(...parser.parseFromString(`\n                    <div class=\"o_move_up\"><span class=\"fa fa-chevron-left\" style=\"transform: rotate(90deg);\"></span>` + this.options._t('Move up') + `</div>\n                    <div class=\"o_move_down\"><span class=\"fa fa-chevron-right\" style=\"transform: rotate(90deg);\"></span>` + this.options._t('Move down') + `</div>\n                `, 'text/html').body.children);\n                this.addDomListener(uiMenu.querySelector('.o_move_up'), 'click', this._onTableMoveUpClick);\n                this.addDomListener(uiMenu.querySelector('.o_move_down'), 'click', this._onTableMoveDownClick);\n            }\n\n            // Create the add buttons.\n            if (direction === 'column') {\n                if (isRTL) {\n                    uiMenu.append(...parser.parseFromString(`\n                        <div class=\"o_insert_right\"><span class=\"fa fa-plus\"></span>` + this.options._t('Insert left') + `</div>\n                        <div class=\"o_insert_left\"><span class=\"fa fa-plus\"></span>` + this.options._t('Insert right') + `</div>\n                    `, 'text/html').body.children);\n                } else {\n                    uiMenu.append(...parser.parseFromString(`\n                        <div class=\"o_insert_left\"><span class=\"fa fa-plus\"></span>` + this.options._t('Insert left') + `</div>\n                        <div class=\"o_insert_right\"><span class=\"fa fa-plus\"></span>` + this.options._t('Insert right') + `</div>\n                    `, 'text/html').body.children);\n                }\n                this.addDomListener(uiMenu.querySelector('.o_insert_left'), 'click', () => this.execCommand('addColumn', 'before', this._columnUiTarget));\n                this.addDomListener(uiMenu.querySelector('.o_insert_right'), 'click', () => this.execCommand('addColumn', 'after', this._columnUiTarget));\n            } else {\n                uiMenu.append(...parser.parseFromString(`\n                    <div class=\"o_insert_above\"><span class=\"fa fa-plus\"></span>` + this.options._t('Insert above') + `</div>\n                    <div class=\"o_insert_below\"><span class=\"fa fa-plus\"></span>` + this.options._t('Insert below') + `</div>\n                `, 'text/html').body.children);\n                this.addDomListener(uiMenu.querySelector('.o_insert_above'), 'click', () => this.execCommand('addRow', 'before', this._rowUiTarget));\n                this.addDomListener(uiMenu.querySelector('.o_insert_below'), 'click', () => this.execCommand('addRow', 'after', this._rowUiTarget));\n            }\n\n            // Add the delete button.\n            if (direction === 'column') {\n                uiMenu.append(parser.parseFromString(`<div class=\"o_delete_column\"><span class=\"fa fa-trash\"></span>` + this.options._t('Delete') + `</div>\n                `, 'text/html').body.firstChild)\n                this.addDomListener(uiMenu.querySelector('.o_delete_column'), 'click', this._onTableDeleteColumnClick);\n            } else {\n                uiMenu.append(parser.parseFromString(`<div class=\"o_delete_row\"><span class=\"fa fa-trash\"></span>` + this.options._t('Delete') + `</div>\n                `, 'text/html').body.firstChild)\n                this.addDomListener(uiMenu.querySelector('.o_delete_row'), 'click', this._onTableDeleteRowClick);\n            }\n\n            // Reset the size of the table\n            uiMenu.append(parser.parseFromString(`<div class=\"o_reset_table_size\"><span class=\"fa fa-table\"></span>` + this.options._t('Reset Size') + `</div>\n                `, 'text/html').body.firstChild)\n            this.addDomListener(uiMenu.querySelector('.o_reset_table_size'), 'click', () => this.execCommand('resetSize', this._tableUiTarget));\n\n            this[`_${direction}Ui`] = ui;\n            this._tableUiContainer.append(ui);\n            this.addDomListener(ui.querySelector('.o_table_ui_menu_toggler'), 'click', this._onTableMenuTogglerClick);\n            this.editable.before(this._tableUiContainer);\n        }\n\n        // --------\n        // Powerbox\n        // --------\n\n        this.powerbox = new Powerbox({\n            editable: this.editable,\n            getContextFromParentRect: this.options.getContextFromParentRect,\n            commandFilters: this.options.powerboxFilters,\n            onShow: () => {\n                this.powerboxTablePicker.hide();\n            },\n            beforeCommand: () => {\n                if (this._isPowerboxOpenOnInput) {\n                    this.historyRevertUntil(this._powerboxBeforeStepIndex);\n                    this.historyStep(true);\n                    this._historyStepsStates.set(peek(this._historySteps).id, 'consumed');\n                    ensureFocus(this.editable);\n                    getDeepRange(this.editable, { select: true });\n                }\n            },\n            afterCommand: () => {\n                this.historyStep(true);\n                this._isPowerboxOpenOnInput = false;\n            },\n            categories: [\n                { name: this.options._t('Structure'), priority: 70 },\n                { name: this.options._t('Format'), priority: 60 },\n                { name: this.options._t('Widgets'), priority: 30 },\n                ...(this.options.categories || []),\n            ],\n            commands: [\n                {\n                    category: this.options._t('Structure'),\n                    name: this.options._t('Bulleted list'),\n                    priority: 110,\n                    description: this.options._t('Create a simple bulleted list'),\n                    fontawesome: 'fa-list-ul',\n                    isDisabled: () => !this.isSelectionInBlockRoot(),\n                    callback: () => {\n                        this.execCommand('toggleList', 'UL');\n                    },\n                },\n                {\n                    category: this.options._t('Structure'),\n                    name: this.options._t('Numbered list'),\n                    priority: 100,\n                    description: this.options._t('Create a list with numbering'),\n                    fontawesome: 'fa-list-ol',\n                    isDisabled: () => !this.isSelectionInBlockRoot(),\n                    callback: () => {\n                        this.execCommand('toggleList', 'OL');\n                    },\n                },\n                {\n                    category: this.options._t('Structure'),\n                    name: this.options._t('Checklist'),\n                    priority: 90,\n                    description: this.options._t('Track tasks with a checklist'),\n                    fontawesome: 'fa-check-square-o',\n                    isDisabled: () => !this.isSelectionInBlockRoot(),\n                    callback: () => {\n                        this.execCommand('toggleList', 'CL');\n                    },\n                },\n                {\n                    category: this.options._t('Structure'),\n                    name: this.options._t('Table'),\n                    priority: 80,\n                    description: this.options._t('Insert a table'),\n                    fontawesome: 'fa-table',\n                    isDisabled: () => !this.isSelectionInBlockRoot(),\n                    callback: () => {\n                        if(this.isMobile){\n                            this.execCommand('insertTable', {\n                                rowNumber: this.powerboxTablePicker.rowNumber,\n                                colNumber: this.powerboxTablePicker.colNumber,\n                            });\n                        } else {\n                            this.powerboxTablePicker.show();\n                        }\n                    },\n                },\n                {\n                    category: this.options._t('Format'),\n                    name: this.options._t('Heading 1'),\n                    priority: 50,\n                    description: this.options._t('Big section heading'),\n                    fontawesome: 'fa-header',\n                    isDisabled: () => !this.isSelectionInBlockRoot(),\n                    callback: () => {\n                        this.execCommand('setTag', 'H1');\n                    },\n                },\n                {\n                    category: this.options._t('Format'),\n                    name: this.options._t('Heading 2'),\n                    priority: 40,\n                    description: this.options._t('Medium section heading'),\n                    fontawesome: 'fa-header',\n                    isDisabled: () => !this.isSelectionInBlockRoot(),\n                    callback: () => {\n                        this.execCommand('setTag', 'H2');\n                    },\n                },\n                {\n                    category: this.options._t('Format'),\n                    name: this.options._t('Heading 3'),\n                    priority: 30,\n                    description: this.options._t('Small section heading'),\n                    fontawesome: 'fa-header',\n                    isDisabled: () => !this.isSelectionInBlockRoot(),\n                    callback: () => {\n                        this.execCommand('setTag', 'H3');\n                    },\n                },\n                {\n                    category: this.options._t('Format'),\n                    name: this.options._t('Switch direction'),\n                    priority: 20,\n                    description: this.options._t('Switch the text\\'s direction'),\n                    fontawesome: 'fa-exchange',\n                    callback: () => {\n                        this.execCommand('switchDirection');\n                    },\n                },\n                {\n                    category: this.options._t('Format'),\n                    name: this.options._t('Text'),\n                    priority: 10,\n                    description: this.options._t('Paragraph block'),\n                    fontawesome: 'fa-paragraph',\n                    isDisabled: () => !this.isSelectionInBlockRoot(),\n                    callback: () => {\n                        this.execCommand('setTag', 'P');\n                    },\n                },\n                {\n                    category: this.options._t('Widgets'),\n                    name: this.options._t('3 Stars'),\n                    priority: 20,\n                    description: this.options._t('Insert a rating over 3 stars'),\n                    fontawesome: 'fa-star-o',\n                    callback: () => {\n                        let html = '\\u200B<span contenteditable=\"false\" class=\"o_stars o_three_stars\">';\n                        html += Array(3).fill().map(() => '<i class=\"fa fa-star-o\"></i>').join('');\n                        html += '</span>\\u200B';\n                        this.execCommand('insert', parseHTML(this.document, html));\n                    },\n                },\n                {\n                    category: this.options._t('Widgets'),\n                    name: this.options._t('5 Stars'),\n                    priority: 10,\n                    description: this.options._t('Insert a rating over 5 stars'),\n                    fontawesome: 'fa-star',\n                    callback: () => {\n                        let html = '\\u200B<span contenteditable=\"false\" class=\"o_stars o_five_stars\">';\n                        html += Array(5).fill().map(() => '<i class=\"fa fa-star-o\"></i>').join('');\n                        html += '</span>\\u200B';\n                        this.execCommand('insert', parseHTML(this.document, html));\n                    },\n                },\n                ...(this.options.commands || []),\n                ...(!this.options.commands || !this.options.commands.find(c =>  c.name === this.options._t('Separator')) ? [\n                    {\n                        category: this.options._t('Structure'),\n                        name: this.options._t('Separator'),\n                        priority: 40,\n                        description: this.options._t('Insert a horizontal rule separator'),\n                        fontawesome: 'fa-minus',\n                        isDisabled: () => !this.isSelectionInBlockRoot(),\n                        callback: () => {\n                            this.execCommand('insertHorizontalRule');\n                        },\n                    }] : []),\n            ],\n        });\n\n        // -----------\n        // Bind events\n        // -----------\n\n        this.observerActive();\n\n        this.addDomListener(this.editable, 'keydown', this._onKeyDown);\n        this.addDomListener(this.editable, 'input', this._onInput);\n        this.addDomListener(this.editable, 'beforeinput', this._onBeforeInput);\n        this.addDomListener(this.editable, 'mousedown', this._onMouseDown);\n        this.addDomListener(this.editable, 'mouseup', this._onMouseup);\n        this.addDomListener(this.editable, 'mousemove', this._onMousemove);\n        this.addDomListener(this.editable, 'mouseleave', this._onMouseLeave);\n        this.addDomListener(this.editable, 'paste', this._onPaste);\n        this.addDomListener(this.editable, 'dragstart', this._onDragStart);\n        this.addDomListener(this.editable, 'drop', this._onDrop);\n        this.addDomListener(this.editable, 'copy', this._onClipboardCopy);\n        this.addDomListener(this.editable, 'cut', this._onClipboardCut);\n\n        this.addDomListener(this.document, 'selectionchange', this._onSelectionChange);\n        this.addDomListener(this.document, 'selectionchange', this._handleCommandHint);\n        this.addDomListener(this.document, 'keydown', this._onDocumentKeydown);\n        this.addDomListener(this.document, 'keyup', this._onDocumentKeyup);\n        this.addDomListener(this.document, 'mouseup', this._onDocumentMouseup);\n        this.addDomListener(this.document, 'click', this._onDocumentClick);\n        this.addDomListener(this.document, 'scroll', this._onScroll, true);\n\n        this.multiselectionRefresh = this.multiselectionRefresh.bind(this);\n        this._resizeObserver = new ResizeObserver(this.multiselectionRefresh);\n        this._resizeObserver.observe(this.document.body);\n        this._resizeObserver.observe(this.editable);\n        this.addDomListener(this.editable, 'scroll', this.multiselectionRefresh);\n\n        if (this._collabClientId) {\n            this._snapshotInterval = setInterval(() => {\n                this._historyMakeSnapshot();\n            }, HISTORY_SNAPSHOT_INTERVAL);\n        }\n\n        // -------\n        // Toolbar\n        // -------\n\n        if (this.options.toolbar) {\n            this.setupToolbar(this.options.toolbar);\n        }\n        // placeholder hint\n        if (editable.textContent === '' && this.options.placeholder) {\n            this._makeHint(editable.firstChild, this.options.placeholder, true);\n        }\n    }\n    /**\n     * Releases anything that was initialized.\n     *\n     * TODO: properly implement this.\n     */\n    destroy() {\n        this.observerUnactive();\n        this._removeDomListener();\n        this.powerbox.destroy();\n        this.powerboxTablePicker.el.remove();\n        this.mainAbsoluteContainer.remove();\n        this._resizeObserver.disconnect();\n        clearInterval(this._snapshotInterval);\n        this._pluginCall('destroy', []);\n        this.isDestroyed = true;\n        // Remove table UI\n        this._rowUi.remove();\n        this._columnUi.remove();\n    }\n\n    setupToolbar(toolbar) {\n        this.toolbar = toolbar;\n        this.autohideToolbar = this.options.autohideToolbar;\n        if (!this.options.showExtendedTextStylesOptions) {\n            this.toolbar.querySelectorAll(\"[data-extended-text-style]\")\n                .forEach(el => el.classList.add(\"d-none\"));\n        }\n        this.bindExecCommand(this.toolbar);\n        // Ensure anchors in the toolbar don't trigger a hash change.\n        const toolbarAnchors = this.toolbar.querySelectorAll('a');\n        toolbarAnchors.forEach(a => a.addEventListener('click', e => e.preventDefault()));\n        for (const colorLabel of this.toolbar.querySelectorAll('label')) {\n            colorLabel.addEventListener('mousedown', ev => {\n                // Hack to prevent loss of focus (done by preventDefault) while still opening\n                // color picker dialog (which is also prevented by preventDefault on chrome,\n                // except when click detail is 2, which happens on a double-click but isn't\n                // triggered by a dblclick event)\n                if (ev.detail < 2) {\n                    ev.preventDefault();\n                    ev.currentTarget.dispatchEvent(new MouseEvent('click', { detail: 2 }));\n                }\n            });\n            colorLabel.addEventListener('input', ev => {\n                this.document.execCommand(ev.target.name, false, ev.target.value);\n                this.updateColorpickerLabels();\n            });\n        }\n        const fontSizeInput = this.toolbar.querySelector('input#fontSizeCurrentValue');\n        this.addDomListener(this.toolbar, 'click', ev => {\n            if (fontSizeInput && !fontSizeInput.readOnly && ev.target.closest('#font-size .dropdown-toggle')) {\n                // If the click opened the font size dropdown, select the input content.\n                fontSizeInput.select();\n            } else if (\n                !this.isSelectionInEditable() &&\n                ev.target.nodeName !== 'INPUT' &&\n                ev.target.id !== 'image-transform'\n            ) {\n                // Otherwise, if we lost the selection in the editable, restore it.\n                this.historyResetLatestComputedSelection(true);\n            }\n        });\n\n        const applyFontSizeREM = pxStrValue => {\n            const pxValue = parseFloat(pxStrValue);\n            const remValue = this.options.convertNumericToUnit(pxValue, \"px\", \"rem\");\n            this.execCommand(\"setFontSize\", `${remValue}rem`);\n        };\n\n        // Handle the font size input.\n        if (fontSizeInput) {\n            const debouncedOnInputChange = (() => {\n                let handle;\n                return () => new Promise(resolve => {\n                    clearTimeout(handle);\n                    handle = setTimeout(() => {\n                        handle = null;\n                        const fontSize = parseInt(fontSizeInput.value);\n                        if (fontSize > 0) {\n                            if (!this.isSelectionInEditable()) {\n                                this.historyResetLatestComputedSelection(true);\n                            }\n                            applyFontSizeREM(fontSize);\n                            fontSizeInput.blur();\n                        }\n                        resolve();\n                    }, 50);\n                });\n            })();\n            this.addDomListener(fontSizeInput, 'change', debouncedOnInputChange);\n        }\n\n        // Handle the font size dropdown.\n        const fontSizeDropdown = this.toolbar.querySelector('#font-size');\n        if (fontSizeDropdown) {\n            this.computeFontSizeSelectorValues(fontSizeDropdown);\n\n            const applyFontSizeChoice = optionEl => {\n                if (!this.isSelectionInEditable()) {\n                    this.historyResetLatestComputedSelection(true);\n                }\n                if (this.options.useResponsiveFontSizes) {\n                    const fontSizeClassName = optionEl.dataset.applyClass;\n                    this.execCommand(\"setFontSize\", undefined);\n                    this.execCommand(\"setFontSizeClassName\", fontSizeClassName);\n                } else {\n                    applyFontSizeREM(optionEl.dataset.value);\n                }\n            };\n            fontSizeDropdown.querySelectorAll('.dropdown-item').forEach(item => {\n                this.addDomListener(item, 'mousedown', ev => {\n                    applyFontSizeChoice(ev.currentTarget);\n                });\n                this.addDomListener(item, 'keydown', ev => {\n                    if (ev.key !== 'Enter') {\n                        return;\n                    }\n                    applyFontSizeChoice(ev.currentTarget);\n                });\n            });\n        }\n\n        this._updateToolbar();\n    }\n\n    /**\n     * Sets the px value for every font size dropdown item.\n     */\n    computeFontSizeSelectorValues(fontSizeDropdownEl) {\n        fontSizeDropdownEl = fontSizeDropdownEl || this.toolbar.querySelector(\"#font-size\");\n\n        let previousItem = null;\n        let previousValue = -1;\n        const style = this.document.defaultView.getComputedStyle(this.document.body);\n        for (const itemEl of fontSizeDropdownEl.querySelectorAll(\"[data-dynamic-value]\")) {\n            const variableName = itemEl.dataset.dynamicValue;\n            const strValue = this.options.getCSSVariableValue(variableName, style);\n            const remValue = parseFloat(strValue);\n            const pxValue = this.options.convertNumericToUnit(remValue, \"rem\", \"px\");\n            // Change the text node value only to preserve the badge element\n            const roundedValue = Math.round(pxValue);\n            itemEl.dataset.value = roundedValue;\n            itemEl.firstChild.textContent = roundedValue;\n\n            // If same value as the previous one, hide the previous one\n            if (previousItem) {\n                previousItem.parentElement.classList.toggle('d-none', Math.abs(pxValue - previousValue) < 0.001);\n            }\n            previousItem = itemEl;\n            previousValue = pxValue;\n        }\n\n        for (const badgeEl of fontSizeDropdownEl.querySelectorAll(\".o_we_font_size_badge\")) {\n            badgeEl.classList.toggle(\"d-none\", !this.options.showResponsiveFontSizesBadges);\n        }\n    }\n\n    resetContent(value) {\n        value = value || '<p><br></p>';\n        this.editable.innerHTML = value;\n        this.sanitize(this.editable);\n        this.historyStep(true);\n        // The unbreakable protection mechanism detects an anomaly and attempts\n        // to trigger a rollback when the content is reset using `innerHTML`.\n        // Prevent this rollback as it would otherwise revert the new content.\n        this._toRollback = false;\n        // Placeholder hint.\n        if (this.editable.textContent === '' && this.options.placeholder) {\n            this._makeHint(this.editable.firstChild, this.options.placeholder, true);\n        }\n        this.multiselectionRefresh();\n    }\n\n    sanitize(target) {\n        this.observerFlush();\n        let record;\n        if (!target) {\n            // If the target is not given,\n            // find the closest common ancestor to all the nodes referenced\n            // in the mutations from the last step.\n            for (record of this._currentStep.mutations) {\n                const node = this.idFind(record.parentId || record.id) || this.editable;\n                if (!this.editable.contains(node)) {\n                    continue;\n                }\n                target = target\n                    ? commonParentGet(target, node, this.editable)\n                    : node;\n            }\n        }\n        if (!target) {\n            return false;\n        }\n\n        // If the common ancestor is in a nested list, make sure to sanitize\n        // that list's parent <li> instead, so there is enough context to\n        // potentially merge sibling nested lists\n        // (eg, <ol>\n        //          <li class=\"oe-nested\"><ul>...</ul></li>\n        //          <li class=\"oe-nested\"><ul>...</ul></li>\n        //      </ol>: these two lists should be merged together so the common\n        // ancestor should be the <ol> element).\n        const nestedListAncestor = closestElement(target, '.oe-nested');\n        if (nestedListAncestor && nestedListAncestor.parentElement) {\n            target = nestedListAncestor.parentElement;\n        }\n\n        // sanitize and mark current position as sanitized\n        sanitize(target, this.editable);\n        this._resetLinkInSelection();\n        this._pluginCall('sanitizeElement',\n                         [target.parentElement || target]);\n        this.options.onPostSanitize(target);\n    }\n\n    addDomListener(element, eventName, callback, useCapture) {\n        const boundCallback = callback.bind(this);\n        this._domListeners.push([element, eventName, boundCallback]);\n        element.addEventListener(eventName, boundCallback, useCapture);\n    }\n\n    /**\n     * Make an absolute container to organise floating elements inside it's own\n     * box and z-index isolation.\n     *\n     * @param {string} containerId An id to add to the container in order to make\n     *              the container more visible in the devtool and potentially\n     *              add css rules for the container and it's children.\n     */\n    makeAbsoluteContainer(containerId) {\n        const container = this.document.createElement('div');\n        container.className = `oe-absolute-container`;\n        container.setAttribute('data-oe-absolute-container-id', containerId);\n        this.mainAbsoluteContainer.append(container);\n        return container;\n    }\n\n    _generateId() {\n        // No need for secure random number.\n        return Math.floor(Math.random() * Math.pow(2,52)).toString();\n    }\n\n    // Assign IDs to src, and dest if defined\n    idSet(node, testunbreak = false) {\n        if (!node.oid) {\n            node.oid = this._generateId();\n        }\n        // In case the id was created by another collaboration client.\n        this._idToNodeMap.set(node.oid, node);\n        // Rollback if node.ouid changed. This ensures that nodes never change\n        // unbreakable ancestors.\n        node.ouid = node.ouid || getOuid(node, true);\n        if (testunbreak && !(node.nodeType === Node.TEXT_NODE && !node.length)) {\n            const ouid = getOuid(node);\n            if (!this._toRollback && ouid && ouid !== node.ouid) {\n                this._toRollback = UNBREAKABLE_ROLLBACK_CODE;\n            }\n        }\n\n        let childNode = node.firstChild;\n        while (childNode) {\n            this.idSet(childNode, testunbreak);\n            childNode = childNode.nextSibling;\n        }\n    }\n\n    idFind(id) {\n        return this._idToNodeMap.get(id);\n    }\n\n    serializeNode(node, mutatedNodes) {\n        return this._collabClientId ? serializeNode(node, mutatedNodes) : node;\n    }\n\n    unserializeNode(node) {\n        return this._collabClientId ? unserializeNode(node) : node;\n    }\n\n    automaticStepActive(label) {\n        this._observerTimeoutUnactive.delete(label);\n    }\n    automaticStepUnactive(label) {\n        this._observerTimeoutUnactive.add(label);\n    }\n    automaticStepSkipStack() {\n        this.automaticStepUnactive('skipStack');\n        setTimeout(() => this.automaticStepActive('skipStack'));\n    }\n    observerUnactive(label) {\n        this._observerUnactiveLabels.add(label);\n        if (this.observer) {\n            clearTimeout(this.observerTimeout);\n            this.observerFlush();\n            this.dispatchEvent(new Event('observerUnactive'));\n            this.observer.disconnect();\n        }\n    }\n    observerFlush() {\n        const records = this.observer.takeRecords();\n        this.observerIdSet(records);\n        this.observerApply(this.filterMutationRecords(records));\n    }\n    observerActive(label) {\n        this._observerUnactiveLabels.delete(label);\n        if (this._observerUnactiveLabels.size !== 0) return;\n\n        if (!this.observer) {\n            this.observer = new MutationObserver(records => {\n                this.observerIdSet(records);\n                records = this.filterMutationRecords(records);\n                if (!records.length) return;\n                this.dispatchEvent(new Event('contentChanged'));\n                clearTimeout(this.observerTimeout);\n                if (this._observerTimeoutUnactive.size === 0) {\n                    this.observerTimeout = setTimeout(() => {\n                        this.historyStep();\n                    }, 100);\n                }\n                this.observerApply(records);\n            });\n        }\n        this.dispatchEvent(new Event('preObserverActive'));\n        this.observer.observe(this.editable, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            attributeOldValue: true,\n            characterData: true,\n            characterDataOldValue: true,\n        });\n        this.dispatchEvent(new Event('observerActive'));\n    }\n\n    observerIdSet(records) {\n        for (const record of records) {\n            if (record.type === 'childList') {\n                this.idSet(record.target);\n            }\n        }\n    }\n\n    observerApply(records) {\n        // There is a case where node A is added and node B is a descendant of\n        // node A where node B was not in the observed tree) then node B is\n        // added into another node. In that case, we need to keep track of node\n        // B so when serializing node A, we strip node B from the node A tree to\n        // avoid the duplication of node A.\n        const mutatedNodes = new Set();\n        for (const record of records) {\n            if (record.type === 'childList') {\n                for (const node of record.addedNodes) {\n                    this.idSet(node, this._checkStepUnbreakable);\n                    mutatedNodes.add(node.oid);\n                }\n                for (const node of record.removedNodes) {\n                    this.idSet(node, this._checkStepUnbreakable);\n                    mutatedNodes.delete(node.oid);\n                }\n            }\n        }\n        for (const record of records) {\n            switch (record.type) {\n                case 'characterData': {\n                    this._currentStep.mutations.push({\n                        'type': 'characterData',\n                        'id': record.target.oid,\n                        'text': record.target.textContent,\n                        'oldValue': record.oldValue,\n                    });\n                    break;\n                }\n                case 'attributes': {\n                    this._currentStep.mutations.push({\n                        'type': 'attributes',\n                        'id': record.target.oid,\n                        'attributeName': record.attributeName,\n                        'value': record.target.getAttribute(record.attributeName),\n                        'oldValue': record.oldValue,\n                    });\n                    break;\n                }\n                case 'childList': {\n                    record.addedNodes.forEach(added => {\n                        if (!this._toRollback && containsUnremovable(added)) {\n                            this._toRollback = UNREMOVABLE_ROLLBACK_CODE;\n                        }\n                        const mutation = {\n                            'type': 'add',\n                        };\n                        if (!record.nextSibling && record.target.oid) {\n                            mutation.append = record.target.oid;\n                        } else if (record.nextSibling && record.nextSibling.oid) {\n                            mutation.before = record.nextSibling.oid;\n                        } else if (!record.previousSibling && record.target.oid) {\n                            mutation.prepend = record.target.oid;\n                        } else if (record.previousSibling && record.previousSibling.oid) {\n                            mutation.after = record.previousSibling.oid;\n                        } else {\n                            return false;\n                        }\n                        mutation.id = added.oid;\n                        mutation.node = this.serializeNode(added, mutatedNodes);\n                        this._currentStep.mutations.push(mutation);\n                    });\n                    record.removedNodes.forEach(removed => {\n                        if (!this._toRollback && containsUnremovable(removed)) {\n                            this._toRollback = UNREMOVABLE_ROLLBACK_CODE;\n                        }\n                        this._currentStep.mutations.push({\n                            'type': 'remove',\n                            'id': removed.oid,\n                            'parentId': record.target.oid,\n                            'node': this.serializeNode(removed),\n                            'nextId': record.nextSibling ? record.nextSibling.oid : undefined,\n                            'previousId': record.previousSibling\n                                ? record.previousSibling.oid\n                                : undefined,\n                        });\n                    });\n                    break;\n                }\n            }\n        }\n        if (records.length) {\n            this.dispatchEvent(new Event('observerApply'));\n        }\n    }\n    filterMutationRecords(records) {\n        // Save the first attribute in a cache to compare only the first\n        // attribute record of node to its latest state.\n        const attributeCache = new Map();\n        const filteredRecords = [];\n\n        for (const record of records) {\n            if (record.type === 'attributes') {\n                // Skip the attributes change on the dom.\n                if (record.target === this.editable) continue;\n                if (record.attributeName === 'contenteditable') {\n                    continue;\n                }\n\n                attributeCache.set(record.target, attributeCache.get(record.target) || {});\n                if (record.attributeName === 'class') {\n                    const classBefore = (record.oldValue && record.oldValue.split(' ')) || [];\n                    const classAfter = (record.target.className && record.target.className.split && record.target.className.split(' ')) || [];\n                    const excludedClasses = [];\n                    for (const klass of classBefore) {\n                        if (!classAfter.includes(klass)) {\n                            excludedClasses.push(klass);\n                        }\n                    }\n                    for (const klass of classAfter) {\n                        if (!classBefore.includes(klass)) {\n                            excludedClasses.push(klass);\n                        }\n                    }\n                    if (excludedClasses.length && excludedClasses.every(c => this.options.renderingClasses.includes(c))) {\n                        continue;\n                    }\n                }\n                if (\n                    typeof attributeCache.get(record.target)[record.attributeName] === 'undefined'\n                ) {\n                    const oldValue = record.oldValue === undefined ? null : record.oldValue;\n                    attributeCache.get(record.target)[record.attributeName] =\n                        oldValue !== record.target.getAttribute(record.attributeName);\n                }\n                if (!attributeCache.get(record.target)[record.attributeName]) {\n                    continue;\n                }\n            }\n            const closestProtectedCandidate = closestElement(record.target, '[data-oe-protected]');\n            if (closestProtectedCandidate) {\n                const protectedValue = closestProtectedCandidate.dataset.oeProtected;\n                switch (protectedValue) {\n                    case \"true\":\n                    case \"\":\n                        if (\n                            record.type !== \"attributes\" ||\n                            record.target !== closestProtectedCandidate ||\n                            isProtected(closestProtectedCandidate.parentElement)\n                        ) {\n                            continue;\n                        }\n                        break;\n                    case \"false\":\n                        if (\n                            record.type === \"attributes\" &&\n                            record.target === closestProtectedCandidate &&\n                            isProtected(closestProtectedCandidate.parentElement)\n                        ) {\n                            continue;\n                        }\n                        break;\n                }\n            }\n            filteredRecords.push(record);\n        }\n        return this.options.filterMutationRecords(filteredRecords);\n    }\n\n    // History\n    // -------------------------------------------------------------------------\n\n    historyReset() {\n        this._historyClean();\n        const firstStep = this._historyGetSnapshotStep();\n        this._firstStepId = firstStep.id;\n        this._historySnapshots = [{ step: firstStep }];\n        this._historySteps.push(firstStep);\n        // The historyIds carry the ids of the steps that were dropped when\n        // doing a snapshot.\n        // Those historyIds are used to compare if the last step saved in the\n        // server is present in the current historySteps or historyIds to\n        // ensure it is the same history branch.\n        this._historyIds = [];\n    }\n    /**\n     * Set the initial document history id.\n     *\n     * To prevent a saving a document with a diverging history, we store the\n     * last history id in the first node of the document to the database.\n     * This method provide the initial document history id to the editor.\n     */\n    historySetInitialId(id) {\n        this._historyIds.unshift(id);\n    }\n    /**\n     * Get all the history ids for the current history branch.\n     *\n     * See `_historyIds` in `historyReset`.\n     */\n    historyGetBranchIds() {\n        return this._historyIds.concat(this._historySteps.map(s => s.id));\n    }\n    historyGetSnapshotSteps() {\n        // If the current snapshot has no time, it means that there is the no\n        // other snapshot that have been made (either it is the one created upon\n        // initialization or reseted by historyResetFromSteps).\n        if (!this._historySnapshots[0].time) {\n            return { steps: this._historySteps, historyIds: this.historyGetBranchIds() };\n        }\n        const steps = [];\n        let snapshot;\n        if (this._historySnapshots[0].time + HISTORY_SNAPSHOT_BUFFER_TIME < Date.now()) {\n            snapshot = this._historySnapshots[0];\n        } else {\n            // this._historySnapshots[1] has being created at least 1 minute ago\n            // (HISTORY_SNAPSHOT_INTERVAL) or it is the first step.\n            snapshot = this._historySnapshots[1];\n        }\n        let index = this._historySteps.length - 1;\n        while (this._historySteps[index].id !== snapshot.step.id) {\n            steps.push(this._historySteps[index]);\n            index--;\n        }\n        steps.push(snapshot.step);\n        steps.reverse();\n\n        return { steps, historyIds: this.historyGetBranchIds() };\n    }\n    historyResetFromSteps(steps, historyIds) {\n        this._historyIds = historyIds;\n        this.observerUnactive();\n        for (const node of [...this.editable.childNodes]) {\n            node.remove();\n        }\n        this._historyClean();\n        for (const step of steps) {\n            this.historyApply(step.mutations);\n        }\n        this._historySnapshots = [{ step: steps[0] }];\n        this._historySteps = steps;\n\n        this._postProcessExternalStepsPromise = this.options.postProcessExternalSteps(this.editable);\n\n        this._handleCommandHint();\n        this.multiselectionRefresh();\n        this.observerActive();\n        this.dispatchEvent(new Event('historyResetFromSteps'));\n    }\n    historyGetSteps() {\n        return this._historySteps;\n    }\n    historyGetMissingSteps({fromStepId, toStepId}) {\n        const fromIndex = this._historySteps.findIndex(x => x.id === fromStepId);\n        const toIndex = toStepId ? this._historySteps.findIndex(x => x.id === toStepId) : this._historySteps.length;\n        if (fromIndex === -1 || toIndex === -1) {\n            return -1;\n        }\n        return this._historySteps.slice(fromIndex + 1, toIndex);\n    }\n\n    // One step completed: apply to vDOM, setup next history step\n    historyStep(skipRollback = false, { stepId } = {}) {\n        if (!this._historyStepsActive) {\n            return;\n        }\n        this.sanitize();\n        // check that not two unBreakables modified\n        if (this._toRollback) {\n            if (!skipRollback) this.historyRollback();\n            this._toRollback = false;\n        }\n\n        // push history\n        const currentStep = this._currentStep;\n        if (!currentStep.mutations.length) {\n            return false;\n        }\n\n        currentStep.id = stepId || this._generateId();\n        const previousStep = peek(this._historySteps);\n        currentStep.clientId = this._collabClientId;\n        currentStep.previousStepId = previousStep.id;\n\n        this._historySteps.push(currentStep);\n        if (this.options.onHistoryStep) {\n            this.options.onHistoryStep(currentStep);\n        }\n        this._currentStep = {\n            selection: {},\n            mutations: [],\n        };\n        this._checkStepUnbreakable = true;\n        this._recordHistorySelection();\n        this.dispatchEvent(new Event('historyStep'));\n        this.multiselectionRefresh();\n    }\n    // apply changes according to some records\n    historyApply(records) {\n        for (const record of records) {\n            if (record.type === 'characterData') {\n                const node = this.idFind(record.id);\n                if (node) {\n                    node.textContent = record.text;\n                }\n            } else if (record.type === 'attributes') {\n                const node = this.idFind(record.id);\n                if (node) {\n                    let value = record.value;\n                    if (typeof value === 'string' && record.attributeName === 'class') {\n                        value = value.split(' ').filter(c => !this.options.renderingClasses.includes(c)).join(' ');\n                    }\n                    if (this._collabClientId) {\n                        this._safeSetAttribute(node, record.attributeName, value);\n                    } else {\n                        node.setAttribute(record.attributeName, value);\n                    }\n                }\n            } else if (record.type === 'remove') {\n                const toremove = this.idFind(record.id);\n                if (toremove) {\n                    toremove.remove();\n                }\n            } else if (record.type === 'add') {\n                let node = this.idFind(record.oid) || (record.node && this.unserializeNode(record.node));\n                if (!node) {\n                    continue;\n                }\n                if (this._collabClientId) {\n                    const fakeNode = document.createElement('fake-el');\n                    fakeNode.appendChild(node);\n                    DOMPurify.sanitize(fakeNode, { IN_PLACE: true });\n                    node = fakeNode.childNodes[0];\n                    if (!node) {\n                        continue;\n                    }\n                }\n\n                this.idSet(node, true);\n\n                if (record.append && this.idFind(record.append)) {\n                    this.idFind(record.append).append(node);\n                } else if (record.before && this.idFind(record.before)) {\n                    this.idFind(record.before).before(node);\n                } else if (record.after && this.idFind(record.after)) {\n                    this.idFind(record.after).after(node);\n                } else {\n                    continue;\n                }\n            }\n        }\n    }\n    historyRollback(until = 0) {\n        const step = this._currentStep;\n        this.observerFlush();\n        this.historyRevert(step, { until });\n        this.observerFlush();\n        step.mutations = step.mutations.slice(0, until);\n        this._toRollback = false;\n    }\n    /**\n     * Undo the current non-recorded draft step.\n     */\n    historyRevertCurrentStep() {\n        this.observerFlush();\n        this.historyRevert(this._currentStep, {sideEffect: false});\n        this.observerFlush();\n        // Clear current step from all previous changes.\n        this._currentStep.mutations = [];\n\n        this._activateContenteditable();\n        this.historySetSelection(this._currentStep);\n    }\n    /**\n     * Undo a step of the history.\n     *\n     * this._historyStepsState is a map from it's location (index) in this.history to a state.\n     * The state can be on of:\n     * undefined: the position has never been undo or redo.\n     * \"redo\": The position is considered as a redo of another.\n     * \"undo\": The position is considered as a undo of another.\n     * \"consumed\": The position has been undone and is considered consumed.\n     */\n    historyUndo() {\n        this.options.preHistoryUndo();\n        // The last step is considered an uncommited draft so always revert it.\n        const lastStep = this._currentStep;\n        this.historyRevert(lastStep);\n        // Clean the last step otherwise if no other step is created after, the\n        // mutations of the revert itself will be added to the same step and\n        // grow exponentially at each undo.\n        lastStep.mutations = [];\n\n        const pos = this._getNextUndoIndex();\n        if (pos > 0) {\n            // Consider the position consumed.\n            this._historyStepsStates.set(this._historySteps[pos].id, 'consumed');\n            this.historyRevert(this._historySteps[pos]);\n            // Consider the last position of the history as an undo.\n            const stepId = this._generateId();\n            this._historyStepsStates.set(stepId, 'undo');\n            this.historyStep(true, { stepId });\n            this.dispatchEvent(new Event('historyUndo'));\n        }\n    }\n    /**\n     * Redo a step of the history.\n     *\n     * @see historyUndo\n     */\n    historyRedo() {\n        // Current step is considered an uncommitted draft, so revert it,\n        // otherwise a redo would not be possible.\n        this.historyRevert(this._currentStep);\n        // At this point, _currentStep.mutations contains the current step's\n        // mutations plus the ones that revert it, with net effect zero.\n        this._currentStep.mutations = [];\n\n        const pos = this._getNextRedoIndex();\n        if (pos > 0) {\n            this._historyStepsStates.set(this._historySteps[pos].id, 'consumed');\n            this.historyRevert(this._historySteps[pos]);\n            this.historySetSelection(this._historySteps[pos]);\n            const stepId = this._generateId();\n            this._historyStepsStates.set(stepId, 'redo');\n            this.historyStep(true, { stepId });\n            this.dispatchEvent(new Event('historyRedo'));\n        }\n    }\n    /**\n     * Check wether undoing is possible.\n     */\n    historyCanUndo() {\n        return this._getNextUndoIndex() > 0;\n    }\n    /**\n     * Check wether redoing is possible.\n     */\n    historyCanRedo() {\n        return this._getNextRedoIndex() > 0;\n    }\n    historySize() {\n        return this._historySteps.length;\n    }\n\n    historyRevert(step, { until = 0, sideEffect = true } = {} ) {\n        // apply dom changes by reverting history steps\n        for (let i = step.mutations.length - 1; i >= until; i--) {\n            const mutation = step.mutations[i];\n            if (!mutation) {\n                break;\n            }\n            switch (mutation.type) {\n                case 'characterData': {\n                    const node = this.idFind(mutation.id);\n                    if (node) node.textContent = mutation.oldValue;\n                    break;\n                }\n                case 'attributes': {\n                    const node = this.idFind(mutation.id);\n                    if (node) {\n                        if (mutation.oldValue) {\n                            let value = mutation.oldValue;\n                            if (typeof value === 'string' && mutation.attributeName === 'class') {\n                                value = value.split(' ').filter(c => !this.options.renderingClasses.includes(c)).join(' ');\n                            }\n                            if (this._collabClientId) {\n                                this._safeSetAttribute(node, mutation.attributeName, value);\n                            } else {\n                                node.setAttribute(mutation.attributeName, value);\n                            }\n                        } else {\n                            node.removeAttribute(mutation.attributeName);\n                        }\n                    }\n                    break;\n                }\n                case 'remove': {\n                    let nodeToRemove = this.idFind(mutation.id);\n                    if (!nodeToRemove) {\n                        if (!mutation.node) {\n                            continue;\n                        }\n                        nodeToRemove = this.unserializeNode(mutation.node);\n                        const fakeNode = document.createElement('fake-el');\n                        fakeNode.appendChild(nodeToRemove);\n                        DOMPurify.sanitize(fakeNode, { IN_PLACE: true });\n                        nodeToRemove = fakeNode.childNodes[0];\n                        if (!nodeToRemove) {\n                            continue;\n                        }\n                        this.idSet(nodeToRemove);\n                    }\n                    if (mutation.nextId && this.idFind(mutation.nextId)?.isConnected) {\n                        const node = this.idFind(mutation.nextId);\n                        node && node.before(nodeToRemove);\n                    } else if (mutation.previousId && this.idFind(mutation.previousId)?.isConnected) {\n                        const node = this.idFind(mutation.previousId);\n                        node && node.after(nodeToRemove);\n                    } else {\n                        const node = this.idFind(mutation.parentId);\n                        node && node.append(nodeToRemove);\n                    }\n                    break;\n                }\n                case 'add': {\n                    const node = this.idFind(mutation.id);\n                    if (node) {\n                        node.remove();\n                        node.ouid = undefined;\n                    }\n                }\n            }\n        }\n        if (sideEffect) {\n            this.historySetSelection(step);\n        }\n    }\n    /**\n     * Ensure that a callback is called without triggering a rollback.\n     *\n     * If a rollback was set before the callback, do not reset it.\n     */\n    withoutRollback(callback) {\n        const priorRollback = this._toRollback;\n        callback();\n        this.observerFlush();\n        if (!priorRollback) {\n            this._toRollback = false;\n        }\n    }\n    /**\n     * Place the selection on the last known selection position from the history\n     * steps.\n     *\n     * @param {boolean} [limitToEditable=false] When true returns the latest selection that\n     *     happened within the editable.\n     * @returns {boolean}\n     */\n    historyResetLatestComputedSelection(limitToEditable) {\n        const computedSelection = limitToEditable\n            ? this._latestComputedSelectionInEditable\n            : this._latestComputedSelection;\n        if (computedSelection && computedSelection.anchorNode) {\n            const anchorNode = this.idFind(computedSelection.anchorNode.oid);\n            const focusNode = this.idFind(computedSelection.focusNode.oid) || anchorNode;\n            if (anchorNode) {\n                setSelection(\n                    anchorNode,\n                    computedSelection.anchorOffset,\n                    focusNode,\n                    computedSelection.focusOffset,\n                );\n                return true;\n            }\n        }\n        return false;\n    }\n    historySetSelection(step) {\n        if (step.selection && step.selection.anchorNodeOid) {\n            const anchorNode = this.idFind(step.selection.anchorNodeOid);\n            const focusNode = this.idFind(step.selection.focusNodeOid) || anchorNode;\n            if (anchorNode) {\n                setSelection(\n                    anchorNode,\n                    step.selection.anchorOffset,\n                    focusNode,\n                    step.selection.focusOffset !== undefined\n                        ? step.selection.focusOffset\n                        : step.selection.anchorOffset,\n                    false,\n                );\n                // If a table must be selected, ensure it's in the same tick.\n                this._handleSelectionInTable();\n            }\n        }\n    }\n    unbreakableStepUnactive() {\n        if (this._toRollback === UNBREAKABLE_ROLLBACK_CODE) {\n            this._toRollback = false;\n        }\n        this._checkStepUnbreakable = false;\n    }\n    historyPauseSteps() {\n        this._historyStepsActive = false;\n    }\n    historyUnpauseSteps() {\n        this._historyStepsActive = true;\n    }\n    /**\n     * Stash the mutations of the current step to re-apply them later.\n     */\n    historyStash() {\n        if (!this._historyStashedMutations) {\n            this._historyStashedMutations = [];\n        }\n        this._historyStashedMutations.push(...this._currentStep.mutations);\n        this._currentStep.mutations = [];\n    }\n    /**\n     * Unstash the previously stashed mutations into the current step.\n     */\n    historyUnstash() {\n        if (!this._currentStep.mutations) {\n            this._currentStep.mutations = [];\n        }\n        this._currentStep.mutations.unshift(...this._historyStashedMutations);\n        this._historyStashedMutations = [];\n    }\n    _historyClean() {\n        this._historySteps = [];\n        this._currentStep = {\n            selection: {\n                anchorNodeOid: undefined,\n                anchorOffset: undefined,\n                focusNodeOid: undefined,\n                focusOffset: undefined,\n            },\n            mutations: [],\n            id: undefined,\n            clientId: undefined,\n        };\n        this._historyStepsStates = new Map();\n    }\n    _historyGetSnapshotStep() {\n        return {\n            selection: {\n                anchorNode: undefined,\n                anchorOffset: undefined,\n                focusNode: undefined,\n                focusOffset: undefined,\n            },\n            mutations: Array.from(this.editable.childNodes).map(node => ({\n                type: 'add',\n                append: 1,\n                id: node.oid,\n                node: this.serializeNode(node),\n            })),\n            id: this._generateId(),\n            clientId: this.clientId,\n            previousStepId: undefined,\n        };\n    }\n    _historyMakeSnapshot() {\n        if (\n            !this._lastSnapshotHistoryLength ||\n            this._lastSnapshotHistoryLength < this._historySteps.length\n        ) {\n            this._lastSnapshotHistoryLength = this._historySteps.length;\n            const step = this._historyGetSnapshotStep();\n            step.id = this._historySteps[this._historySteps.length - 1].id;\n            const snapshot = {\n                time: Date.now(),\n                step: step,\n            };\n            this._historySnapshots = [snapshot, this._historySnapshots[0]];\n        }\n    }\n    /**\n     * Insert a step from another collaborator.\n     */\n    _historyAddExternalStep(newStep) {\n        let index = this._historySteps.length - 1;\n        while (index >= 0 && this._historySteps[index].id !== newStep.previousStepId) {\n            // Skip steps that are already in the list.\n            if (this._historySteps[index].id === newStep.id) {\n                return;\n            }\n            index--;\n        }\n\n        // When the previousStepId is not present in the this._historySteps it\n        // could be either:\n        // - the previousStepId is before a snapshot of the same history\n        // - the previousStepId has not been received because clients were\n        //   disconnected at that time\n        // - the previousStepId is in another history (in case two totally\n        //   differents this._historySteps (but it should not arise)).\n        if (index < 0) {\n            if (this.options.onHistoryMissingParentSteps) {\n                const historySteps = this._historySteps;\n                let index = historySteps.length - 1;\n                // Get the last known step that we are sure the missing step\n                // client has. It could either be a step that has the same\n                // clientId or the first step.\n                while(index !== 0) {\n                    if (historySteps[index].clientId === newStep.clientId) {\n                        break;\n                    }\n                    index--;\n                }\n                const fromStepId = historySteps[index].id;\n                this.options.onHistoryMissingParentSteps({\n                    step: newStep,\n                    fromStepId: fromStepId,\n                });\n            }\n            return;\n        }\n\n        let concurentSteps = [];\n        index++;\n        while (index < this._historySteps.length) {\n            if (this._historySteps[index].previousStepId === newStep.previousStepId) {\n                if (this._historySteps[index].id.localeCompare(newStep.id) === 1) {\n                    break;\n                } else {\n                    concurentSteps = [this._historySteps[index].id];\n                }\n            } else {\n                if (concurentSteps.includes(this._historySteps[index].previousStepId)) {\n                    concurentSteps.push(this._historySteps[index].id);\n                } else {\n                    break;\n                }\n            }\n            index++;\n        }\n\n        const stepsAfterNewStep = this._historySteps.slice(index);\n\n        for (const stepToRevert of stepsAfterNewStep.slice().reverse()) {\n            this.historyRevert(stepToRevert, { sideEffect: false });\n        }\n        this.historyApply(newStep.mutations);\n        this._historySteps.splice(index, 0, newStep);\n        for (const stepToApply of stepsAfterNewStep) {\n            this.historyApply(stepToApply.mutations);\n        }\n    }\n    collaborationSetClientId(id) {\n        this._collabClientId = id;\n    }\n\n    /**\n     * Apply external steps coming from the collaboration. Buffer them if\n     * _postProcessExternalStepsPromise is not null until it is resolved (since\n     * steps could potentially concern elements currently being rendered\n     * asynchronously).\n     *\n     * @param {Object} newSteps External steps to be applied\n     */\n    onExternalHistorySteps(newSteps) {\n        if (this._postProcessExternalStepsPromise) {\n            this._externalStepsBuffer.push(...newSteps);\n        }\n        this.observerUnactive();\n        this._computeHistorySelection();\n\n        let stepIndex = 0;\n        for (const newStep of newSteps) {\n            this._historyAddExternalStep(newStep);\n            stepIndex++;\n            this._postProcessExternalStepsPromise = this.options.postProcessExternalSteps(this.editable);\n            if (this._postProcessExternalStepsPromise) {\n                this._postProcessExternalStepsPromise.then(() => {\n                    this._postProcessExternalStepsPromise = undefined;\n                    this.onExternalHistorySteps(this._externalStepsBuffer);\n                });\n                this._externalStepsBuffer = newSteps.slice(stepIndex);\n                break;\n            }\n        }\n\n        this.observerActive();\n        this.historyResetLatestComputedSelection();\n        this._handleCommandHint();\n        this.multiselectionRefresh();\n        this.dispatchEvent(new Event('onExternalHistorySteps'));\n    }\n\n    // Multi selection\n    // -------------------------------------------------------------------------\n\n    onExternalMultiselectionUpdate(selection) {\n        const { clientId } = selection;\n        const currentInfo = this._collabSelectionInfos.get(clientId);\n        if (currentInfo) {\n            currentInfo.selection = selection;\n        } else {\n            this._collabSelectionInfos.set(clientId, { selection });\n        }\n        this._drawClientSelection(selection);\n        this._drawClientAvatar(selection);\n        this._updateAvatarCounters();\n    }\n\n    multiselectionRefresh() {\n        for (const { selection } of this._collabSelectionInfos.values()) {\n            this._drawClientSelection(selection);\n            this._drawClientAvatar(selection);\n        }\n        this._updateAvatarCounters();\n    }\n\n    _drawClientSelection({ selection, color, clientId, clientName = this.options._t('Anonymous') }) {\n        this._multiselectionRemoveClient(clientId);\n        let clientRects;\n\n        let anchorNode = this.idFind(selection.anchorNodeOid);\n        let focusNode = this.idFind(selection.focusNodeOid);\n        let anchorOffset = selection.anchorOffset;\n        let focusOffset = selection.focusOffset;\n        if (!anchorNode || !focusNode) {\n            anchorNode = this.editable.children[0];\n            focusNode = this.editable.children[0];\n            anchorOffset = 0;\n            focusOffset = 0;\n        }\n\n        [anchorNode, anchorOffset] = getDeepestPosition(anchorNode, anchorOffset);\n        [focusNode, focusOffset] = getDeepestPosition(focusNode, focusOffset);\n\n        const direction = getCursorDirection(\n            anchorNode,\n            anchorOffset,\n            focusNode,\n            focusOffset,\n        );\n        const range = new Range();\n        try {\n            if (direction === DIRECTIONS.RIGHT) {\n                range.setStart(anchorNode, anchorOffset);\n                range.setEnd(focusNode, focusOffset);\n            } else {\n                range.setStart(focusNode, focusOffset);\n                range.setEnd(anchorNode, anchorOffset);\n            }\n\n            clientRects = Array.from(range.getClientRects());\n        } catch {\n            // Changes in the dom might prevent the range to be instantiated\n            // (because of a removed node for example), in which case we ignore\n            // the range.\n            clientRects = [];\n        }\n        if (!clientRects.length) {\n            return;\n        }\n\n        // Draw rects (in case the selection is not collapsed).\n        const containerRect = this._selectionsContainer.getBoundingClientRect();\n        const indicators = clientRects.map(({ x, y, width, height }) => {\n            const rectElement = this.document.createElement('div');\n            rectElement.style = `\n                position: absolute;\n                top: ${y - containerRect.y}px;\n                left: ${x - containerRect.x}px;\n                width: ${width}px;\n                height: ${height}px;\n                background-color: ${color};\n                opacity: 0.25;\n                pointer-events: none;\n            `;\n            rectElement.setAttribute('data-selection-client-id', clientId);\n            return rectElement;\n        });\n\n        // Draw carret.\n        const caretElement = this.document.createElement('div');\n        caretElement.style = `border-left: 2px solid ${color}; position: absolute;`;\n        caretElement.setAttribute('data-selection-client-id', clientId);\n        caretElement.className = 'oe-collaboration-caret';\n\n        // Draw carret top square.\n        const caretTopSquare = this.document.createElement('div');\n        caretTopSquare.className = 'oe-collaboration-caret-top-square';\n        caretTopSquare.style['background-color'] = color;\n        caretTopSquare.setAttribute('data-client-name', clientName);\n        caretElement.append(caretTopSquare);\n\n        if (direction === DIRECTIONS.LEFT) {\n            const rect = clientRects[0];\n            caretElement.style.height = `${rect.height * 1.2}px`;\n            caretElement.style.top = `${rect.y - containerRect.y}px`;\n            caretElement.style.left = `${rect.x - containerRect.x}px`;\n        } else {\n            const rect = peek(clientRects);\n            caretElement.style.height = `${rect.height * 1.2}px`;\n            caretElement.style.top = `${rect.y - containerRect.y}px`;\n            caretElement.style.left = `${rect.right - containerRect.x}px`;\n        }\n        this._selectionsContainer.append(caretElement, ...indicators);\n    }\n\n    _drawClientAvatar({ selection, clientId, clientAvatarUrl = '', clientName = this.options._t('Anonymous') }) {\n        const anchorNode = this.idFind(selection.anchorNodeOid);\n        const focusNode = this.idFind(selection.focusNodeOid);\n        if (!anchorNode || !focusNode) {\n            return;\n        }\n        const anchorBlock = closestBlock(anchorNode);\n        if (!anchorBlock) return;\n\n        const containerRect = this._avatarsContainer.getBoundingClientRect();\n\n        // Draw user avatar.\n        const selectionInfo = this._collabSelectionInfos.get(clientId) || {};\n        let avatarElement = selectionInfo.avatarElement;\n        if (!avatarElement) {\n            avatarElement = this.document.createElement('div');\n            avatarElement.className = 'oe-collaboration-caret-avatar';\n            avatarElement.style.display = 'none';\n            const image = this.document.createElement('img');\n            avatarElement.append(image);\n            image.onload = () => avatarElement.style.removeProperty('display');\n            image.setAttribute('src', clientAvatarUrl);\n            image.classList.add('o_object_fit_cover');\n        }\n        // Avoid re-appending the element in the dom.\n        if (!avatarElement.parentElement) {\n            this._avatarsContainer.append(avatarElement);\n        }\n        // Make sure data is up to date.\n        selectionInfo.avatarElement = avatarElement;\n        selectionInfo.clientName = clientName;\n        selectionInfo.avatarTargetElement = anchorBlock;\n        this._collabSelectionInfos.set(clientId, selectionInfo);\n\n        const anchorBlockRect = anchorBlock.getBoundingClientRect();\n        const top = anchorBlockRect.y - containerRect.y;\n        avatarElement.style.top = top + 'px';\n        const closestList = closestElement(anchorNode, 'ul, ol'); // Prevent overlap bullets.\n        const anchorX = closestList ? closestList.getBoundingClientRect().x : anchorBlockRect.x;\n        const left = anchorX - containerRect.x - AVATAR_SIZE;\n        avatarElement.style.left = left + 'px';\n        selectionInfo.avatarPositionKey = `${left}|${top}`;\n    }\n\n    _updateAvatarCounters() {\n        this._avatarsOverlaps = {};\n        for (const info of this._collabSelectionInfos.values()) {\n            const key =  info.avatarPositionKey;\n            this._avatarsOverlaps[key] = this._avatarsOverlaps[key] || new Set();\n            this._avatarsOverlaps[key].add(info);\n        }\n\n        // Render avatars overlap.\n        this._avatarsCountersContainer.replaceChildren();\n        for (const [overlapKey, infos] of Object.entries(this._avatarsOverlaps)) {\n            const size = infos.size;\n            if (size > 1) {\n                const [left, top] = overlapKey.split('|').map((n) => parseInt(n, 10));\n                const div = document.createElement('div');\n                div.className = 'oe-overlapping-counter';\n                div.style.left = left + 10 + 'px';\n                div.style.top = top + 10 + 'px';\n                div.innerText = size;\n                this._avatarsCountersContainer.append(div);\n            }\n        }\n    }\n\n    multiselectionRemove(clientId) {\n        const selectionInfo = this._collabSelectionInfos.get(clientId);\n        if (selectionInfo && selectionInfo.avatarElement) {\n            selectionInfo.avatarElement.remove();\n        }\n        this._multiselectionRemoveClient(clientId)\n        this._collabSelectionInfos.delete(clientId);\n        this._updateAvatarCounters();\n    }\n\n    _multiselectionRemoveClient(clientId) {\n        const elements = this._selectionsContainer.querySelectorAll(\n            `[data-selection-client-id=\"${clientId}\"]`,\n        );\n        for (const element of elements) {\n            element.remove();\n        }\n    }\n\n    /**\n     * Same as @see _applyCommand, except that also simulates all the\n     * contenteditable behaviors we let happen, e.g. the backspace handling\n     * we then rollback.\n     *\n     * TODO this uses document.execCommand (which is deprecated) and relies on\n     * the fact that using a command through it leads to the same result as\n     * executing that command through a user keyboard on the unaltered editable\n     * section with standard contenteditable attribute. This is already a huge\n     * assomption.\n     *\n     * @param {string} method\n     * @returns {?}\n     */\n    execCommand(...args) {\n        this._computeHistorySelection();\n        return this._applyCommand(...args);\n    }\n\n    /**\n     * Find all descendants of `element` with a `data-call` attribute and bind\n     * them on click to the execution of the command matching that\n     * attribute.\n     */\n    bindExecCommand(element) {\n        for (const buttonEl of element.querySelectorAll('[data-call]')) {\n            buttonEl.addEventListener('click', ev => {\n                if (!this.isSelectionInEditable()) {\n                    this.historyResetLatestComputedSelection(true);\n                }\n                const arg1 = buttonEl.dataset.arg1;\n                const args = arg1 && arg1.split(\",\") || [];\n                this.execCommand(buttonEl.dataset.call, ...args);\n\n                ev.preventDefault();\n                this._updateToolbar();\n            });\n        }\n    }\n\n    /**\n     * Remove any custom table selection from the editor.\n     *\n     * @returns {boolean} true if a table was deselected\n     */\n    deselectTable() {\n        const tds = this.editable.querySelectorAll('.o_selected_table, .o_selected_td');\n        if (!tds.length) {\n            return false;\n        }\n        this.observerUnactive('deselectTable');\n        for (const td of tds) {\n            td.classList.remove('o_selected_td', 'o_selected_table');\n            if (!td.classList.length) {\n                td.removeAttribute('class');\n            }\n        }\n        this.observerActive('deselectTable');\n        return true;\n    }\n\n    /**\n     * `activateContenteditable` serves as an interface for external use,\n     * allowing users to conveniently trigger `_activateContenteditable`\n     * from outside the odooEditor.\n     */\n    activateContenteditable() {\n        this.canActivateContentEditable = true;\n        this._activateContenteditable();\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    _removeDomListener() {\n        for (const [element, eventName, boundCallback] of this._domListeners) {\n            element.removeEventListener(eventName, boundCallback);\n        }\n        this._domListeners = [];\n    }\n\n    // EDITOR COMMANDS\n    // ===============\n\n    deleteRange(sel) {\n        if (this.deleteTableRange()) {\n            return;\n        }\n        // Remove all FEFF text nodes\n        let range = getDeepRange(this.editable, { sel, correctTripleClick: true });\n        if (!range) return;\n        for (const node of descendants(closestBlock(range.commonAncestorContainer))) {\n            if (node.nodeType === Node.TEXT_NODE && [...node.textContent].every(char => char === '\\uFEFF')) {\n                const restore = prepareUpdate(...leftPos(node));\n                node.remove();\n                restore(); // Make sure to make <br>s visible if needed.\n            }\n        }\n        if (!this.editable.childElementCount) {\n            // Ensure the editable has content.\n            const p = document.createElement('p');\n            p.append(document.createElement('br'));\n            this.editable.append(p);\n            setSelection(p, 0);\n            return;\n        }\n        range = getDeepRange(this.editable, {\n            sel,\n            splitText: true,\n            select: true,\n            correctTripleClick: true,\n        });\n        if (!range) return;\n        // Expand the range to fully include all contentEditable=False elements.\n        const commonAncestorContainer = this.editable.contains(range.commonAncestorContainer) ?\n            range.commonAncestorContainer :\n            this.editable;\n        const startUneditable = getFurthestUneditableParent(range.startContainer, commonAncestorContainer);\n        if (startUneditable) {\n            let leaf = previousLeaf(startUneditable);\n            if (leaf) {\n                range.setStart(leaf, nodeSize(leaf));\n            } else {\n                range.setStart(commonAncestorContainer, 0);\n            }\n        }\n        const endUneditable = getFurthestUneditableParent(range.endContainer, commonAncestorContainer);\n        if (endUneditable) {\n            let leaf = nextLeaf(endUneditable);\n            if (leaf) {\n                range.setEnd(leaf, 0);\n            } else {\n                range.setEnd(commonAncestorContainer, nodeSize(commonAncestorContainer));\n            }\n        }\n        let insertedZws;\n        let { startContainer: start, startOffset, endContainer: end, endOffset } = range;\n        const startBlock = closestBlock(start);\n        const endBlock = closestBlock(end);\n        const [firstLeafOfStartBlock, lastLeafOfEndBlock] = [firstLeaf(startBlock), lastLeaf(endBlock)];\n        const startLink = closestElement(range.startContainer, 'a');\n        if (sel && !sel.isCollapsed && !range.startOffset && !range.startContainer.previousSibling && !startLink) {\n            // Insert a zero-width space before the selection if the selection\n            // is non-collapsed and at the beginning of its parent, so said\n            // parent will have content after extraction. This ensures that the\n            // parent will not be removed by \"tricking\" `range.extractContents`.\n            // Eg, <h1><font>[...]</font></h1> will preserve the styles of the\n            // <font> node. If it remains empty, it will be cleaned up later by\n            // the sanitizer.\n            // Links are excluded from this.\n            const zws = document.createTextNode('\\u200B');\n            range.startContainer.before(zws);\n            insertedZws = zws;\n        }\n        // Do not join blocks in the following cases:\n        // 1. start and end share a common ancestor block with the range\n        // 2. selection spans multiple TDs\n        // 3. selection starts at beginning of startBlock and ends at end of\n        //    endBlock\n        const doJoin =\n            !(startBlock === closestBlock(range.commonAncestorContainer) &&\n                endBlock === closestBlock(range.commonAncestorContainer))\n            && (startBlock.tagName !== 'TD' && endBlock.tagName !== 'TD')\n            && !(firstLeafOfStartBlock === start && lastLeafOfEndBlock === end);\n        let next = nextLeaf(end, this.editable);\n\n        // Get the boundaries of the range so as to get the state to restore.\n        if (end.nodeType === Node.TEXT_NODE) {\n            splitTextNode(end, endOffset);\n            endOffset = nodeSize(end);\n        }\n        if (start.nodeType === Node.TEXT_NODE) {\n            splitTextNode(start, startOffset);\n            startOffset = 0;\n        }\n        const restoreUpdate = prepareUpdate(\n            ...boundariesOut(start).slice(0, 2),\n            ...boundariesOut(end).slice(2, 4),\n            { allowReenter: false, label: 'deleteRange' });\n\n        // Let the DOM split and delete the range.\n        const contents = range.extractContents();\n\n        setSelection(start, nodeSize(start));\n        const startLi = closestElement(start, 'li');\n        // Uncheck a list item with empty text in multi-list selection.\n        if (startLi && startLi.classList.contains('o_checked') &&\n            ['\\u200B', ''].includes(startLi.textContent) && closestElement(end, 'li') !== startLi) {\n            startLi.classList.remove('o_checked');\n        }\n        range = getDeepRange(this.editable, { sel });\n        // Restore unremovables removed by extractContents.\n        [...contents.querySelectorAll('*')].filter(isUnremovable).forEach(n => {\n            closestBlock(range.endContainer).after(n);\n            n.textContent = '';\n        });\n        // If the end container was fully selected, extractContents may have\n        // emptied it without removing it. Ensure it's gone.\n        const isRemovableInvisible = node =>\n            !isVisible(node) && !isZWS(node) && !isUnremovable(node);\n        const endIsStart = end === start;\n        while (end && isRemovableInvisible(end) && !end.contains(range.endContainer)) {\n            const parent = end.parentNode;\n            end.remove();\n            end = parent;\n        }\n        // Same with the start container\n        while (\n            start &&\n            !isBlock(start) && isRemovableInvisible(start) &&\n            !(endIsStart && start.contains(range.startContainer))\n        ) {\n            const parent = start.parentNode;\n            start.remove();\n            start = parent;\n        }\n        // Ensure empty blocks be given a <br> child.\n        if (start) {\n            if (start === this.editable && startBlock.textContent === '\\u200B') {\n                const p = document.createElement('p');\n                start.appendChild(p);\n                start = p;\n            }\n            fillEmpty(closestBlock(start));\n        }\n        fillEmpty(closestBlock(range.endContainer));\n        range = getDeepRange(this.editable, { sel });\n        let joinWith = range.endContainer;\n        const rightLeaf = rightLeafOnlyNotBlockPath(joinWith).next().value;\n        if (rightLeaf && rightLeaf.nodeValue === ' ') {\n            joinWith = rightLeaf;\n        }\n        // Rejoin blocks that extractContents may have split in two.\n        while (\n            doJoin &&\n            next &&\n            !(next.previousSibling && next.previousSibling === joinWith) &&\n            this.editable.contains(next) && (closestElement(joinWith,'TD') === closestElement(next, 'TD'))\n        ) {\n            const restore = preserveCursor(this.document);\n            this.observerFlush();\n            const res = this._protect(() => {\n                next.oDeleteBackward();\n                if (!this.editable.contains(joinWith)) {\n                    this._toRollback = UNREMOVABLE_ROLLBACK_CODE; // tried to delete too far -> roll it back.\n                } else {\n                    next = firstLeaf(next);\n                }\n            }, this._currentStep.mutations.length);\n            if ([UNBREAKABLE_ROLLBACK_CODE, UNREMOVABLE_ROLLBACK_CODE].includes(res)) {\n                restore();\n                break;\n            }\n        }\n        // If the oDeleteBackward loop emptied the start block and the range\n        // ends in another element (rangeStart !== rangeEnd), we delete the\n        // start block and move the cursor to the end block.\n        if (\n            startBlock &&\n            startBlock.textContent === '\\u200B' &&\n            endBlock &&\n            startBlock !== endBlock &&\n            !isEmptyBlock(endBlock) &&\n            paragraphRelatedElements.includes(endBlock.nodeName)\n        ) {\n            startBlock.remove();\n            setSelection(endBlock, 0);\n            fillEmpty(endBlock);\n        }\n        if (insertedZws) {\n            // Remove the zero-width space (zws) that was added to preserve the\n            // parent styles, then call `fillEmpty` to properly add a flagged\n            // zws if still needed.\n            const el = closestElement(insertedZws);\n            const next = insertedZws.nextSibling;\n            insertedZws.remove();\n            el && fillEmpty(el);\n            setSelection(next, 0);\n        }\n        if (joinWith) {\n            const el = closestElement(joinWith);\n            el && fillEmpty(el);\n        }\n        const restoreCursor = preserveCursor(this.document);\n        restoreUpdate();\n        restoreCursor();\n    }\n\n    /**\n     * Handle range deletion in cases that involve custom table selections.\n     * Return true if nodes removed _inside_ a table, false otherwise (or if the\n     * table itself was removed).\n     *\n     * @param {Selection} sel\n     * @returns {boolean}\n     */\n    deleteTableRange() {\n        const selectedTds = this.editable.querySelectorAll('.o_selected_td');\n        const fullySelectedTables = [...this.editable.querySelectorAll('.o_selected_table')].filter(table => (\n            [...table.querySelectorAll('td')].every(td => td.classList.contains('o_selected_td'))\n        ));\n        if (selectedTds.length && !fullySelectedTables.length) {\n            this.historyPauseSteps();\n            // A selection within a table has to be handled differently so it\n            // takes into account the custom table cell selections, and doesn't\n            // break the table. If the selection includes a table cell but also\n            // elements that are out of a table, the whole table will be\n            // selected so its deletion can be handled separately.\n            const rows = [...closestElement(selectedTds[0], 'tr').parentElement.children].filter(child => child.nodeName === 'TR');\n            const firstRowCells = [...rows[0].children].filter(child => child.nodeName === 'TD' || child.nodeName === 'TH');\n            const areFullColumnsSelected = getRowIndex(selectedTds[0]) === 0 && getRowIndex(selectedTds[selectedTds.length - 1]) === rows.length - 1;\n            const areFullRowsSelected = getColumnIndex(selectedTds[0]) === 0 && getColumnIndex(selectedTds[selectedTds.length - 1]) === firstRowCells.length - 1;\n            if (areFullColumnsSelected || areFullRowsSelected) {\n                // If some full columns are selected, remove them.\n                if (areFullColumnsSelected) {\n                    const startIndex = getColumnIndex(selectedTds[0]);\n                    let endIndex = getColumnIndex(selectedTds[selectedTds.length - 1]);\n                    let currentIndex = startIndex;\n                    while (currentIndex <= endIndex) {\n                        this.execCommand('removeColumn', firstRowCells[currentIndex]);\n                        currentIndex++;\n                    }\n                }\n                // If some full rows are selected, remove them.\n                if (areFullRowsSelected) {\n                    const startIndex = getRowIndex(selectedTds[0]);\n                    let endIndex = getRowIndex(selectedTds[selectedTds.length - 1]);\n                    let currentIndex = startIndex;\n                    while (currentIndex <= endIndex) {\n                        this.execCommand('removeRow', rows[currentIndex]);\n                        currentIndex++;\n                    }\n                }\n            } else {\n                // If no full row or column is selected, empty the selected cells.\n                for (const td of selectedTds) {\n                    [...td.childNodes].forEach(child => child.remove());\n                    td.append(document.createElement('br'));\n                }\n            }\n            this.historyUnpauseSteps();\n            this.historyStep();\n            return true;\n        } else if (fullySelectedTables.length) {\n            fullySelectedTables.forEach(table => table.remove());\n        }\n        this._toggleTableUi();\n        return false;\n    }\n\n    /**\n     * Displays the text colors (foreground ink and background highlight)\n     * based on the current text cursor position. For gradients, displays\n     * the average color of the gradient.\n     *\n     * @param {object} [params]\n     * @param {string} [params.foreColor] - forces the 'foreColor' in the\n     *     toolbar instead of determining it from the cursor position\n     * @param {string} [params.hiliteColor] - forces the 'hiliteColor' in the\n     *     toolbar instead of determining it from the cursor position\n     */\n    updateColorpickerLabels(params = {}) {\n        function hexFromColor(color) {\n            if (isColorGradient(color)) {\n                // For gradients, compute the average color\n                color = color.match(/gradient(.*)/)[0];\n                let r = 0, g = 0, b = 0, count = 0;\n                for (const entry of color.matchAll(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)/g)) {\n                    count++;\n                    r += parseInt(entry[1], 10);\n                    g += parseInt(entry[2], 10);\n                    b += parseInt(entry[3], 10);\n                }\n                color = `rgb(${Math.round(r / count)}, ${Math.round(g / count)}, ${Math.round(b / count)})`;\n            }\n            return rgbToHex(color);\n        }\n        let foreColor = params.foreColor;\n        let hiliteColor = params.hiliteColor;\n\n        // Determine colors at cursor position\n        const sel = this.document.getSelection();\n        if (sel.rangeCount && (!foreColor || !hiliteColor)) {\n            const endContainer = closestElement(sel.getRangeAt(0).endContainer);\n            const computedStyle = getComputedStyle(endContainer);\n            const backgroundImage = computedStyle.backgroundImage;\n            const hasGradient = isColorGradient(backgroundImage);\n            const hasTextGradientClass = endContainer.classList.contains('text-gradient');\n            if (!foreColor) {\n                if (hasGradient && hasTextGradientClass) {\n                    foreColor = backgroundImage;\n                } else {\n                    foreColor = this.document.queryCommandValue('foreColor');\n                }\n            }\n            if (!hiliteColor) {\n                if (hasGradient && !hasTextGradientClass) {\n                    hiliteColor = backgroundImage;\n                } else {\n                    let ancestor = endContainer;\n                    while (ancestor && !hiliteColor) {\n                        hiliteColor = ancestor.style.backgroundColor;\n                        ancestor = ancestor.parentElement;\n                    }\n                    if (!hiliteColor) {\n                        hiliteColor = this.document.queryCommandValue('backColor');\n                    }\n                }\n            }\n        }\n\n        // display colors in toolbar buttons\n        foreColor = hexFromColor(foreColor);\n        this.toolbar.style.setProperty('--fore-color', foreColor);\n        const foreColorInput = this.toolbar.querySelector('#foreColor input');\n        if (foreColorInput) {\n            foreColorInput.value = foreColor;\n        }\n\n        hiliteColor = hexFromColor(hiliteColor);\n        this.toolbar.style.setProperty('--hilite-color', hiliteColor);\n        const hiliteColorInput = this.toolbar.querySelector('#hiliteColor input');\n        if (hiliteColorInput) {\n            hiliteColorInput.value = hiliteColor.length <= 7 ? hiliteColor : hexFromColor(hiliteColor);\n        }\n    }\n\n    /**\n     * Applies the given command to the current selection. This does *NOT*:\n     * 1) update the history cursor\n     * 2) protect the unbreakables or unremovables\n     * 3) sanitize the result\n     * 4) create new history entry\n     * 5) follow the exact same operations that would be done following events\n     *    that would lead to that command\n     *\n     * For points 1 -> 4, @see _applyCommand\n     * For points 1 -> 5, @see execCommand\n     *\n     * @private\n     * @param {string} method\n     * @returns {?}\n     */\n    _applyRawCommand(method, ...args) {\n        const sel = this.document.getSelection();\n        if (sel.anchorNode && isProtected(sel.anchorNode)) {\n            return;\n        }\n        if (!(SELECTIONLESS_COMMANDS.includes(method) && args.length) &&\n            !this.isSelectionInEditable(sel) &&\n            !(closestElement(sel.anchorNode, \"*[t-field],*[t-out],*[t-esc]\") && FORMATTING_COMMANDS.includes(method))\n        ) {\n            // Do not apply commands out of the editable area.\n            return false;\n        }\n        if (!sel.isCollapsed && BACKSPACE_FIRST_COMMANDS.includes(method)) {\n            let range = getDeepRange(this.editable, {sel, splitText: true, select: true, correctTripleClick: true});\n            if (range &&\n                range.startContainer === range.endContainer &&\n                range.endContainer.nodeType === Node.TEXT_NODE &&\n                ZERO_WIDTH_CHARS.includes(range.cloneContents().textContent)\n            ) {\n                // We Collapse the selection and bypass deleteRange\n                // if the range content is only one ZWS.\n                sel.collapseToStart();\n                if (BACKSPACE_ONLY_COMMANDS.includes(method)) {\n                    this._applyRawCommand(method);\n                }\n                return;\n            }\n            this.deleteRange(sel);\n            if (BACKSPACE_ONLY_COMMANDS.includes(method)) {\n                return true;\n            }\n        }\n\n        this.options.beforeAnyCommand();\n\n        if (editorCommands[method]) {\n            return editorCommands[method](this, ...args);\n        }\n        if (method.startsWith('justify')) {\n            const mode = method.split('justify').join('').toLocaleLowerCase();\n            return this._align(mode === 'full' ? 'justify' : mode);\n        }\n        return sel.anchorNode[method](sel.anchorOffset, ...args);\n    }\n\n    /**\n     * Same as @see _applyRawCommand but adapt history, protects unbreakables\n     * and removables and sanitizes the result.\n     *\n     * @private\n     * @param {string} method\n     * @returns {?}\n     */\n    _applyCommand(...args) {\n        this._recordHistorySelection(true);\n        const result = this._protect(() => this._applyRawCommand(...args));\n        this.historyStep();\n        this._handleCommandHint();\n        return result;\n    }\n    /**\n     * @private\n     * @param {function} callback\n     * @param {number} [rollbackCounter]\n     * @returns {?}\n     */\n    _protect(callback, rollbackCounter) {\n        try {\n            const result = callback.call(this);\n            this.observerFlush();\n            if (this._toRollback) {\n                const torollbackCode = this._toRollback;\n                this.historyRollback(rollbackCounter);\n                return torollbackCode; // UNBREAKABLE_ROLLBACK_CODE || UNREMOVABLE_ROLLBACK_CODE\n            } else {\n                return result;\n            }\n        } catch (error) {\n            if (error === UNBREAKABLE_ROLLBACK_CODE || error === UNREMOVABLE_ROLLBACK_CODE) {\n                this.historyRollback(rollbackCounter);\n                return error;\n            } else {\n                throw error;\n            }\n        }\n    }\n    _activateContenteditable() {\n        this.observerUnactive('_activateContenteditable');\n        this.editable.setAttribute('contenteditable', this.options.isRootEditable);\n\n        const editableAreas = this.options.getContentEditableAreas(this);\n        for (const node of editableAreas) {\n            if (!node.isContentEditable) {\n                if (isArtificialVoidElement(node) || node.nodeName === 'IMG') {\n                    node.classList.add('o_editable_media');\n                } else {\n                    node.setAttribute('contenteditable', true);\n                }\n            }\n        }\n        for (const node of this.options.getReadOnlyAreas()) {\n            node.setAttribute('contenteditable', false);\n        }\n        for (const element of this.options.getUnremovableElements()) {\n            element.classList.add(\"oe_unremovable\");\n        }\n        this.observerActive('_activateContenteditable');\n    }\n\n    _stopContenteditable() {\n        this.observerUnactive('_stopContenteditable');\n        if (this.options.isRootEditable) {\n            this.editable.setAttribute('contenteditable', !this.options.isRootEditable);\n        }\n        for (const node of this.options.getContentEditableAreas(this)) {\n            if (node.getAttribute('contenteditable') === 'true') {\n                node.setAttribute('contenteditable', false);\n            }\n        }\n        this.observerActive('_stopContenteditable');\n    }\n\n    // TABLE MANAGEMENT\n    // ================\n\n    /**\n     * Handle the selection of table cells rectangularly (as opposed to line by\n     * line from left to right then top to bottom). If such a special selection\n     * was indeed applied, return true (and false otherwise).\n     *\n     * @private\n     * @param {MouseEvent|undefined} [ev]\n     * @returns {boolean}\n     */\n    _handleSelectionInTable(ev=undefined) {\n        const selection = this.document.getSelection();\n        // Selection could be gone if the document comes from an iframe that has been removed.\n        const anchorNode = selection && selection.rangeCount && selection.getRangeAt(0) && selection.anchorNode;\n        if (anchorNode && !ancestors(anchorNode).includes(this.editable)) {\n            return false;\n        }\n        const traversedNodes = getTraversedNodes(this.editable);\n        if (this._isResizingTable || !traversedNodes.some(node => !!closestElement(node, 'td') && !isProtected(node))) {\n            return false;\n        }\n        let range;\n        if (this.isFirefox) {\n            if (selection.rangeCount > 1) {\n                // In Firefox, selecting multiple cells within a table using the mouse can create multiple ranges.\n                // This behavior can cause the original selection (where the selection started) to be lost.\n                // To address this, we reset the selection to the _latestComputedSelection, ensuring that\n                // even when multiple ranges are selected, the original selection remains accessible.\n                this.historyResetLatestComputedSelection(true);\n            } else if (\n                ev &&\n                closestElement(ev.target, 'table') === closestElement(selection.anchorNode, 'table') &&\n                closestElement(ev.target, 'td') !== closestElement(selection.focusNode, 'td')\n            ) {\n                // When we modify a multiple range selection to a single range selection,\n                // Firefox stops updating the selection automatically.\n                // As a result, we need to manually update the selection based on the current target.\n                setSelection(selection.anchorNode, selection.anchorOffset, ev.target, 0);\n            }\n            // We need the triple click correction only for a bug in firefox\n            // where it gives a selection of a full cell as tr 0 tr 1. The\n            // correction makes it so it gives us the cell and not its neighbor.\n            // In all other cases we don't want to make that correction so as to\n            // avoid flicker when hovering borders.\n            range = getDeepRange(this.editable, { correctTripleClick: anchorNode && anchorNode.nodeName === 'TR' });\n        } else {\n            range = getDeepRange(this.editable);\n        }\n        const startTd = closestElement(range.startContainer, 'td');\n        const endTd = closestElement(range.endContainer, 'td');\n        let appliedCustomSelection = false;\n        // Get the top table ancestors at range bounds.\n        const startTable = ancestors(range.startContainer, this.editable).filter(node => node.nodeName === 'TABLE').pop();\n        const endTable = ancestors(range.endContainer, this.editable).filter(node => node.nodeName === 'TABLE').pop();\n        if (startTd !== endTd && startTable === endTable) {\n            if (!isProtected(startTable)) {\n                // The selection goes through at least two different cells ->\n                // select cells.\n                this._selectTableCells(range);\n                appliedCustomSelection = true;\n            }\n        } else if (!traversedNodes.every(node => node.parentElement && closestElement(node.parentElement, 'table')) && !selection.isCollapsed) {\n            // The selection goes through a table but also outside of it ->\n            // select the whole table.\n            this.observerUnactive('handleSelectionInTable');\n            const traversedTables = new Set(\n                traversedNodes\n                    .map((node) => closestElement(node, \"table\"))\n                    .filter((node) => !isProtected(node))\n            );\n            for (const table of traversedTables) {\n                // Don't apply several nested levels of selection.\n                if (table && !ancestors(table, this.editable).some(node => [...traversedTables].includes(node))) {\n                    table.classList.toggle('o_selected_table', true);\n                    for (const td of [...table.querySelectorAll('td')].filter(td => closestElement(td, 'table') === table)) {\n                        td.classList.toggle('o_selected_td', true);\n                    }\n                    appliedCustomSelection = true;\n                }\n            }\n            this.observerActive('handleSelectionInTable');\n        } else if (ev && startTd && !isProtected(startTd)) {\n            // We're redirected from a mousemove event.\n            const selectedNodes = getSelectedNodes(this.editable);\n            const cellContents = descendants(startTd);\n            const areCellContentsFullySelected = cellContents.filter(d => !isBlock(d)).every(child => selectedNodes.includes(child));\n            if (areCellContentsFullySelected) {\n                const SENSITIVITY = 5;\n                const rangeRect = range.getBoundingClientRect();\n                const isMovingAwayFromSelection = ev.clientX > rangeRect.x + rangeRect.width + SENSITIVITY // moving right\n                    || ev.clientX < rangeRect.x - SENSITIVITY; // moving left\n                if (isMovingAwayFromSelection) {\n                    // A cell is fully selected and the mouse is moving away\n                    // from the selection, within said cell -> select the cell.\n                    this._selectTableCells(range);\n                    appliedCustomSelection = true;\n                }\n            } else if (cellContents.filter(isBlock).every(isEmptyBlock) &&\n                Math.abs(ev.clientX - (this._lastMouseClickPosition ? this._lastMouseClickPosition[0] : ev.clientX)) >= 15\n            ) {\n                // Handle selecting an empty cell.\n                this._selectTableCells(range);\n                appliedCustomSelection = true;\n            }\n        }\n        return appliedCustomSelection;\n    }\n    /**\n     * Helper function to `_handleSelectionInTable`. Do the actual selection of\n     * cells in a table based on the current range.\n     *\n     * @private\n     * @see _handleSelectionInTable\n     * @param {Range} range\n     */\n    _selectTableCells(range) {\n        const table = closestElement(range.commonAncestorContainer, 'table');\n        if (!table) {\n            return;\n        }\n        this.observerUnactive('_selectTableCells');\n        const alreadyHadSelection = table.classList.contains('o_selected_table');\n        this.deselectTable(); // Undo previous selection.\n        table.classList.toggle('o_selected_table', true);\n        const columns = [...table.querySelectorAll('td')].filter(td => closestElement(td, 'table') === table);\n        const startCol = [range.startContainer, ...ancestors(range.startContainer, this.editable)]\n            .find(node => node.nodeName === 'TD' && closestElement(node, 'table') === table) || columns[0];\n        const endCol = [range.endContainer, ...ancestors(range.endContainer, this.editable)]\n            .find(node => node.nodeName === 'TD' && closestElement(node, 'table') === table) || columns[columns.length - 1];\n        const [startRow, endRow] = [closestElement(startCol, 'tr'), closestElement(endCol, 'tr')];\n        const [startColIndex, endColIndex] = [getColumnIndex(startCol), getColumnIndex(endCol)];\n        const [startRowIndex, endRowIndex] = [getRowIndex(startRow), getRowIndex(endRow)];\n        const [minRowIndex, maxRowIndex] = [Math.min(startRowIndex, endRowIndex), Math.max(startRowIndex, endRowIndex)];\n        const [minColIndex, maxColIndex]  = [Math.min(startColIndex, endColIndex), Math.max(startColIndex, endColIndex)];\n        // Create an array of arrays of tds (each of which is a row).\n        const grid = [...table.querySelectorAll('tr')]\n            .filter(tr => closestElement(tr, 'table') === table)\n            .map(tr => [...tr.children].filter(child => child.nodeName === 'TD'));\n        for (const tds of grid.filter((_, index) => index >= minRowIndex && index <= maxRowIndex)) {\n            for (const td of tds.filter((_, index) => index >= minColIndex && index <= maxColIndex)) {\n                td.classList.toggle('o_selected_td', true);\n            }\n        }\n        if (!alreadyHadSelection) {\n            this.toolbarShow();\n        }\n        this.observerActive('_selectTableCells');\n    }\n    /**\n     * If the mouse is hovering over one of the borders of a table cell element,\n     * return the side of that border ('left'|'top'|'right'|'bottom').\n     * Otherwise, return false.\n     *\n     * @private\n     * @param {MouseEvent} ev\n     * @returns {boolean}\n     */\n    _isHoveringTdBorder(ev) {\n        if (ev.target && ev.target.nodeName === 'TD' && ev.target.isContentEditable) {\n            const SENSITIVITY = 5;\n            const targetRect = ev.target.getBoundingClientRect();\n            if (ev.clientX <= targetRect.x + SENSITIVITY) {\n                return 'left';\n            } else if (ev.clientY <= targetRect.y + SENSITIVITY) {\n                return 'top';\n            } else if (ev.clientX >= targetRect.x + ev.target.clientWidth - SENSITIVITY) {\n                return 'right';\n            } else if (ev.clientY >= targetRect.y + ev.target.clientHeight - SENSITIVITY) {\n                return 'bottom';\n            }\n        }\n        return false;\n    }\n    /**\n     * Change the cursor to a resizing cursor, in the direction specified. If no\n     * direction is specified, return the cursor to its default.\n     *\n     * @private\n     * @param {'col'|'row'|false} direction 'col'/'row' to hint column/row,\n     *                                      false to remove the hints\n     */\n    _toggleTableResizeCursor(direction) {\n        this.editable.classList.remove('o_col_resize', 'o_row_resize');\n        if (direction === 'col') {\n            this.editable.classList.add('o_col_resize');\n        } else if (direction === 'row') {\n            this.editable.classList.add('o_row_resize');\n        }\n    }\n    /**\n     * Resizes a table in the given direction, by \"pulling\" the border between\n     * the given targets (ordered left to right or top to bottom).\n     *\n     * @private\n     * @param {MouseEvent} ev\n     */\n    _resizeTable(ev, direction, target1, target2) {\n        ev.preventDefault();\n        let position = target1 ? (target2 ? 'middle' : 'last') : 'first';\n        let [item, neighbor] = [target1 || target2, target2];\n        const table = closestElement(item, 'table');\n        const [sizeProp, positionProp, clientPositionProp] = direction === 'col' ? ['width', 'x', 'clientX'] : ['height', 'y', 'clientY'];\n\n        const isRTL = this.options.direction === \"rtl\";\n        // Preserve current width.\n        if (sizeProp === 'width') {\n            const tableRect = table.getBoundingClientRect();\n            table.style[sizeProp] = tableRect[sizeProp] + 'px';\n        }\n        const unsizedItemsSelector = `${direction === 'col' ? 'td' : 'tr'}:not([style*=${sizeProp}])`;\n        for (const unsizedItem of table.querySelectorAll(unsizedItemsSelector)) {\n            unsizedItem.style[sizeProp] = unsizedItem.getBoundingClientRect()[sizeProp] + 'px';\n        }\n\n        // TD widths should only be applied in the first row. Change targets and\n        // clean the rest.\n        if (direction === 'col') {\n            let hostCell = closestElement(table, 'td');\n            const hostCells = [];\n            while (hostCell) {\n                hostCells.push(hostCell);\n                hostCell = closestElement(hostCell.parentElement, 'td');\n            }\n            const nthColumn = getColumnIndex(item);\n            const firstRow = [...table.querySelector('tr').children];\n            [item, neighbor] = [firstRow[nthColumn], firstRow[nthColumn + 1]];\n            for (const td of hostCells) {\n                if (td !== item && td !== neighbor && closestElement(td, 'table') === table && getColumnIndex(td) !== 0) {\n                    td.style.removeProperty(sizeProp);\n                }\n            }\n            if (isRTL && position == \"middle\") {\n                [item, neighbor] = [neighbor, item];\n            }\n        }\n\n        const MIN_SIZE = 33; // TODO: ideally, find this value programmatically.\n        switch (position) {\n            case 'first': {\n                const marginProp = direction === 'col' ? (isRTL ? 'marginRight' : 'marginLeft') : 'marginTop';\n                const itemRect = item.getBoundingClientRect();\n                const tableStyle = getComputedStyle(table);\n                const currentMargin = pxToFloat(tableStyle[marginProp]);\n                let sizeDelta = itemRect[positionProp] - ev[clientPositionProp];\n                if (direction === 'col' && isRTL) {\n                    sizeDelta = ev[clientPositionProp] - itemRect[positionProp] -itemRect[sizeProp] ;\n                }\n                const newMargin = currentMargin - sizeDelta;\n                const currentSize = itemRect[sizeProp];\n                const newSize = currentSize + sizeDelta;\n                if (newMargin >= 0 && newSize > MIN_SIZE) {\n                    const tableRect = table.getBoundingClientRect();\n                    // Check if a nested table would overflow its parent cell.\n                    const hostCell = closestElement(table.parentElement, 'td');\n                    const childTable = item.querySelector('table');\n                    const endProp = isRTL ? 'left' : 'right'\n                    if (direction === 'col' &&\n                        (hostCell && tableRect[endProp] + sizeDelta > hostCell.getBoundingClientRect()[endProp] - 5 ||\n                        childTable && childTable.getBoundingClientRect()[endProp] > itemRect[endProp] + sizeDelta - 5)) {\n                        break;\n                    }\n                    table.style[marginProp] = newMargin + 'px';\n                    item.style[sizeProp] = newSize + 'px';\n                    if (sizeProp === 'width') {\n                        table.style[sizeProp] = tableRect[sizeProp] + sizeDelta + 'px';\n                    }\n                }\n                break;\n            }\n            case 'middle': {\n                const [itemRect, neighborRect] = [item.getBoundingClientRect(), neighbor.getBoundingClientRect()];\n                const [currentSize, newSize] = [itemRect[sizeProp], ev[clientPositionProp] - itemRect[positionProp]];\n                const editableStyle = getComputedStyle(this.editable);\n                const sizeDelta = newSize - currentSize;\n                const currentNeighborSize = neighborRect[sizeProp];\n                const newNeighborSize = currentNeighborSize - sizeDelta;\n                const maxWidth = this.editable.clientWidth - pxToFloat(editableStyle.paddingLeft) - pxToFloat(editableStyle.paddingRight);\n                const tableRect = table.getBoundingClientRect();\n                if (newSize > MIN_SIZE &&\n                        // prevent resizing horizontally beyond the bounds of\n                        // the editable:\n                        (direction === 'row' ||\n                        newNeighborSize > MIN_SIZE ||\n                        tableRect[sizeProp] + sizeDelta < maxWidth)) {\n\n                    // Check if a nested table would overflow its parent cell.\n                    const childTable = item.querySelector('table');\n                    if (direction === 'col' &&\n                        childTable && childTable.getBoundingClientRect().right > itemRect.right + sizeDelta - 5) {\n                        break\n                    }\n                    item.style[sizeProp] = newSize + 'px';\n                    if (direction === 'col') {\n                        neighbor.style[sizeProp] = (newNeighborSize > MIN_SIZE ? newNeighborSize : currentNeighborSize) + 'px';\n                    } else if (sizeProp === 'width') {\n                        table.style[sizeProp] = tableRect[sizeProp] + sizeDelta + 'px';\n                    }\n                }\n                break;\n            }\n            case 'last': {\n                const itemRect = item.getBoundingClientRect();\n                let sizeDelta = ev[clientPositionProp] - (itemRect[positionProp] + itemRect[sizeProp]); // todo: rephrase\n                if (direction === 'col' && isRTL) {\n                    sizeDelta = itemRect[positionProp] - ev[clientPositionProp];\n                }\n                const currentSize = itemRect[sizeProp];\n                const newSize = currentSize + sizeDelta;\n                if ((newSize >= 0 || direction === 'row') && newSize > MIN_SIZE) {\n                    const tableRect = table.getBoundingClientRect();\n                    // Check if a nested table would overflow its parent cell.\n                    const hostCell = closestElement(table.parentElement, 'td');\n                    const childTable = item.querySelector('table');\n                    const endProp = isRTL ? 'left' : 'right'\n                    if (direction === 'col' &&\n                        (hostCell && tableRect[endProp] + sizeDelta > hostCell.getBoundingClientRect()[endProp] - 5 ||\n                        childTable && childTable.getBoundingClientRect()[endProp] > itemRect[endProp] + sizeDelta - 5)) {\n                        break\n                    }\n                    if (sizeProp === 'width') {\n                        table.style[sizeProp] = tableRect[sizeProp] + sizeDelta + 'px';\n                    }\n                    item.style[sizeProp] = newSize + 'px';\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * Show/hide and position the table row/column manipulation UI.\n     *\n     * @private\n     * @param {HTMLTableRowElement} [row=false]\n     * @param {HTMLTableCellElement} [column=false]\n     */\n    _toggleTableUi(row=false, column=false) {\n        if (row) {\n            this._rowUi.style.visibility = 'visible';\n            this._rowUiTarget = row;\n            this._positionTableUi(row);\n        } else {\n            this._rowUi.style.visibility = 'hidden';\n        }\n        if (column) {\n            this._columnUi.style.visibility = 'visible';\n            this._columnUiTarget = column;\n            this._positionTableUi(column);\n        } else {\n            this._columnUi.style.visibility = 'hidden';\n        }\n        if (row || column) {\n            this._tableUiTarget = closestElement(row || column, 'table');\n            this._tableUiTarget && this._tableUiTarget.addEventListener('mouseleave', () => this._toggleTableUi(), { once: true });\n        }\n    }\n    /**\n     * Position the table row/column tools (depending on whether a row or a cell\n     * is passed as argument).\n     *\n     * @private\n     * @param {HTMLTableRowElement|HTMLTableCellElement} element\n     */\n    _positionTableUi(element) {\n        if (!element.isConnected) {\n            return;\n        }\n        const tableUiContainerRect = this._tableUiContainer.getBoundingClientRect();\n        const isRtl = this.options.direction === 'rtl';\n        const isRow = element.nodeName === 'TR';\n        const ui = isRow ? this._rowUi : this._columnUi;\n        const elementRect = element.getBoundingClientRect();\n        const wrappedUi = ui.firstElementChild;\n        const table = closestElement(element, 'table');\n        const tableRect = table && table.getBoundingClientRect();\n        const resetTableSize = ui.querySelector('.o_reset_table_size');\n        if (table && !table.hasAttribute('style')) {\n            resetTableSize.classList.add('d-none');\n        } else {\n            resetTableSize.classList.remove('d-none');\n        }\n\n        let left;\n        let top;\n        if (isRow) {\n            if (isRtl) {\n                left = tableRect.right - tableUiContainerRect.x;\n            } else {\n                left = elementRect.left - tableUiContainerRect.left - wrappedUi.clientWidth;\n            }\n        } else if (isRtl) {\n            left = elementRect.left - tableUiContainerRect.left + wrappedUi.clientWidth;\n        } else {\n            left = elementRect.left - tableUiContainerRect.left - (isRow ? wrappedUi.clientWidth : 0);\n        }\n        top = elementRect.top - tableUiContainerRect.top - (isRow ? 0 : wrappedUi.clientHeight);\n\n        ui.style.left = left + 'px';\n        ui.style.top = top + 'px';\n        wrappedUi.style[isRow ? 'height' : 'width'] = elementRect[isRow ? 'height' : 'width'] + 'px';\n\n    }\n\n    // HISTORY\n    // =======\n\n    /**\n     * @private\n     * @returns {Object}\n     */\n    _computeHistorySelection() {\n        const sel = this.document.getSelection();\n        if (!(sel && sel.anchorNode)) {\n            return this._latestComputedSelection;\n        }\n        this._latestComputedSelection = {\n            anchorNode: sel.anchorNode,\n            anchorOffset: sel.anchorOffset,\n            focusNode: sel.focusNode,\n            focusOffset: sel.focusOffset,\n        };\n        if (this.isSelectionInEditable(sel)) {\n            this._latestComputedSelectionInEditable = this._latestComputedSelection;\n        }\n        return this._latestComputedSelection;\n    }\n    /**\n     * @private\n     * @param {boolean} [useCache=false]\n     */\n    _recordHistorySelection(useCache = false) {\n        this._currentStep.selection =\n            serializeSelection(\n                useCache ? this._latestComputedSelection : this._computeHistorySelection(),\n            ) || {};\n    }\n    /**\n     * Return true if the latest computed selection was inside an empty inline tag\n     *\n     * @private\n     * @return {boolean}\n     */\n    _isLatestComputedSelectionInsideEmptyInlineTag() {\n        if (!this._latestComputedSelection) {\n            return false;\n        }\n        const anchorNode = this._latestComputedSelection.anchorNode;\n        const focusNode = this._latestComputedSelection.focusNode;\n        const parentTextContent = anchorNode.parentElement? anchorNode.parentElement.textContent : null;\n        return anchorNode === focusNode && (['', ...ZERO_WIDTH_CHARS].includes(parentTextContent))\n    }\n    /**\n     * Get the step index in the history to undo.\n     * Return -1 if no undo index can be found.\n     */\n    _getNextUndoIndex() {\n        // Go back to first step that can be undone (\"redo\" or undefined).\n        for (let index = this._historySteps.length - 1; index >= 0; index--) {\n            if (\n                this._historySteps[index] &&\n                this._historySteps[index].clientId === this._collabClientId\n            ) {\n                const state = this._historyStepsStates.get(this._historySteps[index].id);\n                if (state === 'redo' || !state) {\n                    return index;\n                }\n            }\n        }\n        // There is no steps left to be undone, return an index that does not\n        // point to any step\n        return -1;\n    }\n    /**\n     * Get the step index in the history to redo.\n     * Return -1 if no redo index can be found.\n     */\n    _getNextRedoIndex() {\n        // We cannot redo more than what is consumed.\n        // Check if we have no more \"consumed\" than \"redo\" until we get to an\n        // \"undo\"\n        let totalConsumed = 0;\n        for (let index = this._historySteps.length - 1; index >= 0; index--) {\n            if (\n                this._historySteps[index] &&\n                this._historySteps[index].clientId === this._collabClientId\n            ) {\n                const state = this._historyStepsStates.get(this._historySteps[index].id);\n                switch (state) {\n                    case 'undo':\n                        return totalConsumed <= 0 ? index : -1;\n                    case 'redo':\n                        totalConsumed -= 1;\n                        break;\n                    case 'consumed':\n                        totalConsumed += 1;\n                        break;\n                    default:\n                        return -1;\n                }\n            }\n        }\n        return -1;\n    }\n    historyRevertUntil (toStepIndex) {\n        const lastStep = this._currentStep;\n        this.historyRevert(lastStep);\n        let stepIndex = this._historySteps.length - 1;\n        while (stepIndex > toStepIndex) {\n            const step = this._historySteps[stepIndex];\n            const stepState = this._historyStepsStates.get(step.id);\n            if (step.clientId === this._collabClientId && stepState !== 'consumed') {\n                this.historyRevert(this._historySteps[stepIndex]);\n                this._historyStepsStates.set(''+step.id, 'consumed');\n            }\n            stepIndex--;\n        }\n    }\n\n    // TOOLBAR\n    // =======\n\n    toolbarHide() {\n        this._updateToolbar(false);\n    }\n    toolbarShow() {\n        this._updateToolbar(true);\n    }\n    /**\n     * @private\n     * @param {boolean} [show]\n     */\n    _updateToolbar(show) {\n        if (!this.toolbar) {\n            return;\n        }\n        if (!this.autohideToolbar && this.toolbar.style.visibility !== 'visible') {\n            this.toolbar.style.visibility = 'visible';\n        }\n\n        const sel = this.document.getSelection();\n        if (!hasTableSelection(this.editable)) {\n            if (this.editable.classList.contains('o_col_resize') || this.editable.classList.contains('o_row_resize')) {\n                show = false;\n            }\n            if (!sel.anchorNode) {\n                show = false;\n            } else {\n                const selAncestors = [sel.anchorNode, ...ancestors(sel.anchorNode, this.editable)];\n                const isInStars = selAncestors.some(node => node.classList && node.classList.contains('o_stars'));\n                if (isInStars) {\n                    show = false;\n                }\n            }\n        }\n        if (this.autohideToolbar && !this.toolbar.contains(sel.anchorNode)) {\n            if (!this.isMobile) {\n                if (this.powerboxTablePicker.el.style.display === 'block') {\n                    this.toolbar.style.visibility = 'hidden';\n                    return;\n                }\n                if (show !== undefined) {\n                    this.toolbar.style.visibility = show ? 'visible' : 'hidden';\n                }\n                if (show === false) {\n                    for (const menu of this.toolbar.querySelectorAll('.dropdown-menu.show')) {\n                        menu.parentElement?.querySelector('[data-bs-toggle=\"dropdown\"]')?.click();\n                    };\n                    return;\n                }\n            }\n        }\n        if (!this.isSelectionInEditable(sel)) {\n            return;\n        }\n        const paragraphDropdownButton = this.toolbar.querySelector('#paragraphDropdownButton');\n        if (paragraphDropdownButton) {\n            for (const commandState of [\n                'justifyLeft',\n                'justifyRight',\n                'justifyCenter',\n                'justifyFull',\n            ]) {\n                const button = this.toolbar.querySelector('#' + commandState);\n                const direction = commandState === 'justifyFull'\n                    ? 'justify' : commandState.replace('justify', '').toLowerCase();\n                let isStateTrue = false;\n                const link = sel.anchorNode && closestElement(sel.anchorNode, 'a');\n                const linkBlock = link && closestBlock(link);\n                if (linkBlock) {\n                    // We don't support links with a width that is larger than\n                    // their contents so an alignment within the link is not\n                    // visible. Since the editor applies alignments to a node's\n                    // closest block, we show the alignment of the link's\n                    // closest block.\n                    const alignment = getComputedStyle(linkBlock).textAlign;\n                    isStateTrue = alignment === direction;\n                } else {\n                    isStateTrue = this.document.queryCommandState(commandState)\n                }\n                button.classList.toggle('active', isStateTrue);\n                const newClass = `fa-align-${direction}`;\n                paragraphDropdownButton.classList.toggle(newClass, isStateTrue);\n            }\n        }\n        if (sel.rangeCount) {\n            // queryCommandState does not take stylesheets into account\n            for (const format of ['bold', 'italic', 'underline', 'strikeThrough', 'switchDirection']) {\n                const formatButton = this.toolbar.querySelector(`#${format.toLowerCase()}`);\n                if (formatButton) {\n                    formatButton.classList.toggle('active', isSelectionFormat(this.editable, format));\n                }\n            }\n\n            const fontSizeEl = this.toolbar.querySelector(\"#fontSizeCurrentValue\");\n            if (fontSizeEl) {\n                fontSizeEl.value = Math.round(getFontSizeDisplayValue(sel,\n                    this.options.getCSSVariableValue,\n                    this.options.convertNumericToUnit\n                ));\n            }\n\n            const table = getInSelection(this.document, 'table');\n            const toolbarButton = this.toolbar.querySelector('.toolbar-edit-table');\n            if (toolbarButton) {\n                this.toolbar.querySelector('.toolbar-edit-table').style.display = table\n                    ? 'block'\n                    : 'none';\n            }\n        }\n        this.updateColorpickerLabels();\n        const listUIClasses = {UL: 'fa-list-ul', OL: 'fa-list-ol', CL: 'fa-tasks'};\n        const block = closestBlock(sel.anchorNode);\n        let activeLabel = undefined;\n        for (const [style, cssSelector, isList] of [\n            // TODO we might want to review this list to not mention o_xxx\n            // classes but be a setting instead? Probably after current\n            // refactorings being made in master.\n            ['paragraph', 'p:not(.small, .lead, .o_small)', false],\n            ['pre', 'pre', false],\n            ['heading1', 'h1:not(.display-1, .display-2, .display-3, .display-4)', false],\n            ['heading2', 'h2', false],\n            ['heading3', 'h3', false],\n            ['heading4', 'h4', false],\n            ['heading5', 'h5', false],\n            ['heading6', 'h6', false],\n            ['display-1', 'h1.display-1', false],\n            ['display-2', 'h1.display-2', false],\n            ['display-3', 'h1.display-3', false],\n            ['display-4', 'h1.display-4', false],\n            ['blockquote', 'blockquote', false],\n            // Note: this button will apply the \"o_small\" class but as an\n            // approximation, we display \"Small\" if this actually use the\n            // Bootstrap \"small\" class.\n            ['small', '.small, .o_small', false],\n            ['light', '.lead', false],\n            ['unordered', 'UL', true],\n            ['ordered', 'OL', true],\n            ['checklist', 'CL', true],\n        ]) {\n            const button = this.toolbar.querySelector('#' + style);\n            if (button && !block) {\n                button.classList.toggle('active', false);\n            } else if (button) {\n                const isActive = isList\n                    ? block.tagName === 'LI' && getListMode(block.parentElement) === cssSelector\n                    : block.matches(cssSelector);\n                button.classList.toggle('active', isActive);\n\n                if (!isList && isActive) {\n                    activeLabel = button.textContent;\n                }\n            }\n        }\n        if (block) {\n            const listMode = getListMode(block.parentElement);\n            const listDropdownButton = this.toolbar.querySelector('#listDropdownButton');\n            if (listDropdownButton) {\n                if (listMode) {\n                    listDropdownButton.classList.remove('fa-list-ul', 'fa-list-ol', 'fa-tasks');\n                    listDropdownButton.classList.add(listUIClasses[listMode]);\n                }\n                listDropdownButton.closest('button').classList.toggle('active', block.tagName === 'LI');\n            }\n        }\n\n        const styleSection = this.toolbar.querySelector('#style');\n        if (styleSection) {\n            if (!activeLabel) {\n                // If no element from the text style dropdown was marked as active,\n                // mark the paragraph one as active and use its label.\n                const firstButtonEl = styleSection.querySelector('#paragraph');\n                firstButtonEl.classList.add('active');\n                activeLabel = firstButtonEl.textContent;\n            }\n            styleSection.querySelector('button span').textContent = activeLabel;\n        }\n\n        const isInMedia = this.toolbar.classList.contains('oe-media');\n        const linkNode = getInSelection(this.document, 'a');\n        const linkButton = this.toolbar.querySelector('#create-link');\n        linkButton && linkButton.classList.toggle('active', !!linkNode);\n        // Hide unlink button if no link in selection, always hide on media\n        // elements.\n        const unlinkButton = this.toolbar.querySelector('#unlink');\n        unlinkButton?.classList.toggle('d-none', isInMedia || !linkNode);\n        const undoButton = this.toolbar.querySelector('#undo');\n        undoButton && undoButton.classList.toggle('disabled', !this.historyCanUndo());\n        const redoButton = this.toolbar.querySelector('#redo');\n        redoButton && redoButton.classList.toggle('disabled', !this.historyCanRedo());\n\n        // Hide create-link button if selection spans several blocks, always\n        // hide on media elements.\n        const range = getDeepRange(this.editable, { sel, correctTripleClick: true });\n        const spansBlocks = [...range.commonAncestorContainer.childNodes].some(isBlock);\n        linkButton?.classList.toggle('d-none', spansBlocks || isInMedia);\n\n        // Hide link button group if it has no visible button.\n        const linkBtnGroup = this.toolbar.querySelector('#link.btn-group');\n        linkBtnGroup?.classList.toggle('d-none', !linkBtnGroup.querySelector('.btn:not(.d-none)'));\n        if (this.autohideToolbar && !this.isMobile && !this.toolbar.contains(sel.anchorNode)) {\n            this._positionToolbar();\n        }\n    }\n\n    updateToolbarPosition() {\n        if (\n            this.autohideToolbar &&\n            !this.isMobile &&\n            getComputedStyle(this.toolbar).visibility === 'visible'\n        ) {\n            this._positionToolbar();\n        }\n    }\n\n    _positionToolbar() {\n        const OFFSET = 10;\n        let isBottom = false;\n        // Toolbar display must not be none in order to calculate width and height.\n        this.toolbar.classList.toggle('d-none', false);\n        this.toolbar.style.maxWidth = window.innerWidth - OFFSET * 2 + 'px';\n        const sel = this.document.getSelection();\n        const range = sel.getRangeAt(0);\n        const isSelForward =\n            sel.anchorNode === range.startContainer && sel.anchorOffset === range.startOffset;\n        const startRect = range.startContainer.getBoundingClientRect && range.startContainer.getBoundingClientRect();\n        const selRect = range.getBoundingClientRect();\n        // In some undetermined circumstance in chrome, the selection rect is\n        // wrongly defined and result with all the values for x, y, width, and\n        // height to be 0. In that case, use the rect of the startContainer if\n        // possible.\n        const isSelectionPotentiallyBugged = [selRect.x, selRect.y, selRect.width, selRect.height].every( x => x === 0 );\n        let correctedSelectionRect = isSelectionPotentiallyBugged && startRect ? startRect : selRect;\n        const selAncestors = [sel.anchorNode, ...ancestors(sel.anchorNode, this.editable)];\n        // If a table is selected, we want to position the toolbar in function\n        // of the table, rather than follow the DOM selection.\n        const selectedTable = selAncestors.find(node => node.classList && node.classList.contains('o_selected_table'));\n        if (selectedTable) {\n            correctedSelectionRect = selectedTable.getBoundingClientRect();\n        }\n        const toolbarWidth = this.toolbar.offsetWidth;\n        const toolbarHeight = this.toolbar.offsetHeight;\n        const editorRect = this.editable.getBoundingClientRect();\n        const parentContextRect = this.options.getContextFromParentRect();\n        const scrollContainerRect = this.options.getScrollContainerRect();\n        const editorTopPos = Math.max(0, editorRect.top);\n        const scrollX = document.defaultView.scrollX;\n        const scrollY = document.defaultView.scrollY;\n\n        // Get left position.\n        let left = correctedSelectionRect.left + OFFSET;\n        // Ensure the toolbar doesn't overflow the editor on the left.\n        left = Math.max(OFFSET, left);\n        // Ensure the toolbar doesn't overflow the editor on the right.\n        left = Math.min(window.innerWidth - OFFSET - toolbarWidth, left);\n        // Offset left to compensate for parent context position (eg. Iframe).\n        const adjustedLeft = left + parentContextRect.left;\n        this.toolbar.style.left = scrollX + adjustedLeft + 'px';\n\n        // Get top position.\n        let top = correctedSelectionRect.top - toolbarHeight - OFFSET;\n        // Ensure the toolbar doesn't overflow the editor or scroll container on the top.\n        if (top < editorTopPos || top + parentContextRect.top - scrollContainerRect.top < OFFSET / 2) {\n            // Position the toolbar below the selection.\n            top = correctedSelectionRect.bottom + OFFSET;\n            isBottom = true;\n        }\n        // Offset top to compensate for parent context position (eg. Iframe).\n        top += parentContextRect.top;\n        this.toolbar.style.top = scrollY + top + 'px';\n\n        // Position the arrow.\n        let arrowLeftPos = (isSelForward && !isSelectionPotentiallyBugged ? correctedSelectionRect.right : correctedSelectionRect.left) - left - OFFSET;\n        // Ensure the arrow doesn't overflow the toolbar on the left.\n        arrowLeftPos = Math.max(OFFSET, arrowLeftPos);\n        // Ensure the arrow doesn't overflow the toolbar on the right.\n        arrowLeftPos = Math.min(toolbarWidth - OFFSET - 20, arrowLeftPos);\n        this.toolbar.style.setProperty('--arrow-left-pos', arrowLeftPos + 'px');\n        const arrowTopPos = isBottom ? -17 : toolbarHeight - 3;\n        this.toolbar.classList.toggle('toolbar-bottom', isBottom);\n        this.toolbar.style.setProperty('--arrow-top-pos', arrowTopPos + 'px');\n\n        // Calculate toolbar dimensions including the arrow.\n        const toolbarTop = Math.min(top , top + arrowTopPos);\n        const toolbarBottom = Math.max(top + toolbarHeight, top + arrowTopPos + 20);\n\n        // Hide toolbar if it overflows the scroll container.\n        const distToScrollContainer = Math.min(toolbarTop - scrollContainerRect.top,\n                                                scrollContainerRect.bottom - toolbarBottom);\n        this.toolbar.classList.toggle('d-none', distToScrollContainer < OFFSET / 2);\n    }\n\n    // PASTING / DROPPING\n\n    /**\n     * Prepare clipboard data (text/html) for safe pasting into the editor.\n     *\n     * @private\n     * @param {string} clipboardData\n     * @returns {Element}\n     */\n    _prepareClipboardData(clipboardData) {\n        const container = document.createElement('fake-container');\n        container.append(parseHTML(this.document, clipboardData));\n\n        for (const tableElement of container.querySelectorAll('table')) {\n            tableElement.classList.add('table', 'table-bordered', 'o_table');\n        }\n\n        const progId = container.querySelector('meta[name=\"ProgId\"]')\n        if (progId && progId.content === 'Excel.Sheet') {\n            // Microsoft Excel keeps table style in a <style> tag with custom\n            // classes. The following lines parse that style and apply it to the\n            // style attribute of <td> tags with matching classes.\n            const xlStylesheet = container.querySelector('style');\n            const xlNodes = container.querySelectorAll(\"[class*=xl],[class*=font]\");\n            for (const xlNode of xlNodes) {\n                for (const xlClass of xlNode.classList) {\n                    // Regex captures a CSS rule definition for that xlClass.\n                    const xlStyle = xlStylesheet.textContent.match(`.${xlClass}[^\\{]*\\{(?<xlStyle>[^\\}]*)\\}`)\n                        .groups.xlStyle.replace('background:', 'background-color:');\n                    xlNode.setAttribute('style', xlNode.style.cssText + ';' + xlStyle)\n                }\n            }\n        }\n\n        for (const child of [...container.childNodes]) {\n            this._cleanForPaste(child);\n        }\n        // Force inline nodes at the root of the container into separate P\n        // elements. This is a tradeoff to ensure some features that rely on\n        // nodes having a parent (e.g. convert to list, title, etc.) can work\n        // properly on such nodes without having to actually handle that\n        // particular case in all of those functions. In fact, this case cannot\n        // happen on a new document created using this editor, but will happen\n        // instantly when editing a document that was created from Etherpad.\n        const fragment = document.createDocumentFragment();\n        let p = document.createElement('p');\n        for (const child of [...container.childNodes]) {\n            if (isBlock(child)) {\n                if (p.childNodes.length > 0) {\n                    fragment.appendChild(p);\n                    p = document.createElement('p');\n                }\n                fragment.appendChild(child);\n            } else {\n                p.appendChild(child);\n            }\n\n            if (p.childNodes.length > 0) {\n                fragment.appendChild(p);\n            }\n        }\n\n        // Split elements containing <br> into seperate elements for each line.\n        const brs = fragment.querySelectorAll('br');\n        for (const br of brs) {\n            const block = closestBlock(br);\n            if (\n                ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(block.nodeName) &&\n                !block.closest('li')\n            ) {\n                // A linebreak at the beginning of a block is an empty line.\n                const isEmptyLine = block.firstChild.nodeName === 'BR';\n                // Split blocks around it until only the BR remains in the\n                // block.\n                const remainingBrContainer = splitAroundUntil(br, block);\n                // Remove the container unless it represented an empty line.\n                if (!isEmptyLine) {\n                    remainingBrContainer.remove();\n                }\n            }\n        }\n        return fragment;\n    }\n    /**\n     * Clean a node for safely pasting. Cleaning an element involves unwrapping\n     * its contents if it's an illegal (blacklisted or not whitelisted) element,\n     * or removing its illegal attributes and classes.\n     *\n     * @param {Node} node\n     */\n    _cleanForPaste(node) {\n        if (\n            !this._isWhitelisted(node) ||\n            this._isBlacklisted(node) ||\n            // Google Docs have their html inside a B tag with custom id.\n            node.id && node.id.startsWith('docs-internal-guid')\n        ) {\n            if (!node.matches || node.matches(CLIPBOARD_BLACKLISTS.remove.join(','))) {\n                node.remove();\n            } else {\n                // Unwrap the illegal node's contents.\n                for (const unwrappedNode of unwrapContents(node)) {\n                    this._cleanForPaste(unwrappedNode);\n                }\n            }\n        } else if (node.nodeType !== Node.TEXT_NODE) {\n            if (node.nodeName === 'TD') {\n                if (node.hasAttribute('bgcolor') && !node.style['background-color']) {\n                    node.style['background-color'] = node.getAttribute('bgcolor');\n                }\n            } else if (node.nodeName === 'FONT') {\n                // FONT tags have some style information in custom attributes,\n                // this maps them to the style attribute.\n                if (node.hasAttribute('color') && !node.style['color']) {\n                    node.style['color'] = node.getAttribute('color');\n                }\n                if (node.hasAttribute('size') && !node.style['font-size']) {\n                    // FONT size uses non-standard numeric values.\n                    node.style['font-size'] = +node.getAttribute('size') + 10 + 'pt';\n                }\n            } else if (['S', 'U'].includes(node.nodeName) && node.childNodes.length === 1 && node.firstChild.nodeName === 'FONT') {\n                // S and U tags sometimes contain FONT tags. We prefer the\n                // strike to adopt the style of the text, so we invert them.\n                const fontNode = node.firstChild;\n                node.before(fontNode);\n                node.replaceChildren(...fontNode.childNodes);\n                fontNode.appendChild(node);\n            } else if (node.nodeName === 'IMG' && node.getAttribute('aria-roledescription') === 'checkbox') {\n                const checklist = node.closest('ul');\n                const closestLi = node.closest('li');\n                if (checklist) {\n                    checklist.classList.add('o_checklist');\n                    if (node.getAttribute('alt') === 'checked') {\n                        closestLi.classList.add('o_checked');\n                    }\n                    node.remove();\n                    node = checklist;\n                }\n            }\n            // Remove all illegal attributes and classes from the node, then\n            // clean its children.\n            for (const attribute of [...node.attributes]) {\n                // Keep allowed styles on nodes with allowed tags.\n                if (CLIPBOARD_WHITELISTS.styledTags.includes(node.nodeName) && attribute.name === 'style') {\n                    node.removeAttribute(attribute.name);\n                    if (['SPAN', 'FONT'].includes(node.tagName)) {\n                        for (const unwrappedNode of unwrapContents(node)) {\n                            this._cleanForPaste(unwrappedNode);\n                        }\n                    }\n                } else if (!this._isWhitelisted(attribute)) {\n                    node.removeAttribute(attribute.name);\n                }\n\n            }\n            for (const klass of [...node.classList]) {\n                if (!this._isWhitelisted(klass)) {\n                    node.classList.remove(klass);\n                }\n            }\n            for (const child of [...node.childNodes]) {\n                this._cleanForPaste(child);\n            }\n        }\n    }\n    /**\n     * Return true if the given attribute, class or node is whitelisted for\n     * pasting, false otherwise.\n     *\n     * @private\n     * @param {Attr | string | Node} item\n     * @returns {boolean}\n     */\n    _isWhitelisted(item) {\n        if (item instanceof Attr) {\n            return CLIPBOARD_WHITELISTS.attributes.includes(item.name);\n        } else if (typeof item === 'string') {\n            return CLIPBOARD_WHITELISTS.classes.some(okClass =>\n                okClass instanceof RegExp ? okClass.test(item) : okClass === item,\n            );\n        } else {\n            return (\n                item.nodeType === Node.TEXT_NODE ||\n                (\n                    item.matches &&\n                    item.matches(CLIPBOARD_WHITELISTS.nodes)\n                )\n            );\n        }\n    }\n    /**\n     * Return true if the given node is blacklisted for pasting, false\n     * otherwise.\n     *\n     * @private\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    _isBlacklisted(node) {\n        return (\n            node.nodeType !== Node.TEXT_NODE &&\n            node.matches([].concat(...Object.values(CLIPBOARD_BLACKLISTS)).join(','))\n        );\n    }\n    _safeSetAttribute(node, attributeName, attributeValue) {\n        const clone = document.createElement(node.tagName);\n        clone.setAttribute(attributeName, attributeValue);\n        DOMPurify.sanitize(clone, { IN_PLACE: true });\n        if (clone.hasAttribute(attributeName)) {\n            node.setAttribute(attributeName, clone.getAttribute(attributeName));\n        } else {\n            node.removeAttribute(attributeName);\n        }\n    }\n\n    disableAvatarForElement(element) {\n        this.enableAvatars();\n        for (const info of this._collabSelectionInfos.values()) {\n            if (info.avatarTargetElement === element) {\n                if (!info.avatarElement.classList.contains('opacity-0')) {\n                    info.avatarElement.classList.add('opacity-0');\n                }\n            }\n        }\n    }\n    enableAvatars() {\n        for (const element of this._avatarsContainer.querySelectorAll('.oe-collaboration-caret-avatar.opacity-0')) {\n            element.classList.remove('opacity-0');\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    _onBeforeInput(ev) {\n        this._lastBeforeInputType = ev.inputType;\n        // For chrome when we have this structure\n        // <div contenteditable=\"true\">\n        //     <ul>\n        //         <div contenteditable=\"false\">\n        //             <div contenteditable=\"true\">\n        //                 <p>\n        //                     text[]\n        //                 </p>\n        //             </div>\n        //         </div>\n        //     </ul>\n        // </div>\n        // clicking on `enter` doesn't works as expected and the `input` event is never\n        // triggered, to solve the problem we can use this hack where we stop the propagation\n        // and trigger manually the input event to simulate the correct flow.\n        if (ev.inputType ===\"insertParagraph\") {\n            const banner = closestElement(ev.target, \".o_editor_banner\");\n            if (banner && closestElement(banner, \"ul, ol\")) {\n                ev.preventDefault();\n                this._onInput(ev);\n                return;\n            }\n        }\n    }\n\n    /**\n     * If backspace/delete input, rollback the operation and handle the\n     * operation ourself. Needed for mobile, used for desktop for consistency.\n     *\n     * @private\n     */\n    _onInput(ev) {\n        // See if the Powerbox should be opened. If so, it will open at the end.\n        const newSelection = this.document.getSelection();\n        if (newSelection.anchorNode && isProtected(newSelection.anchorNode)) {\n            return;\n        }\n        const shouldOpenPowerbox = newSelection.isCollapsed && newSelection.rangeCount &&\n            ev.data === '/' && this.powerbox && !this.powerbox.isOpen &&\n            (!this.options.getPowerboxElement || !!this.options.getPowerboxElement());\n        if (shouldOpenPowerbox) {\n            // Undo input '/'.\n            this._powerboxBeforeStepIndex = this._historySteps.length - 1;\n        }\n        // Record the selection position that was computed on keydown or before\n        // contentEditable execCommand (whatever preceded the 'input' event)\n        this._recordHistorySelection(true);\n        const selection = this._currentStep.selection;\n        const { anchorNodeOid, anchorOffset, focusNodeOid, focusOffset } = selection || {};\n        const wasCollapsed =\n            !selection || (focusNodeOid === anchorNodeOid && focusOffset === anchorOffset);\n        // Sometimes google chrome wrongly triggers an input event with `data`\n        // being `null` on `deleteContentForward` `insertParagraph`. Luckily,\n        // chrome provide the proper signal with the event `beforeinput`.\n        const isChromeDeleteforward =\n            ev.inputType === 'insertText' &&\n            ev.data === null &&\n            this._lastBeforeInputType === 'deleteContentForward';\n        const isChromeInsertParagraph =\n            ev.inputType === 'insertText' &&\n            ev.data === null &&\n            this._lastBeforeInputType === 'insertParagraph';\n        const isCompositionEvent =\n            ev.inputType === \"insertCompositionText\" ||\n            (ev.inputType === \"insertText\" &&\n                (this.keyboardType === KEYBOARD_TYPES.VIRTUAL ||\n                    this.isMobile));\n        if (isCompositionEvent) {\n            this._fromCompositionText = true;\n        }\n        if (this.keyboardType === KEYBOARD_TYPES.PHYSICAL || !wasCollapsed) {\n            // Most deletion cases in complex HTML like Bootstrap etc can end\n            // with a wrong result if done by the contenteditable itself.\n            // Intervene as soon as the selection was not collapsed, except\n            // while composing. In that case the composition should be left\n            // alone unless the selection was spanning different blocks.\n            const anchorNode = this.idFind(anchorNodeOid);\n            const focusNode = this.idFind(focusNodeOid);\n            const wasSelectingAcrossDifferentBlocks =\n                anchorNode &&\n                focusNode &&\n                closestBlock(anchorNode) !== closestBlock(focusNode);\n            const shouldInterveneForDeletion =\n                !this._fromCompositionText ||\n                wasSelectingAcrossDifferentBlocks;\n            if (ev.inputType === 'deleteContentBackward' && shouldInterveneForDeletion) {\n                this._compositionStep();\n                this.historyRollback();\n                ev.preventDefault();\n                this._applyCommand('oDeleteBackward');\n            } else if (\n                (ev.inputType === 'deleteContentForward' || isChromeDeleteforward) &&\n                shouldInterveneForDeletion\n            ) {\n                this._compositionStep();\n                this.historyRollback();\n                ev.preventDefault();\n                this._applyCommand('oDeleteForward');\n            } else if (\n                (['insertParagraph', 'insertLineBreak'].includes(ev.inputType) || isChromeInsertParagraph)\n            ) {\n                this._compositionStep();\n                this.historyRollback();\n                ev.preventDefault();\n                this._handleAutomaticLinkInsertion();\n                getDeepRange(this.editable, { select: true, correctTripleClick: true });\n                // To remove only the anchor cell's content when multiple table cells are selected on Enter,\n                // we need to change the selection to focus only on the anchor cell. This can't be done in `oEnter`\n                // because `deleteRange` responsible for removing content, execute before `oEnter` in `_applyRawCommand`.\n                // Therefore, the anchor cell selection should be adjusted before `_applyRawCommand` is called.\n                const anchorTD = closestElement(newSelection.anchorNode, '.o_selected_td');\n                const focusTD = closestElement(newSelection.focusNode, '.o_selected_td');\n                if (anchorTD && focusTD && closestElement(anchorTD, 'table') === closestElement(focusTD, 'table')) {\n                    this.deselectTable();\n                    setSelection(anchorTD.firstChild, 0, anchorTD.lastChild, nodeSize(anchorTD.lastChild));\n                }\n                if (ev.inputType === 'insertLineBreak' || this._applyCommand('oEnter') === UNBREAKABLE_ROLLBACK_CODE) {\n                    this._applyCommand('oShiftEnter');\n                }\n            } else if (['insertText', 'insertCompositionText'].includes(ev.inputType)) {\n                const selection = this.document.getSelection();\n                // Unit tests events are not trusted by the browser,\n                // the insertText has to be done manualy.\n                const isUnitTests = !ev.isTrusted && this.testMode;\n                // we cannot trust the browser to keep the selection inside empty tags.\n                const latestSelectionInsideEmptyTag = this._isLatestComputedSelectionInsideEmptyInlineTag();\n                const shouldInterveneForInsertion = !wasCollapsed && shouldInterveneForDeletion;\n                if (\n                    shouldInterveneForInsertion ||\n                    latestSelectionInsideEmptyTag ||\n                    isUnitTests\n                ) {\n                    ev.preventDefault();\n                    if (!isUnitTests) {\n                        // First we need to undo the character inserted by the browser.\n                        // Since the unit test Event is not trusted by the browser, we don't\n                        // need to undo the char during the unit tests.\n                        // @see https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted\n                        this._protect(() => this._applyRawCommand('oDeleteBackward'));\n                    }\n                    if (latestSelectionInsideEmptyTag) {\n                        // Restore the selection inside the empty Element.\n                        const selectionBackup = this._latestComputedSelection;\n                        setSelection(selectionBackup.anchorNode, selectionBackup.anchorOffset);\n                    }\n                    // When the spellcheck of Safari modify text, ev.data is\n                    // null and the string can be found within ev.dataTranser.\n                    insertText(selection, ev.data === null ? ev.dataTransfer.getData('text/plain') : ev.data);\n                    selection.collapseToEnd();\n                }\n                if (ev.data === '`' && !closestElement(selection.anchorNode, 'code')) {\n                    // We just inserted a backtick, check if there was another\n                    // one in the text.\n                    const range = getDeepRange(this.editable);\n                    let textNode = range.startContainer;\n                    let offset = range.startOffset;\n                    let sibling = textNode.previousSibling;\n                    while (sibling && sibling.nodeType === Node.TEXT_NODE) {\n                        offset += sibling.textContent.length;\n                        sibling.textContent += textNode.textContent;\n                        textNode.remove();\n                        textNode = sibling;\n                        sibling = textNode.previousSibling;\n                    }\n                    sibling = textNode.nextSibling;\n                    while (sibling && sibling.nodeType === Node.TEXT_NODE) {\n                        textNode.textContent += sibling.textContent;\n                        sibling.remove();\n                        sibling = textNode.nextSibling;\n                    }\n                    setSelection(textNode, offset);\n                    const textHasTwoTicks = /`.*`/.test(textNode.textContent);\n                    if (textHasTwoTicks) {\n                        this.historyStep();\n                        const insertedBacktickIndex = offset - 1;\n                        const textBeforeInsertedBacktick = textNode.textContent.substring(0, insertedBacktickIndex - 1);\n                        let startOffset, endOffset;\n                        const isClosingForward = textBeforeInsertedBacktick.includes('`');\n                        if (isClosingForward) {\n                            // There is a backtick before the new backtick.\n                            startOffset = textBeforeInsertedBacktick.lastIndexOf('`');\n                            endOffset = insertedBacktickIndex;\n                        } else {\n                            // There is a backtick after the new backtick.\n                            const textAfterInsertedBacktick = textNode.textContent.substring(offset);\n                            startOffset = insertedBacktickIndex;\n                            endOffset = offset + textAfterInsertedBacktick.indexOf('`');\n                        }\n                        // Split around the backticks if needed so text starts\n                        // and ends with a backtick.\n                        if (endOffset && endOffset < textNode.textContent.length) {\n                            splitTextNode(textNode, endOffset + 1, DIRECTIONS.LEFT);\n                        }\n                        if (startOffset) {\n                            splitTextNode(textNode, startOffset);\n                        }\n                        // Remove ticks.\n                        textNode.textContent = textNode.textContent.substring(1, textNode.textContent.length - 1);\n                        // Insert code element.\n                        const codeElement = this.document.createElement('code');\n                        codeElement.classList.add('o_inline_code');\n                        textNode.before(codeElement);\n                        codeElement.append(textNode);\n                        if (!codeElement.previousSibling || codeElement.previousSibling.nodeType !== Node.TEXT_NODE) {\n                            codeElement.before(document.createTextNode('\\u200B'));\n                        }\n                        if (isClosingForward) {\n                            // Move selection out of code element.\n                            codeElement.after(document.createTextNode('\\u200B'));\n                            setSelection(codeElement.nextSibling, 1);\n                        } else {\n                            setSelection(codeElement.firstChild, 0);\n                        }\n                    }\n                }\n                this.historyStep();\n            } else {\n                this.historyStep();\n            }\n        }\n        if (!isCompositionEvent) {\n            this._fromCompositionText = false;\n        }\n        if (shouldOpenPowerbox) {\n            this._isPowerboxOpenOnInput = true;\n            this.powerbox.open();\n        }\n    }\n\n    _onClipboardCut(clipboardEvent) {\n        this._onClipboardCopy(clipboardEvent);\n        this._recordHistorySelection();\n        this.deleteRange();\n        this.historyStep();\n    }\n    _onClipboardCopy(clipboardEvent) {\n        if (!this.isSelectionInEditable()) {\n            return;\n        }\n        clipboardEvent.preventDefault();\n        const selection = this.document.getSelection();\n        const range = selection.getRangeAt(0);\n        let rangeContent = range.cloneContents();\n        if (!rangeContent.hasChildNodes()) {\n            return;\n        }\n        // Repair the copied range.\n        if (rangeContent.firstChild.nodeName === 'LI') {\n            const list = range.commonAncestorContainer.cloneNode();\n            list.replaceChildren(...rangeContent.childNodes);\n            rangeContent = list;\n        }\n        if (rangeContent.firstChild.nodeName === 'TR' || rangeContent.firstChild.nodeName === 'TD') {\n            // We enter this case only if selection is within single table.\n            const table = closestElement(range.commonAncestorContainer, 'table');\n            const tableClone = table.cloneNode(true);\n            // A table is considered fully selected if it is nested inside a\n            // cell that is itself selected, or if all its own cells are\n            // selected.\n            const isTableFullySelected =\n                table.parentElement && !!closestElement(table.parentElement, 'td.o_selected_td') ||\n                [...table.querySelectorAll('td')]\n                    .filter(td => closestElement(td, 'table') === table)\n                    .every(td => td.classList.contains('o_selected_td'));\n            if (!isTableFullySelected) {\n                for (const td of tableClone.querySelectorAll('td:not(.o_selected_td)')) {\n                    if (closestElement(td, 'table') === tableClone) { // ignore nested\n                        td.remove();\n                    }\n                }\n                const trsWithoutTd = Array.from(tableClone.querySelectorAll('tr')).filter(row => !row.querySelector('td'));\n                for (const tr of trsWithoutTd) {\n                    if (closestElement(tr, 'table') === tableClone) { // ignore nested\n                        tr.remove();\n                    }\n                }\n            }\n            // If it is fully selected, clone the whole table rather than\n            // just its rows.\n            rangeContent = tableClone;\n        }\n        const table = closestElement(range.startContainer, 'table');\n        if (rangeContent.firstChild.nodeName === 'TABLE' && table) {\n            // Make sure the full leading table is copied.\n            rangeContent.firstChild.after(table.cloneNode(true));\n            rangeContent.firstChild.remove();\n        }\n        if (rangeContent.lastChild.nodeName === 'TABLE') {\n            // Make sure the full trailing table is copied.\n            rangeContent.lastChild.before(closestElement(range.endContainer, 'table').cloneNode(true));\n            rangeContent.lastChild.remove();\n        }\n\n        const commonAncestorElement = closestElement(range.commonAncestorContainer);\n        if (commonAncestorElement && !isBlock(rangeContent.firstChild)) {\n            // Get the list of ancestor elements starting from the provided\n            // commonAncestorElement up to the block-level element.\n            const blockEl = closestBlock(commonAncestorElement);\n            const ancestorsList = [commonAncestorElement, ...ancestors(commonAncestorElement, blockEl)];\n            // Wrap rangeContent with clones of their ancestors to keep the styles.\n            for (const ancestor of ancestorsList) {\n                // Keep the formatting by keeping inline ancestors and paragraph\n                // related ones like headings etc.\n                if (!isBlock(ancestor) || paragraphRelatedElements.includes(ancestor.nodeName)) {\n                    const clone = ancestor.cloneNode();\n                    clone.append(...rangeContent.childNodes);\n                    rangeContent.appendChild(clone);\n                }\n            }\n        }\n        const dataHtmlElement = document.createElement('data');\n        dataHtmlElement.append(rangeContent);\n        const odooHtml = dataHtmlElement.innerHTML;\n        const odooText = selection.toString();\n        clipboardEvent.clipboardData.setData('text/plain', odooText);\n        clipboardEvent.clipboardData.setData('text/html', odooHtml);\n        clipboardEvent.clipboardData.setData('text/odoo-editor', odooHtml);\n    }\n    /**\n     * @private\n     */\n    _onKeyDown(ev) {\n        const selection = this.document.getSelection();\n        if (selection.anchorNode && isProtected(selection.anchorNode)) {\n            return;\n        }\n        this.keyboardType =\n            ev.key === 'Unidentified' ? KEYBOARD_TYPES.VIRTUAL : KEYBOARD_TYPES.PHYSICAL;\n        this._currentKeyPress = ev.key;\n        // If the pressed key has a printed representation, the returned value\n        // is a non-empty Unicode character string containing the printable\n        // representation of the key. In this case, call `deleteRange` before\n        // inserting the printed representation of the character.\n        if (/^.$/u.test(ev.key) && !ev.ctrlKey && !ev.metaKey && (isMacOS() || !ev.altKey)) {\n            const selection = this.document.getSelection();\n            if (selection && !selection.isCollapsed && this.isSelectionInEditable(selection)) {\n                this.deleteRange(selection);\n            }\n        }\n        if (ev.key === 'Backspace') {\n            // backspace\n            const selection = this.document.getSelection();\n            if (!ev.ctrlKey && !ev.metaKey) {\n                if (selection.isCollapsed && !this._fromCompositionText) {\n                    // We need to hijack it because firefox doesn't trigger a\n                    // deleteBackward input event with a collapsed selection in\n                    // front of a contentEditable=\"false\" (eg: font awesome).\n                    ev.preventDefault();\n                    this._applyCommand('oDeleteBackward');\n                }\n            } else if (selection.isCollapsed && selection.anchorNode) {\n                const anchor = (selection.anchorNode.nodeType !== Node.TEXT_NODE && selection.anchorOffset) ?\n                    selection.anchorNode[selection.anchorOffset] : selection.anchorNode;\n                const element = closestBlock(anchor);\n                if (isEmptyBlock(element) && element.parentElement.children.length === 1) {\n                    // Prevent removing a <p> if it is the last element of its\n                    // parent.\n                    ev.preventDefault();\n                    if (element.tagName !== 'P') {\n                        // Replace an empty block which is not a <p> by a <p>\n                        const paragraph = this.document.createElement('P');\n                        const br = this.document.createElement('BR');\n                        paragraph.append(br);\n                        element.before(paragraph);\n                        const result = this._protect(() => element.remove());\n                        if (result !== UNBREAKABLE_ROLLBACK_CODE && result !== UNREMOVABLE_ROLLBACK_CODE) {\n                            setCursorStart(paragraph);\n                            this.historyStep();\n                        }\n                    }\n                }\n            }\n        } else if (ev.key === 'Tab') {\n            // Tab\n            const tabHtml = '<span class=\"oe-tabs\" contenteditable=\"false\">\\u0009</span>\\u200B';\n            const sel = this.document.getSelection();\n            const closestTableOrLi = closestElement(sel.anchorNode, 'table, li');\n            if (closestTableOrLi && closestTableOrLi.nodeName === 'TABLE') {\n                this._onTabulationInTable(ev);\n            } else if (!ev.shiftKey && sel.isCollapsed && !closestTableOrLi) {\n                // Indent text (collapsed selection).\n                this.execCommand('insert', parseHTML(this.document, tabHtml));\n            } else {\n                // Indent/outdent selection.\n                // Split traversed nodes into list items and the rest.\n                const listItems = new Set();\n                const nonListItems = new Set();\n                for (const node of getTraversedNodes(this.editable)) {\n                    const closestLi = closestElement(node, 'li');\n                    const target = closestLi || node;\n                    if (!(target.querySelector && target.querySelector('li'))) {\n                        if (closestLi) {\n                            listItems.add(closestLi);\n                        } else {\n                            nonListItems.add(node);\n                        }\n                    }\n                }\n\n                const restore = preserveCursor(this.document);\n\n                // Indent/outdent list items.\n                for (const listItem of listItems) {\n                    if (ev.shiftKey) {\n                        listItem.oShiftTab(0);\n                    } else {\n                        listItem.oTab(0);\n                    }\n                }\n\n                // Indent/outdent the rest.\n                if (ev.shiftKey) {\n                    const editorTabs = new Set(\n                        [...nonListItems].map(node => {\n                            const block = closestBlock(node);\n                            return descendants(block).find(child => isEditorTab(child));\n                        }).filter(node => (\n                            // Filter out tabs preceded by visible text.\n                            node && !getAdjacentPreviousSiblings(node).some(sibling => (\n                                sibling.nodeType === Node.TEXT_NODE && !/^[\\u200B\\s]*$/.test(sibling.textContent)\n                            ))\n                    )));\n                    for (const tab of editorTabs) {\n                        let { anchorNode, anchorOffset, focusNode, focusOffset } = sel;\n                        const updateAnchor = anchorNode === tab.nextSibling;\n                        const updateFocus = focusNode === tab.nextSibling;\n                        let zwsRemoved = 0;\n                        while (tab.nextSibling && tab.nextSibling.nodeType === Node.TEXT_NODE && tab.nextSibling.textContent.startsWith('\\u200B')) {\n                            splitTextNode(tab.nextSibling, 1, DIRECTIONS.LEFT);\n                            tab.nextSibling.remove();\n                            zwsRemoved++;\n                        }\n                        if (updateAnchor || updateFocus) {\n                            setSelection(\n                                updateAnchor ? tab.nextSibling : anchorNode,\n                                updateAnchor ? Math.max(0, anchorOffset - zwsRemoved) : anchorOffset,\n                                updateFocus ? tab.nextSibling : focusNode,\n                                updateFocus ? Math.max(0, focusOffset - zwsRemoved) : focusOffset\n                            );\n                        }\n                        tab.remove();\n                    };\n                } else {\n                    const tab = parseHTML(this.document, tabHtml);\n                    for (const block of new Set([...nonListItems].map(node => closestBlock(node)).filter(node => node))) {\n                        block.prepend(tab.cloneNode(true));\n                    }\n                    restore();\n                }\n                this.historyStep();\n            }\n            ev.preventDefault();\n            ev.stopPropagation();\n        } else if (ev.key === ' ') {\n            this._handleAutomaticLinkInsertion();\n        } else if (IS_KEYBOARD_EVENT_UNDO(ev)) {\n            // Ctrl-Z\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.historyUndo();\n        } else if (IS_KEYBOARD_EVENT_REDO(ev)) {\n            // Ctrl-Y\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.historyRedo();\n        } else if (IS_KEYBOARD_EVENT_BOLD(ev)) {\n            // Ctrl-B\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.execCommand('bold');\n        } else if (IS_KEYBOARD_EVENT_ITALIC(ev)) {\n            // Ctrl-I\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.execCommand('italic');\n        } else if (IS_KEYBOARD_EVENT_UNDERLINE(ev)) {\n            // Ctrl-U\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.execCommand('underline');\n        } else if (IS_KEYBOARD_EVENT_STRIKETHROUGH(ev)) {\n            // Ctrl-5 / Ctrl-shift-(\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.execCommand('strikeThrough');\n        } else if (IS_KEYBOARD_EVENT_LEFT_ARROW(ev) || IS_KEYBOARD_EVENT_RIGHT_ARROW(ev)) {\n            const side = ev.key === 'ArrowLeft' ? 'previous' : 'next';\n            const { anchorNode, anchorOffset } = this.document.getSelection() || {};\n            // If the selection is at the edge of a code element at the edge of\n            // its parent, make sure there's a zws next to it, where the\n            // selection can then be set.\n            const codeElement = anchorNode && closestElement(anchorNode, 'code');\n            const siblingProperty = `${side}Sibling`;\n            if (\n                codeElement?.classList.contains('o_inline_code') &&\n                (\n                    (side === 'previous' && !anchorOffset) ||\n                    (side === 'next' && anchorOffset === nodeSize(anchorNode))\n                ) &&\n                codeElement[siblingProperty]?.nodeType !== Node.TEXT_NODE &&\n                !isZWS(codeElement[siblingProperty])\n            ) {\n                codeElement[side === 'previous' ? 'before' : 'after'](document.createTextNode('\\u200B'));\n                setSelection(codeElement[siblingProperty], side === 'previous' ? 0 : 1);\n            } else {\n                // Move selection if adjacent character is zero-width space.\n                let didSkipFeff = false;\n                let adjacentCharacter = getAdjacentCharacter(this.editable, side);\n                let previousSelection; // Is used to stop if `modify` doesn't move the selection.\n                const hasSelectionChanged = (oldSelection = {}) => {\n                    const newSelection = this.document.getSelection();\n                    return (\n                        oldSelection.anchorNode !== newSelection.anchorNode ||\n                        oldSelection.anchorOffset !== newSelection.anchorOffset ||\n                        oldSelection.focusNode !== newSelection.focusNode ||\n                        oldSelection.focusOffset !== newSelection.focusOffset\n                    );\n                };\n                while (ZERO_WIDTH_CHARS.includes(adjacentCharacter) && hasSelectionChanged(previousSelection)) {\n                    const selection = this.document.getSelection();\n                    previousSelection = {...selection};\n                    selection.modify(\n                        ev.shiftKey ? 'extend' : 'move',\n                        side === 'previous' ? 'backward' : 'forward',\n                        'character',\n                    );\n                    didSkipFeff = didSkipFeff || adjacentCharacter === '\\ufeff';\n                    adjacentCharacter = getAdjacentCharacter(this.editable, side);\n                }\n                if (didSkipFeff && !ev.shiftKey) {\n                    // If moving, just skip the zws then stop. Otherwise, do as if\n                    // they weren't there.\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    _onSelectionChange() {\n        const currentKeyPress = this._currentKeyPress;\n        delete this._currentKeyPress;\n        const selection = this.document.getSelection();\n        if (!selection) {\n            // Because the `selectionchange` event is async, the selection can\n            // be null if the node has been removed between the moment the\n            // selection was moved and the moment the event is triggered.\n            return;\n        }\n        const anchorNode = selection.anchorNode;\n        // Correct cursor if at editable root.\n        if (\n            selection.isCollapsed &&\n            anchorNode === this.editable &&\n            !this.options.allowInlineAtRoot\n        ) {\n            this._fixSelectionOnEditableRoot(selection, currentKeyPress);\n            // The _onSelectionChange handler is going to be triggered again.\n            return;\n        }\n        let appliedCustomSelection = false;\n        if (selection.rangeCount && selection.getRangeAt(0)) {\n            appliedCustomSelection = this._handleSelectionInTable();\n            if (!appliedCustomSelection) {\n                this.deselectTable();\n            }\n        }\n        const isSelectionInEditable = this.isSelectionInEditable(selection);\n        if (!appliedCustomSelection) {\n            this._updateToolbar(!selection.isCollapsed && isSelectionInEditable);\n        }\n        if (!isSelectionInEditable) {\n            return;\n        }\n        // When CTRL+A in the editor, sometimes the browser use the editable\n        // element as an anchor & focus node. This is an issue for the commands\n        // and the toolbar so we need to fix the selection to be based on the\n        // editable children. Calling `getDeepRange` ensure the selection is\n        // limited to the editable.\n        if (\n            selection.anchorNode === this.editable &&\n            selection.focusNode === this.editable &&\n            selection.anchorOffset === 0 &&\n            selection.focusOffset === [...this.editable.childNodes].length\n        ) {\n            getDeepRange(this.editable, {select: true});\n            // The selection is changed in `getDeepRange` and will therefore\n            // re-trigger the _onSelectionChange.\n            return;\n        }\n        this._resetLinkInSelection();\n        // Compute the current selection on selectionchange but do not record it. Leave\n        // that to the command execution or the 'input' event handler.\n        this._computeHistorySelection();\n\n        if (this._currentMouseState === 'mouseup') {\n            this._fixFontAwesomeSelection();\n        }\n        if (\n            selection.rangeCount &&\n            selection.getRangeAt(0) &&\n            this.options.onCollaborativeSelectionChange\n        ) {\n            this.options.onCollaborativeSelectionChange(this.getCurrentCollaborativeSelection());\n        }\n    }\n\n    /**\n     * Apply the o_link_in_selection class if the selection is in a single link,\n     * remove it otherwise.\n     */\n    _resetLinkInSelection() {\n        const selection = this.document.getSelection();\n        if (!selection) {\n            return;\n        }\n        const [anchorLink, focusLink] = [selection.anchorNode, selection.focusNode]\n            .map(node => closestElement(node, 'a:not(.btn)'));\n        const singleLinkInSelection = anchorLink === focusLink && anchorLink && isLinkEligibleForZwnbsp(this.editable, anchorLink) && anchorLink;\n        if (singleLinkInSelection) {\n            singleLinkInSelection.classList.add('o_link_in_selection');\n        }\n        for (const link of this.editable.querySelectorAll('.o_link_in_selection')) {\n            if (link !== singleLinkInSelection) {\n                link.classList.remove('o_link_in_selection');\n            }\n        };\n    }\n    /**\n     * Returns true if the current selection is inside the editable.\n     *\n     * @param {Object} [selection]\n     * @returns {boolean}\n     */\n    isSelectionInEditable(selection) {\n        selection = selection || this.document.getSelection();\n        if (selection && selection.anchorNode && selection.focusNode) {\n            const anchorElement = closestElement(selection.anchorNode);\n            const focusElement = closestElement(selection.focusNode);\n            return anchorElement && anchorElement.isContentEditable && focusElement && focusElement.isContentEditable &&\n                this.editable.contains(selection.anchorNode) && this.editable.contains(selection.focusNode);\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns true if the current selection is in at least one block Element\n     * relative to the current contentEditable root.\n     *\n     * @returns {boolean}\n     */\n    isSelectionInBlockRoot() {\n        const selection = this.document.getSelection();\n        let selectionInBlockRoot;\n        let currentNode = closestElement(selection.anchorNode);\n        while (\n            !currentNode.classList.contains('o_editable') &&\n            !currentNode.classList.contains('odoo-editor-editable') &&\n            !selectionInBlockRoot\n            ) {\n            selectionInBlockRoot = isBlock(currentNode);\n            currentNode = currentNode.parentElement;\n        }\n        return !!selectionInBlockRoot;\n    }\n\n    /**\n     * @private\n     */\n    _compositionStep() {\n        if (this._fromCompositionText) {\n            this._fromCompositionText = false;\n            this.sanitize();\n            this.historyStep();\n        }\n    }\n\n    getCurrentCollaborativeSelection() {\n        const selection = this._latestComputedSelection || this._computeHistorySelection();\n        return {\n            selection: selection ? serializeSelection(selection) : {\n                anchorNodeOid: undefined,\n                anchorOffset: undefined,\n                focusNodeOid: undefined,\n                focusOffset: undefined,\n            },\n            color: this._collabSelectionColor,\n            clientId: this._collabClientId,\n            clientAvatarUrl: this._collabClientAvatarUrl,\n        };\n    }\n\n    clean() {\n        this.observerUnactive();\n        this.cleanForSave();\n        this.observerActive();\n    }\n\n    /**\n     * Initialize the provided element to be ready for edition.\n     */\n    initElementForEdition(element = this.editable) {\n        // Detect if the editable base element contain orphan inline nodes. If\n        // so we transform the base element HTML to put those orphans inside\n        // `<p>` containers.\n        const orphanInlineChildNodes = [...element.childNodes].find(\n            (n) => !isBlock(n) && (n.nodeType === Node.ELEMENT_NODE || n.textContent.trim() !== \"\")\n        );\n        if (orphanInlineChildNodes && !this.options.allowInlineAtRoot) {\n            const childNodes = [...element.childNodes];\n            const tempEl = document.createElement('temp-container');\n            let currentP = document.createElement('p');\n            currentP.style.marginBottom = '0';\n            do {\n                const node = childNodes.shift();\n                const nodeIsBlock = isBlock(node);\n                const nodeIsBR = node.nodeName === 'BR';\n                // Append to the P unless child is block or an unneeded BR.\n                if (!(nodeIsBlock || (nodeIsBR && currentP.childNodes.length))) {\n                    currentP.append(node);\n                }\n                // Break paragraphs on blocks and BR.\n                if (nodeIsBlock || nodeIsBR || childNodes.length === 0) {\n                    // Ensure we don't add an empty P or a P containing only\n                    // formating spaces that should not be visible.\n                    if (currentP.childNodes.length && currentP.innerHTML.trim() !== '') {\n                        tempEl.append(currentP);\n                    }\n                    currentP = currentP.cloneNode();\n                    // Append block children directly to the template.\n                    if (nodeIsBlock) {\n                        tempEl.append(node);\n                    }\n                }\n            } while (childNodes.length)\n            element.replaceChildren(...tempEl.childNodes);\n        }\n\n        // Flag elements with forced contenteditable=false.\n        // We need the flag to be able to leave the contentEditable\n        // at the end of the edition (see cleanForSave())\n        for (const el of element.querySelectorAll('[contenteditable=\"false\"]')) {\n            el.setAttribute('data-oe-keep-contenteditable', '');\n        }\n        // Flag elements .oe-tabs contenteditable=false.\n        for (const el of element.querySelectorAll('.oe-tabs')) {\n            el.setAttribute('contenteditable', 'false');\n        }\n    }\n\n    cleanForSave(element = this.editable) {\n        for (const hint of element.querySelectorAll('.oe-hint')) {\n            hint.classList.remove('oe-hint', 'oe-command-temporary-hint');\n            if (hint.classList.length === 0) {\n                hint.removeAttribute('class');\n            }\n            hint.removeAttribute('placeholder');\n        }\n        this._pluginCall('cleanForSave', [element]);\n\n        // Clean the zero-width spaces added by the `fillEmpty` function\n        // (flagged with the \"data-oe-zws-empty-inline\" attributes). Reverse the\n        // list to start from the deepest elements (for emptiness checks).\n        const allWhitespaceRegex = /^[\\s\\u200b]*$/;\n        for (const emptyElement of [...element.querySelectorAll('[data-oe-zws-empty-inline]')].reverse()) {\n            emptyElement.removeAttribute('data-oe-zws-empty-inline');\n            if (!allWhitespaceRegex.test(emptyElement.textContent)) {\n                // The element has some meaningful text. Remove the ZWS in it.\n                cleanZWS(emptyElement);\n            } else if (!emptyElement.classList.length) {\n                // We only remove the empty element if it has no class, to\n                // ensure we don't break visual styles (in that case, its\n                // ZWS was kept to ensure the cursor can be placed in it).\n                emptyElement.remove();\n            }\n        }\n\n        // Clean all transient nodes\n        const protectedNodes = element.querySelectorAll('[data-oe-transient-content=\"true\"], [data-oe-transient-content=\"\"]');\n        for (const node of protectedNodes) {\n            node.replaceChildren();\n        }\n\n        sanitize(element);\n\n        // Remove o_link_in_selection class\n        for (const link of element.querySelectorAll('.o_link_in_selection')) {\n            link.classList.remove('o_link_in_selection');\n        }\n\n        // Remove all FEFF within a `prepareUpdate` to make sure to make <br>\n        // nodes visible if needed.\n        for (const node of descendants(element)) {\n            if (node.nodeType === Node.TEXT_NODE && node.textContent.includes('\\uFEFF')) {\n                const restore = prepareUpdate(...leftPos(node));\n                node.textContent = node.textContent.replaceAll('\\uFEFF', '');\n                restore(); // Make sure to make <br>s visible if needed.\n            }\n        }\n\n        const tAttrs = ['t-elif', 't-else', 't-esc', 't-foreach', 't-if', 't-out', 't-raw', 't-value'];\n        // Remove now empty links\n        for (const link of element.querySelectorAll('a')) {\n            if (![...link.childNodes].some(isVisible) && !link.classList.length\n                && !tAttrs.some(attr => link.hasAttribute(attr))) {\n                link.remove();\n            }\n        }\n\n        // Remove contenteditable=false on elements\n        for (const el of element.querySelectorAll('[contenteditable=\"false\"]')) {\n            if (!el.hasAttribute('data-oe-keep-contenteditable')) {\n                el.removeAttribute('contenteditable');\n            }\n        }\n        // Remove data-oe-keep-contenteditable on elements\n        for (const el of element.querySelectorAll('[data-oe-keep-contenteditable]')) {\n            el.removeAttribute('data-oe-keep-contenteditable');\n        }\n\n        // Remove Zero Width Spaces on Font awesome elements\n        for (const el of element.querySelectorAll(ICON_SELECTOR)) {\n            cleanZWS(el);\n        }\n\n        // Clean custom selections\n        if (this.deselectTable() && hasValidSelection(this.editable)) {\n            this.document.getSelection().collapseToStart();\n        }\n\n        // Remove empty class attributes\n        for (const el of element.querySelectorAll('*[class=\"\"]')) {\n            el.removeAttribute('class');\n        }\n    }\n    /**\n     * Handle the hint preview for the Powerbox.\n     * @private\n     */\n    _handleCommandHint() {\n        const selection = this.document.getSelection();\n        const anchorNode = selection.anchorNode;\n        if (isProtected(anchorNode)) {\n            return;\n        }\n\n        const selectors = {\n            BLOCKQUOTE: this.options._t('Empty quote'),\n            H1: this.options._t('Heading 1'),\n            H2: this.options._t('Heading 2'),\n            H3: this.options._t('Heading 3'),\n            H4: this.options._t('Heading 4'),\n            H5: this.options._t('Heading 5'),\n            H6: this.options._t('Heading 6'),\n            'UL LI': this.options._t('List'),\n            'OL LI': this.options._t('List'),\n            'CL LI': this.options._t('To-do'),\n        };\n\n        for (const hint of this.editable.querySelectorAll('.oe-hint')) {\n            if (\n                hint.classList.contains('oe-command-temporary-hint') ||\n                !isEmptyBlock(hint) ||\n                hint.querySelector('T[t-out]')\n            ) {\n                this.observerUnactive();\n                hint.classList.remove('oe-hint', 'oe-command-temporary-hint');\n                if (hint.dataset.oeEditPlaceholder) {\n                    hint.setAttribute(\"placeholder\", hint.dataset.oeEditPlaceholder);\n                    if (hint.innerText.trim().length === 0) {\n                        hint.classList.add(\"oe-hint\");\n                    }\n                } else {\n                    hint.removeAttribute(\"placeholder\");\n                }\n                if (hint.classList.length === 0) {\n                    hint.removeAttribute('class');\n                }\n                this.observerActive();\n            }\n        }\n\n        if (this.options.showEmptyElementHint) {\n            for (const [selector, text] of Object.entries(selectors)) {\n                for (const el of this.editable.querySelectorAll(selector)) {\n                    if (!this.options.isHintBlacklisted(el)) {\n                        this._makeHint(el, text);\n                    }\n                }\n            }\n        }\n\n        const block = this.options.getPowerboxElement();\n        if (block) {\n            this._makeHint(block, this.options._t('Type \"/\" for commands'), true);\n        }\n\n        // placeholder hint\n        const sel = this.document.getSelection();\n        if (this.editable.textContent.trim() === '' && this.options.placeholder && this.editable.firstChild && this.editable.firstChild.innerHTML && !this.editable.contains(sel.focusNode)) {\n            this._makeHint(this.editable.firstChild, this.options.placeholder, true);\n        }\n    }\n    _makeHint(block, text, temporary = false) {\n        const content = block && block.innerHTML.trim();\n        if (\n            block &&\n            (content === '' || content === '<br>') &&\n            !block.querySelector('T[t-out],[t-field]') &&\n            ancestors(block, this.editable).includes(this.editable)\n        ) {\n            this.observerUnactive();\n            block.setAttribute('placeholder', text);\n            block.classList.add('oe-hint');\n            if (temporary) {\n                block.classList.add('oe-command-temporary-hint');\n            }\n            this.observerActive();\n        }\n    }\n\n    /**\n     * Places the cursor in a safe place (not the editable root).\n     * Inserts an empty paragraph if selection results from mouse click and\n     * there's no other way to insert text before/after a block.\n     *\n     * @param {Selection} selection - Collapsed selection at the editable root.\n     * @param {String} currentKeyPress\n     */\n    _fixSelectionOnEditableRoot(selection, currentKeyPress) {\n        if (!this.editable.isContentEditable) {\n            return;\n        }\n        let nodeAfterCursor = this.editable.childNodes[selection.anchorOffset];\n        let nodeBeforeCursor = nodeAfterCursor && nodeAfterCursor.previousElementSibling;\n        // Handle arrow key presses.\n        if (currentKeyPress === 'ArrowRight' || currentKeyPress === 'ArrowDown') {\n            while (nodeAfterCursor && isNotAllowedContent(nodeAfterCursor)) {\n                nodeAfterCursor = nodeAfterCursor.nextElementSibling;\n            }\n            if (nodeAfterCursor) {\n                setSelection(...getDeepestPosition(nodeAfterCursor, 0));\n            } else {\n                this.historyResetLatestComputedSelection(true);\n            }\n        } else if (currentKeyPress === 'ArrowLeft' || currentKeyPress === 'ArrowUp') {\n            while (nodeBeforeCursor && isNotAllowedContent(nodeBeforeCursor)) {\n                nodeBeforeCursor = nodeBeforeCursor.previousElementSibling;\n            }\n            if (nodeBeforeCursor) {\n                setSelection(...getDeepestPosition(nodeBeforeCursor, nodeSize(nodeBeforeCursor)));\n            } else {\n                this.historyResetLatestComputedSelection(true);\n            }\n        // Handle cursor next to a 'P'.\n        } else if (nodeAfterCursor && paragraphRelatedElements.includes(nodeAfterCursor.nodeName)) {\n            // Cursor is right before a 'P'.\n            setCursorStart(nodeAfterCursor);\n        } else if (nodeBeforeCursor && paragraphRelatedElements.includes(nodeBeforeCursor.nodeName)) {\n            // Cursor is right after a 'P'.\n            setCursorEnd(nodeBeforeCursor);\n        // Handle cursor not next to a 'P'.\n        // Insert a new 'P' if selection resulted from a mouse click.\n        } else if (this._currentMouseState === 'mousedown') {\n            this._recordHistorySelection(true);\n            const p = this.document.createElement('p');\n            p.append(this.document.createElement('br'));\n            if (!nodeAfterCursor) {\n                // Cursor is at the end of the editable.\n                this.editable.append(p);\n            } else if (!nodeBeforeCursor) {\n                // Cursor is at the beginning of the editable.\n                this.editable.prepend(p);\n            } else {\n                // Cursor is between two non-p blocks\n                nodeAfterCursor.before(p);\n            }\n            setCursorStart(p);\n            this.historyStep();\n        } else {\n            // Remove selection as a fallback.\n            selection.removeAllRanges();\n        }\n    }\n\n    _onMouseup(ev) {\n        this._currentMouseState = ev.type;\n\n        this._fixFontAwesomeSelection();\n    }\n\n    _onMouseDown(ev) {\n        this._currentMouseState = ev.type;\n        this._lastMouseClickPosition = [ev.x, ev.y];\n\n        if (this.canActivateContentEditable) {\n            this._activateContenteditable();\n        }\n\n        // Ignore any changes that might have happened before this point.\n        this.observer.takeRecords();\n\n        const node = ev.target;\n        // handle checkbox lists\n        if (node.tagName == 'LI' && getListMode(node.parentElement) == 'CL') {\n            const beforStyle = window.getComputedStyle(node, ':before');\n            const style1 = {\n                left: parseInt(beforStyle.getPropertyValue('left'), 10),\n                top: parseInt(beforStyle.getPropertyValue('top'), 10),\n            }\n            style1.right = style1.left + parseInt(beforStyle.getPropertyValue('width'), 10);\n            style1.bottom = style1.top + parseInt(beforStyle.getPropertyValue('height'), 10);\n\n            const isMouseInsideCheckboxBox =\n                ev.offsetX >= style1.left &&\n                ev.offsetX <= style1.right &&\n                ev.offsetY >= style1.top &&\n                ev.offsetY <= style1.bottom;\n\n            if (isMouseInsideCheckboxBox) {\n                toggleClass(node, 'o_checked');\n                this.historyStep();\n                if (!document.getSelection().isCollapsed) {\n                    this._updateToolbar(true);\n                }\n            }\n        }\n\n        // handle stars\n        const isStar = el => el.nodeType === Node.ELEMENT_NODE && (\n            el.classList.contains('fa-star') || el.classList.contains('fa-star-o')\n        );\n        if (isStar(node) &&\n            node.parentElement && node.parentElement.className.includes('o_stars')) {\n            const previousStars = getAdjacentPreviousSiblings(node, isStar);\n            const nextStars = getAdjacentNextSiblings(node, isStar);\n            if (nextStars.length || previousStars.length) {\n                const shouldToggleOff = node.classList.contains('fa-star') &&\n                    (!nextStars[0] || !nextStars[0].classList.contains('fa-star'));\n                for (const star of [...previousStars, node]) {\n                    star.classList.toggle('fa-star-o', shouldToggleOff);\n                    star.classList.toggle('fa-star', !shouldToggleOff);\n                };\n                for (const star of nextStars) {\n                    star.classList.toggle('fa-star-o', true);\n                    star.classList.toggle('fa-star', false);\n                };\n                this.historyStep();\n            }\n        }\n\n        // Handle table selection.\n        if (this.toolbar && !ancestors(ev.target, this.editable).includes(this.toolbar)) {\n            this.toolbar.style.pointerEvents = 'none';\n            if (this.deselectTable() && hasValidSelection(this.editable)) {\n                this.document.getSelection().collapseToStart();\n                this._updateToolbar(false);\n            }\n        }\n        // Handle table resizing.\n        const isHoveringTdBorder = this._isHoveringTdBorder(ev);\n        const isRTL = this.options.direction === 'rtl';\n        if (isHoveringTdBorder) {\n            ev.preventDefault();\n            const direction = { top: 'row', right: 'col', bottom: 'row', left: 'col' }[isHoveringTdBorder] || false;\n            let target1, target2;\n            const column = closestElement(ev.target, 'tr');\n            if (isHoveringTdBorder === 'top' && column) {\n                target1 = getAdjacentPreviousSiblings(column).find(node => node.nodeName === 'TR');\n                target2 = closestElement(ev.target, 'tr');\n            } else if (isHoveringTdBorder === 'right') {\n                if (isRTL) {\n                    target1 = getAdjacentPreviousSiblings(ev.target).find(node => node.nodeName === 'TD');\n                    target2 = ev.target;\n                } else {\n                    target1 = ev.target;\n                    target2 = getAdjacentNextSiblings(ev.target).find(node => node.nodeName === 'TD');\n                }\n            } else if (isHoveringTdBorder === 'bottom' && column) {\n                target1 = closestElement(ev.target, 'tr');\n                target2 = getAdjacentNextSiblings(column).find(node => node.nodeName === 'TR');\n            } else if (isHoveringTdBorder === 'left') {\n                if (isRTL) {\n                    target1 = ev.target;\n                    target2 = getAdjacentNextSiblings(ev.target).find(node => node.nodeName === 'TD');\n                } else {\n                    target1 = getAdjacentPreviousSiblings(ev.target).find(node => node.nodeName === 'TD');\n                    target2 = ev.target;\n                }\n            }\n            this._isResizingTable = true;\n            this._toggleTableResizeCursor(direction);\n            const resizeTable = ev => this._resizeTable(ev, direction, target1, target2);\n            const stopResizing = ev => {\n                ev.preventDefault();\n                this._isResizingTable = false;\n                this._toggleTableResizeCursor(false);\n                this.historyStep();\n                this.document.removeEventListener('mousemove', resizeTable);\n                this.document.removeEventListener('mouseup', stopResizing);\n                this.document.removeEventListener('mouseleave', stopResizing);\n            };\n            this.document.addEventListener('mousemove', resizeTable);\n            this.document.addEventListener('mouseup', stopResizing);\n            this.document.addEventListener('mouseleave', stopResizing);\n        }\n\n        // Handle emoji popover\n        const isEmojiPopover = document.querySelector('.o-EmojiPicker');\n        if (isEmojiPopover && ev.target !== isEmojiPopover) {\n            isEmojiPopover.remove();\n        }\n    }\n\n    _onScroll(ev) {\n        if (this._rowUiTarget && !this._rowUi.classList.contains('o_open')) {\n            this._positionTableUi(this._rowUiTarget);\n        }\n        if (this._columnUiTarget && !this._columnUi.classList.contains('o_open')) {\n            this._positionTableUi(this._columnUiTarget);\n        }\n    }\n\n    _onDocumentKeydown(ev) {\n        const canUndoRedo = !['INPUT', 'TEXTAREA'].includes(this.document.activeElement.tagName);\n\n        if (this.options.controlHistoryFromDocument && canUndoRedo) {\n            if (IS_KEYBOARD_EVENT_UNDO(ev) && canUndoRedo) {\n                ev.preventDefault();\n                this.historyUndo();\n            } else if (IS_KEYBOARD_EVENT_REDO(ev) && canUndoRedo) {\n                ev.preventDefault();\n                this.historyRedo();\n            }\n        } else {\n            if (IS_KEYBOARD_EVENT_REDO(ev) || IS_KEYBOARD_EVENT_UNDO(ev)) {\n                this._onKeyupResetContenteditableNodes.push(\n                    ...this.editable.querySelectorAll('[contenteditable=true]'),\n                );\n                if (this.editable.getAttribute('contenteditable') === 'true') {\n                    this._onKeyupResetContenteditableNodes.push(this.editable);\n                }\n\n                for (const node of this._onKeyupResetContenteditableNodes) {\n                    this.automaticStepSkipStack();\n                    node.setAttribute('contenteditable', false);\n                }\n            }\n        }\n    }\n\n    _onDocumentKeyup() {\n        if (this._onKeyupResetContenteditableNodes.length) {\n            for (const node of this._onKeyupResetContenteditableNodes) {\n                this.automaticStepSkipStack();\n                node.setAttribute('contenteditable', true);\n            }\n            this._onKeyupResetContenteditableNodes = [];\n        }\n    }\n\n    _onDocumentMouseup(ev) {\n        this._currentMouseState = ev.type;\n        if (this.toolbar) {\n            this.toolbar.style.pointerEvents = 'auto';\n        }\n    }\n\n    _onMousemove(ev) {\n        if (this._currentMouseState === 'mousedown' && !this._isResizingTable) {\n            this._handleSelectionInTable(ev);\n        }\n        if (!this._rowUi.classList.contains('o_open') && !this._columnUi.classList.contains('o_open')) {\n            const column = closestElement(ev.target, 'td');\n            if (this._isResizingTable || !column || !column.isContentEditable || !ev.target || ev.target.nodeType !== Node.ELEMENT_NODE) {\n                this._toggleTableUi(false, false);\n            } else {\n                const row = closestElement(column, 'tr');\n                const isFirstColumn = column === row.querySelector('td');\n                const table = column && closestElement(column, 'table');\n                const isFirstRow = table && row === table.querySelector('tr');\n                this._toggleTableUi(isFirstColumn && row, isFirstRow && column);\n            }\n        }\n        const direction = {top: 'row', right: 'col', bottom: 'row', left: 'col'}[this._isHoveringTdBorder(ev)] || false;\n        if (direction || !this._isResizingTable) {\n            this._toggleTableResizeCursor(direction);\n        }\n    }\n\n    _onMouseLeave(ev) {\n        if (!this._isResizingTable) {\n            this._toggleTableResizeCursor(false);\n        }\n    }\n\n    _onDocumentClick(ev) {\n        // Close Table UI.\n        this._rowUi.classList.remove('o_open');\n        this._columnUi.classList.remove('o_open');\n    }\n\n    /**\n     * Inserts a link in the editor. Called after pressing space or (shif +) enter.\n     * Performs a regex check to determine if the url has correct syntax.\n     */\n    _handleAutomaticLinkInsertion() {\n        const selection = this.document.getSelection();\n        if (\n            selection &&\n            selection.anchorNode &&\n            isHtmlContentSupported(selection.anchorNode) &&\n            !closestElement(selection.anchorNode).closest('a') &&\n            selection.anchorNode.nodeType === Node.TEXT_NODE\n        ) {\n            // Merge adjacent text nodes.\n            selection.anchorNode.parentNode.normalize();\n            const textSliced = selection.anchorNode.textContent.slice(0, selection.anchorOffset);\n            const textNodeSplitted = textSliced.split(/\\s/);\n            const potentialUrl = textNodeSplitted.pop() || '';\n            // In case of multiple matches, only the last one will be converted.\n            const match = [...potentialUrl.matchAll(new RegExp(URL_REGEX, 'g'))].pop();\n\n            if (match && !EMAIL_REGEX.test(match[0])) {\n                const nodeForSelectionRestore = selection.anchorNode.splitText(selection.anchorOffset);\n                const url = match[2] ? match[0] : 'http://' + match[0];\n                const range = this.document.createRange();\n                const startOffset = selection.anchorOffset - potentialUrl.length + match.index;\n                range.setStart(selection.anchorNode, startOffset);\n                range.setEnd(selection.anchorNode, startOffset + match[0].length);\n                const link = this._createLink(range.extractContents().textContent, url);\n                range.insertNode(link);\n                setCursorStart(nodeForSelectionRestore, false);\n            }\n        }\n    }\n\n    /**\n     * @param {String} label\n     * @param {String} url\n     */\n    _createLink(label, url) {\n        const link = this.document.createElement('a');\n        link.setAttribute('href', url);\n        for (const [param, value] of Object.entries(this.options.defaultLinkAttributes)) {\n            link.setAttribute(param, `${value}`);\n        }\n        link.innerText = label;\n        return link;\n    }\n    /**\n     * Add images inside the editable at the current selection.\n     *\n     * @param {File[]} imageFiles\n     */\n    addImagesFiles(imageFiles) {\n        const promises = [];\n        for (const imageFile of imageFiles) {\n            const imageNode = document.createElement('img');\n            imageNode.classList.add('img-fluid');\n            // Mark images as having to be saved as attachments.\n            if (this.options.dropImageAsAttachment) {\n                imageNode.classList.add('o_b64_image_to_save');\n            }\n            imageNode.dataset.fileName = imageFile.name;\n            promises.push(getImageUrl(imageFile).then(url => {\n                imageNode.src = url;\n                return imageNode;\n            }));\n        }\n        return Promise.all(promises).then(nodes => {\n            const fragment = document.createDocumentFragment();\n            fragment.append(...nodes);\n            return fragment;\n        });\n    }\n    /**\n     * Handle safe pasting of html or plain text into the editor.\n     */\n    _onPaste(ev) {\n        const sel = this.document.getSelection();\n        if (sel.anchorNode && isProtected(sel.anchorNode)) {\n            return;\n        }\n        ev.preventDefault();\n        const files = getImageFiles(ev.clipboardData);\n        const odooEditorHtml = ev.clipboardData.getData('text/odoo-editor');\n        const clipboardHtml = ev.clipboardData.getData('text/html');\n        const targetSupportsHtmlContent = isHtmlContentSupported(sel.anchorNode);\n        // Replace entire link if its label is fully selected.\n        const link = closestElement(sel.anchorNode, 'a');\n        if (link && sel.toString().replace(ZERO_WIDTH_CHARS_REGEX, '') === link.innerText.replace(ZERO_WIDTH_CHARS_REGEX, '')) {\n            const start = leftPos(link);\n            link.remove();\n            setSelection(...start, ...start, false);\n        }\n        if (!targetSupportsHtmlContent) {\n            const text = ev.clipboardData.getData(\"text/plain\");\n            this._applyCommand(\"insert\", text);\n        } else if (odooEditorHtml) {\n            const fragment = parseHTML(this.document, odooEditorHtml);\n            const selector = this.options.renderingClasses.map(c => `.${c}`).join(',');\n            if (selector) {\n                for (const element of fragment.querySelectorAll(selector)) {\n                    element.classList.remove(...this.options.renderingClasses);\n                }\n            }\n            // Instantiate DOMPurify with the correct window.\n            this.DOMPurify ??= DOMPurify(this.document.defaultView);\n            this.DOMPurify.sanitize(fragment, { IN_PLACE: true });\n            if (fragment.hasChildNodes()) {\n                this._applyCommand('insert', fragment);\n            }\n        } else if (files.length || clipboardHtml) {\n            const clipboardElem = this._prepareClipboardData(clipboardHtml);\n            // When copy pasting a table from the outside, a picture of the\n            // table can be included in the clipboard as an image file. In that\n            // particular case the html table is given a higher priority than\n            // the clipboard picture.\n            if (files.length && !clipboardElem.querySelector('table')) {\n                this.addImagesFiles(files).then(html => {\n                    this._applyCommand('insert', html);\n                });\n            } else {\n                if (closestElement(sel.anchorNode, 'a')) {\n                    this._applyCommand('insert', clipboardElem.textContent);\n                }\n                else {\n                    this._applyCommand('insert', clipboardElem);\n                }\n            }\n        } else {\n            const text = ev.clipboardData.getData('text/plain');\n            const selectionIsInsideALink = !!closestElement(sel.anchorNode, 'a');\n            let splitAroundUrl = [text];\n            // Avoid transforming dynamic placeholder pattern to url.\n            if(!text.match(/\\${.*}/gi)) {\n                splitAroundUrl = text.split(URL_REGEX);\n                // Remove 'http(s)://' capturing group from the result (indexes\n                // 2, 5, 8, ...).\n                splitAroundUrl = splitAroundUrl.filter((_, index) => ((index + 1) % 3));\n            }\n            if (splitAroundUrl.length === 3 && !splitAroundUrl[0] && !splitAroundUrl[2]) {\n                // Pasted content is a single URL.\n                const url = /^https?:\\/\\//i.test(text) ? text : 'http://' + text;\n                const youtubeUrl = this.options.allowCommandVideo && YOUTUBE_URL_GET_VIDEO_ID.exec(url);\n                const urlFileExtention = url.split('.').pop();\n                const isImageUrl = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(urlFileExtention.toLowerCase());\n                // A url cannot be transformed inside an existing link.\n                // An image can be embedded inside an existing link, a video cannot.\n                if (selectionIsInsideALink) {\n                    if (isImageUrl) {\n                        const img = document.createElement('IMG');\n                        img.setAttribute('src', url);\n                        this._applyCommand('insert', img);\n                    } else {\n                        this._applyCommand('insert', text);\n                    }\n                } else if (isImageUrl || youtubeUrl) {\n                    // Open powerbox with commands to embed media or paste as link.\n                    // Store history step index to revert it later.\n                    const stepIndexBeforeInsert = this._historySteps.length - 1;\n                    // Store mutations before text insertion, to reapply them after history revert.\n                    this.observerFlush();\n                    const currentStepMutations = [...this._currentStep.mutations];\n                    // Insert URL as text, revert it later.\n                    this._applyCommand('insert', text);\n                    const revertTextInsertion = () => {\n                        this.historyRevertUntil(stepIndexBeforeInsert);\n                        this.historyStep(true);\n                        this._historyStepsStates.set(peek(this._historySteps).id, 'consumed');\n                        // Reapply mutations that were done before the text insertion.\n                        this.historyApply(currentStepMutations);\n                    };\n                    let commands;\n                    const pasteAsURLCommand = {\n                        name: this.options._t('Paste as URL'),\n                        description: this.options._t('Create an URL.'),\n                        fontawesome: 'fa-link',\n                        callback: () => {\n                            revertTextInsertion();\n                            this._applyRawCommand('insert', this._createLink(text, url))\n                        },\n                    };\n                    if (isImageUrl) {\n                        const embedImageCommand = {\n                            name: this.options._t('Embed Image'),\n                            description: this.options._t('Embed the image in the document.'),\n                            fontawesome: 'fa-image',\n                            callback: () => {\n                                revertTextInsertion();\n                                const img = document.createElement('IMG');\n                                img.setAttribute('src', url);\n                                this._applyRawCommand('insert', img);\n                            },\n                        };\n                        commands = [embedImageCommand, pasteAsURLCommand];\n                    } else {\n                         // URL is a YouTube video.\n                        const embedVideoCommand = {\n                            name: this.options._t('Embed Youtube Video'),\n                            description: this.options._t('Embed the youtube video in the document.'),\n                            fontawesome: 'fa-youtube-play',\n                            callback: async () => {\n                                revertTextInsertion();\n                                let videoElement;\n                                if (this.options.getYoutubeVideoElement) {\n                                    videoElement = await this.options.getYoutubeVideoElement(youtubeUrl[0]);\n                                } else {\n                                    videoElement = document.createElement('iframe');\n                                    videoElement.setAttribute('width', '560');\n                                    videoElement.setAttribute('height', '315');\n                                    videoElement.setAttribute(\n                                        'src',\n                                        `https://www.youtube.com/embed/${encodeURIComponent(youtubeUrl[1])}`,\n                                    );\n                                    videoElement.setAttribute('title', 'YouTube video player');\n                                    videoElement.setAttribute('frameborder', '0');\n                                    videoElement.setAttribute(\n                                        'allow',\n                                        'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n                                    );\n                                    videoElement.setAttribute('allowfullscreen', '1');\n                                }\n                                this._applyRawCommand('insert', videoElement);\n                            },\n                        };\n                        commands = [embedVideoCommand, pasteAsURLCommand];\n                    }\n                    this.powerbox.open(commands);\n                } else {\n                    this._applyCommand('insert', this._createLink(text, url));\n                }\n            } else {\n                this.historyPauseSteps();\n                for (let i = 0; i < splitAroundUrl.length; i++) {\n                    const url = /^https?:\\/\\//gi.test(splitAroundUrl[i])\n                        ? splitAroundUrl[i]\n                        : 'http://' + splitAroundUrl[i];\n                    // Even indexes will always be plain text, and odd indexes will always be URL.\n                    // A url cannot be transformed inside an existing link.\n                    if (i % 2 && !selectionIsInsideALink) {\n                        this._applyCommand('insert', this._createLink(splitAroundUrl[i], url));\n                    } else if (splitAroundUrl[i] !== '') {\n                        const textFragments = splitAroundUrl[i].split(/\\r?\\n/);\n                        let textIndex = 1;\n                        for (const textFragment of textFragments) {\n                            // Replace consecutive spaces by alternating nbsp.\n                            const modifiedTextFragment = textFragment.replace(/( {2,})/g, match => {\n                                let alertnateValue = false;\n                                return match.replace(/ /g, () => {\n                                    alertnateValue = !alertnateValue;\n                                    const replaceContent = alertnateValue ? '\\u00A0' : ' ';\n                                    return replaceContent;\n                                });\n                            });\n                            this._applyCommand('insert', modifiedTextFragment);\n                            if (textIndex < textFragments.length) {\n                                // Break line by inserting new paragraph and\n                                // remove current paragraph's bottom margin.\n                                const p = closestElement(sel.anchorNode, 'p');\n                                if (isUnbreakable(closestBlock(sel.anchorNode))) {\n                                    this._applyCommand('oShiftEnter');\n                                } else {\n                                    this._applyCommand('oEnter');\n                                    p && (p.style.marginBottom = '0px');\n                                }\n                            }\n                            textIndex++;\n                        }\n                    }\n                }\n                this.historyUnpauseSteps();\n                this.historyStep();\n            }\n        }\n    }\n    _onDragStart(ev) {\n        if (ev.target.nodeName === 'IMG') {\n            ev.dataTransfer.setData('text/plain', `oid:${ev.target.oid}`);\n        }\n    }\n    /**\n     * Handle safe dropping of html into the editor.\n     */\n    _onDrop(ev) {\n        ev.preventDefault();\n        if (!isHtmlContentSupported(ev.target)) {\n            return;\n        }\n        const sel = this.document.getSelection();\n        let isInEditor = false;\n        let ancestor = sel.anchorNode;\n        while (ancestor && !isInEditor) {\n            if (ancestor === this.editable) {\n                isInEditor = true;\n            }\n            ancestor = ancestor.parentNode;\n        }\n        const dataTransfer = (ev.originalEvent || ev).dataTransfer;\n        const imageOidMatch = (dataTransfer.getData('text') || '').match('oid:(.*)');\n        const imageOid = imageOidMatch && imageOidMatch[1];\n        const image = imageOid && [...this.editable.querySelectorAll('*')].find(\n            node => node.oid === imageOid,\n        );\n        const fileTransferItems = getImageFiles(dataTransfer);\n        const htmlTransferItem = [...dataTransfer.items].find(\n            item => item.type === 'text/html',\n        );\n        if (image || fileTransferItems.length || htmlTransferItem) {\n            if (this.document.caretPositionFromPoint) {\n                const range = this.document.caretPositionFromPoint(ev.clientX, ev.clientY);\n                setSelection(range.offsetNode, range.offset);\n            } else if (this.document.caretRangeFromPoint) {\n                const range = this.document.caretRangeFromPoint(ev.clientX, ev.clientY);\n                setSelection(range.startContainer, range.startOffset);\n            }\n        }\n        if (image) {\n            image.classList.toggle('img-fluid', true);\n            const html = image.outerHTML;\n            image.remove();\n            this.execCommand('insert', this._prepareClipboardData(html));\n        } else if (fileTransferItems.length) {\n            this.addImagesFiles(fileTransferItems).then(html => {\n                this.execCommand('insert', html);\n            });\n        } else if (htmlTransferItem) {\n            htmlTransferItem.getAsString(pastedText => {\n                this.execCommand('insert', this._prepareClipboardData(pastedText));\n            });\n        }\n        this.historyStep();\n    }\n\n    _onTabulationInTable(ev) {\n        const sel = this.document.getSelection();\n        const closestTable = closestElement(sel.anchorNode, 'table');\n        if (!closestTable) {\n            return;\n        }\n        const closestTd = closestElement(sel.anchorNode, 'td');\n        const tds = [...closestTable.querySelectorAll('td')];\n        const direction = ev.shiftKey ? DIRECTIONS.LEFT : DIRECTIONS.RIGHT;\n        const cursorDestination =\n            tds[tds.findIndex(td => closestTd === td) + (direction === DIRECTIONS.LEFT ? -1 : 1)];\n        if (cursorDestination) {\n            setCursorEnd(lastLeaf(cursorDestination));\n        } else if (direction === DIRECTIONS.RIGHT) {\n            this.execCommand('addRow', 'after');\n            this._onTabulationInTable(ev);\n        }\n    }\n    _onTableMenuTogglerClick(ev) {\n        const uiWrapper = ev.target.closest('.o_table_ui');\n        uiWrapper.classList.toggle('o_open');\n\n        if (this.options.direction === 'rtl') {\n            const menuRowEl = this._tableUiContainer.querySelector('.o_row_ui .o_table_ui_menu')\n            const menuRowRect = menuRowEl.getBoundingClientRect();\n            menuRowEl.style.position = 'absolute';\n            menuRowEl.style.left = `-${menuRowRect.width}px`;\n            menuRowEl.style.margin = `0px`;\n        }\n\n        if (uiWrapper.classList.contains('o_column_ui')) {\n            const columnIndex = getColumnIndex(this._columnUiTarget);\n            uiWrapper.querySelector('.o_move_left').classList.toggle('o_hide', columnIndex === 0);\n            const shouldHideRight = columnIndex === [...this._columnUiTarget.parentElement.children].filter(child => child.nodeName === 'TD').length - 1;\n            uiWrapper.querySelector('.o_move_right').classList.toggle('o_hide', shouldHideRight);\n        } else {\n            const rowIndex = getRowIndex(this._rowUiTarget);\n            uiWrapper.querySelector('.o_move_up').classList.toggle('o_hide', rowIndex === 0);\n            const shouldHideDown = rowIndex === [...this._rowUiTarget.parentElement.children].filter(child => child.nodeName === 'TR').length - 1;\n            uiWrapper.querySelector('.o_move_down').classList.toggle('o_hide', shouldHideDown);\n        }\n        ev.stopPropagation();\n    }\n    _onTableMoveUpClick() {\n        if (this._rowUiTarget.previousSibling) {\n            // When moving the second row up, copy the widths of first row's td\n            // elements to second row's td elements, as td widths are only\n            // applied to the first row.\n            if (!this._rowUiTarget.previousSibling.previousSibling) {\n                this._rowUiTarget.childNodes.forEach((cell, index) => {\n                    cell.style.width = this._rowUiTarget.previousSibling.childNodes[index].style.width;\n                });\n            }\n            this._rowUiTarget.previousSibling.before(this._rowUiTarget);\n        }\n    }\n    _onTableMoveDownClick() {\n        if (this._rowUiTarget.nextSibling) {\n            // When moving the first row down, copy the widths of its td\n            // elements to second row's td elements, as td widths are only\n            // applied to the first row.\n            if (!this._rowUiTarget.previousSibling) {\n                this._rowUiTarget.nextSibling.childNodes.forEach((cell, index) => {\n                    cell.style.width = this._rowUiTarget.childNodes[index].style.width;\n                });\n            }\n            this._rowUiTarget.nextSibling.after(this._rowUiTarget);\n        }\n    }\n    _onTableMoveRightClick() {\n        const trs = [...this._columnUiTarget.parentElement.parentElement.children].filter(child => child.nodeName === 'TR');\n        const columnIndex = getColumnIndex(this._columnUiTarget);\n        const tdsToMove = trs.map(tr => [...tr.children].filter(child => child.nodeName === 'TD')[columnIndex]);\n        for (const tdToMove of tdsToMove) {\n            const target = [...tdToMove.parentElement.children].filter(child => child.nodeName === 'TD')[columnIndex + 1];\n            target.after(tdToMove);\n        }\n    }\n    _onTableMoveLeftClick() {\n        const trs = [...this._columnUiTarget.parentElement.parentElement.children].filter(child => child.nodeName === 'TR');\n        const columnIndex = getColumnIndex(this._columnUiTarget);\n        const tdsToMove = trs.map(tr => [...tr.children].filter(child => child.nodeName === 'TD')[columnIndex]);\n        for (const tdToMove of tdsToMove) {\n            const target = [...tdToMove.parentElement.children].filter(child => child.nodeName === 'TD')[columnIndex - 1];\n            target.before(tdToMove);\n        }\n    }\n    _onTableDeleteColumnClick() {\n        this.historyPauseSteps();\n        const rows = [...closestElement(this._columnUiTarget, 'tr').parentElement.children].filter(child => child.nodeName === 'TR');\n        this.execCommand('removeColumn', this._columnUiTarget);\n        if (rows.every(row => !row.parentElement)) {\n            this.execCommand('deleteTable', this.editable.querySelector('.o_selected_table'));\n        }\n        this.historyUnpauseSteps();\n        this.historyStep();\n    }\n    _onTableDeleteRowClick() {\n        this.historyPauseSteps();\n        const rows = [...this._rowUiTarget.parentElement.children].filter(child => child.nodeName === 'TR');\n        this.execCommand('removeRow', this._rowUiTarget);\n        if (rows.every(row => !row.parentElement)) {\n            this.execCommand('deleteTable', this.editable.querySelector('.o_selected_table'));\n        }\n        this.historyUnpauseSteps();\n        this.historyStep();\n    }\n\n    /**\n     * Fix the current selection range in case the range start or end inside a fontAwesome node\n     */\n    _fixFontAwesomeSelection() {\n        const selection = this.document.getSelection();\n        if (\n            selection.isCollapsed ||\n            (selection.anchorNode &&\n                !ancestors(selection.anchorNode, this.editable).includes(this.editable))\n        )\n            return;\n        let shouldUpdateSelection = false;\n        const fixedSelection = {\n            anchorNode: selection.anchorNode,\n            anchorOffset: selection.anchorOffset,\n            focusNode: selection.focusNode,\n            focusOffset: selection.focusOffset,\n        };\n        const selectionDirection = getCursorDirection(\n            selection.anchorNode,\n            selection.anchorOffset,\n            selection.focusNode,\n            selection.focusOffset,\n        );\n        // check and fix anchor node\n        const closestAnchorNodeEl = closestElement(selection.anchorNode);\n        if (isFontAwesome(closestAnchorNodeEl)) {\n            shouldUpdateSelection = true;\n            fixedSelection.anchorNode =\n                selectionDirection === DIRECTIONS.RIGHT\n                    ? closestAnchorNodeEl.previousSibling\n                    : closestAnchorNodeEl.nextSibling;\n            if (fixedSelection.anchorNode) {\n                fixedSelection.anchorOffset =\n                    selectionDirection === DIRECTIONS.RIGHT ? fixedSelection.anchorNode.length : 0;\n            } else {\n                fixedSelection.anchorNode = closestAnchorNodeEl.parentElement;\n                fixedSelection.anchorOffset = 0;\n            }\n        }\n        // check and fix focus node\n        const closestFocusNodeEl = closestElement(selection.focusNode);\n        if (isFontAwesome(closestFocusNodeEl)) {\n            shouldUpdateSelection = true;\n            fixedSelection.focusNode =\n                selectionDirection === DIRECTIONS.RIGHT\n                    ? closestFocusNodeEl.nextSibling\n                    : closestFocusNodeEl.previousSibling;\n            if (fixedSelection.focusNode) {\n                fixedSelection.focusOffset =\n                    selectionDirection === DIRECTIONS.RIGHT ? 0 : fixedSelection.focusNode.length;\n            } else {\n                fixedSelection.focusNode = closestFocusNodeEl.parentElement;\n                fixedSelection.focusOffset = 0;\n            }\n        }\n        if (shouldUpdateSelection) {\n            setSelection(\n                fixedSelection.anchorNode,\n                fixedSelection.anchorOffset,\n                fixedSelection.focusNode,\n                fixedSelection.focusOffset,\n                false,\n            );\n        }\n    }\n    _pluginAdd(Plugin) {\n        this._plugins.push(new Plugin({ editor: this }));\n    }\n    _pluginCall(method, args = []) {\n        for (const plugin of this._plugins) {\n            if (plugin[method]) {\n                plugin[method](...args);\n            }\n        }\n    }\n}\n", "/** @odoo-module **/\nexport const UNBREAKABLE_ROLLBACK_CODE = 'UNBREAKABLE';\nexport const UNREMOVABLE_ROLLBACK_CODE = 'UNREMOVABLE';\nexport const REGEX_BOOTSTRAP_COLUMN = /(?:^| )col(-[a-zA-Z]+)?(-\\d+)?(?:$| )/;\n", "/** @odoo-module **/\nimport {\n    closestBlock,\n    closestElement,\n    startPos,\n    getListMode,\n    isBlock,\n    isSelfClosingElement,\n    moveNodes,\n    preserveCursor,\n    isFontAwesome,\n    getDeepRange,\n    isUnbreakable,\n    isEditorTab,\n    isProtected,\n    isZWS,\n    isArtificialVoidElement,\n    ancestors,\n    EMAIL_REGEX,\n    PHONE_REGEX,\n    URL_REGEX,\n    unwrapContents,\n    padLinkWithZws,\n    getTraversedNodes,\n    ZERO_WIDTH_CHARS_REGEX,\n    isVisible,\n} from './utils.js';\n\nconst NOT_A_NUMBER = /[^\\d]/g;\n\n// In some cases, we want to prevent merging identical elements.\nexport const UNMERGEABLE_SELECTORS = [];\n\nfunction hasPseudoElementContent (node, pseudoSelector) {\n    const content = getComputedStyle(node, pseudoSelector).getPropertyValue('content');\n    return content && content !== 'none';\n}\n\nexport function areSimilarElements(node, node2) {\n    if (![node, node2].every(n => n?.nodeType === Node.ELEMENT_NODE)) {\n        return false; // The nodes don't both exist or aren't both elements.\n    }\n    if (node.nodeName !== node2.nodeName) {\n        return false; // The nodes aren't the same type of element.\n    }\n    const nodeName = node.nodeName;\n\n    for (const name of new Set([\n        ...node.getAttributeNames(),\n        ...node2.getAttributeNames(),\n    ])) {\n        if (node.getAttribute(name) !== node2.getAttribute(name)) {\n            return false; // The nodes don't have the same attributes.\n        }\n    }\n    if ([node, node2].some(n => hasPseudoElementContent(n, ':before') || hasPseudoElementContent(n, ':after'))) {\n        return false; // The nodes have pseudo elements with content.\n    }\n    if (isFontAwesome(node) || isFontAwesome(node2)) {\n        return false;\n    }\n    if (nodeName === 'LI' && node.classList.contains('oe-nested')) {\n        // If the nodes are adjacent nested list items, we need to compare the\n        // types of their \"adjacent\" list children rather that the list items\n        // themselves.\n        return (\n            node.lastElementChild &&\n            node2.firstElementChild &&\n            getListMode(node.lastElementChild) === getListMode(node2.firstElementChild)\n        );\n    }\n    if (['UL', 'OL'].includes(nodeName)) {\n        return !isSelfClosingElement(node) && !isSelfClosingElement(node2); // The nodes are non-empty lists. TODO: this doesn't check that and it will always be true!\n    }\n    if (isBlock(node) || isSelfClosingElement(node) || isSelfClosingElement(node2)) {\n        return false; // The nodes are blocks or are empty but visible. TODO: Not sure this was what we wanted to check (see just above).\n    }\n    const nodeStyle = getComputedStyle(node);\n    const node2Style = getComputedStyle(node2);\n    return (\n        !+nodeStyle.padding.replace(NOT_A_NUMBER, '') &&\n        !+node2Style.padding.replace(NOT_A_NUMBER, '') &&\n        !+nodeStyle.margin.replace(NOT_A_NUMBER, '') &&\n        !+node2Style.margin.replace(NOT_A_NUMBER, '')\n    );\n}\n\n/**\n* Returns a complete URL if text is a valid email address, http URL or telephone\n* number, null otherwise.\n* The optional link parameter is used to prevent protocol switching between\n* 'http' and 'https'.\n*\n* @param {String} text\n* @param {HTMLAnchorElement} [link]\n* @returns {String|null}\n*/\nexport function deduceURLfromText(text, link) {\n   const label = text.replace(ZERO_WIDTH_CHARS_REGEX, '').trim();\n   // Check first for e-mail.\n   let match = label.match(EMAIL_REGEX);\n   if (match) {\n       return match[1] ? match[0] : 'mailto:' + match[0];\n   }\n   // Check for http link.\n   match = label.match(URL_REGEX);\n   if (match && match[0] === label) {\n       const currentHttpProtocol = (link?.href.match(/^http(s)?:\\/\\//gi) || [])[0];\n       if (match[2]) {\n           return match[0];\n       } else if (currentHttpProtocol) {\n           // Avoid converting a http link to https.\n           return currentHttpProtocol + match[0];\n       } else {\n           return 'http://' + match[0];\n       }\n   }\n   // Check for telephone url.\n   match = label.match(PHONE_REGEX);\n   if (match) {\n       return match[1] ? match[0] : 'tel://' + match[0];\n   }\n   return null;\n}\n\nfunction shouldPreserveCursor(node, root) {\n    const selection = root.ownerDocument.getSelection();\n    return node.isConnected && selection &&\n        selection.anchorNode && root.contains(selection.anchorNode) &&\n        selection.focusNode && root.contains(selection.focusNode);\n}\n\n/**\n * Sanitize the given node and return it.\n *\n * @param {Node} node\n * @param {Element} root\n * @returns {Node} the sanitized node\n */\nfunction sanitizeNode(node, root) {\n    // First ensure elements which should not contain any content are tagged\n    // contenteditable=false to avoid any hiccup.\n    if (isArtificialVoidElement(node) && node.getAttribute('contenteditable') !== 'false') {\n        node.setAttribute('contenteditable', 'false');\n    }\n\n    // Remove empty class/style attributes.\n    for (const attributeName of ['class', 'style']) {\n        if (node.nodeType === Node.ELEMENT_NODE && node.hasAttribute(attributeName) && !node.getAttribute(attributeName)) {\n            node.removeAttribute(attributeName);\n        }\n    }\n\n    if (\n        ['SPAN', 'FONT'].includes(node.nodeName)\n        && !node.hasAttributes()\n        && !hasPseudoElementContent(node, \"::before\")\n        && !hasPseudoElementContent(node, \"::after\")\n    ) {\n        // Unwrap the contents of SPAN and FONT elements without attributes.\n        getDeepRange(root, { select: true });\n        const restoreCursor = shouldPreserveCursor(node, root) && preserveCursor(root.ownerDocument);\n        const parent = node.parentElement;\n        unwrapContents(node);\n        restoreCursor && restoreCursor();\n        node = parent; // The node has been removed, update the reference.\n    } else if (\n        areSimilarElements(node, node.previousSibling) &&\n        !isUnbreakable(node) &&\n        !isEditorTab(node) &&\n        !(\n            node.attributes?.length === 1 &&\n            node.hasAttribute('data-oe-zws-empty-inline') &&\n            (node.textContent === '\\u200B' || node.previousSibling.textContent === '\\u200B')\n        ) &&\n        !UNMERGEABLE_SELECTORS.some(selectorClass => node.classList?.contains(selectorClass))\n    ) {\n        // Merge identical elements together.\n        getDeepRange(root, { select: true });\n        const restoreCursor = shouldPreserveCursor(node, root) && preserveCursor(root.ownerDocument);\n        moveNodes(...startPos(node), node.previousSibling);\n        restoreCursor && restoreCursor();\n    } else if (node.nodeType === Node.COMMENT_NODE) {\n        // Remove comment nodes to avoid issues with mso comments.\n        const parent = node.parentElement;\n        node.remove();\n        node = parent; // The node has been removed, update the reference.\n    } else if (\n        node.nodeName === 'P' && // Note: not sure we should limit to <p>.\n        ['LI', 'A'].includes(node.parentElement.nodeName) &&\n        !node.parentElement.classList.contains('nav-item')\n    ) {\n        // Remove empty paragraphs in <li>.\n        const previous = node.previousSibling;\n        const attributes = node.attributes;\n        const parent = node.parentElement;\n        const restoreCursor = shouldPreserveCursor(node, root) && preserveCursor(root.ownerDocument);\n        if (attributes.length) {\n            const spanEl = document.createElement('span');\n            for (const attribute of attributes) {\n                spanEl.setAttribute(attribute.name, attribute.value);\n            }\n            if (spanEl.style.textAlign) {\n                // This is a tradeoff. Ideally, the state of the html\n                // after this function should be reachable by standard\n                // edition means and a span with display block is not.\n                // However, this is required in order to not break the\n                // design of already existing snippets.\n                spanEl.style.display = 'block';\n            }\n            spanEl.append(...node.childNodes);\n            node.replaceWith(spanEl);\n        } else {\n            unwrapContents(node);\n        }\n        if (previous && isVisible(previous) && !isBlock(previous) && previous.nodeName !== 'BR') {\n            const br = document.createElement('br');\n            previous.after(br);\n        }\n        restoreCursor && restoreCursor(new Map([[node, parent]]));\n        node = parent; // The node has been removed, update the reference.\n    } else if (node.nodeName === 'LI' && !node.closest('ul, ol')) {\n        // Transform <li> into <p> if they are not in a <ul> / <ol>.\n        const paragraph = document.createElement('p');\n        paragraph.replaceChildren(...node.childNodes);\n        node.replaceWith(paragraph);\n        node = paragraph; // The node has been removed, update the reference.\n    } else if (\n        ['UL', 'OL'].includes(node.nodeName) &&\n        ['UL', 'OL'].includes(node.parentNode.nodeName)\n    ) {\n        const restoreCursor = shouldPreserveCursor(node, root) && preserveCursor(root.ownerDocument);\n        const li = document.createElement('li');\n        node.parentNode.insertBefore(li, node);\n        li.appendChild(node);\n        li.classList.add('oe-nested');\n        node = li;\n        restoreCursor && restoreCursor();\n    } else if (isFontAwesome(node) && node.textContent !== '\\u200B') {\n        // Ensure a zero width space is present inside the FA element.\n        node.textContent = '\\u200B';\n    } else if (isEditorTab(node)) {\n        // Ensure the editor tabs align on a 40px grid.\n        let tabPreviousSibling = node.previousSibling;\n        while (isZWS(tabPreviousSibling)) {\n            tabPreviousSibling = tabPreviousSibling.previousSibling;\n        }\n        if (isEditorTab(tabPreviousSibling)) {\n            node.style.width = '40px';\n        } else {\n            const editable = closestElement(node, '.odoo-editor-editable');\n            if (editable?.firstElementChild) {\n                const nodeRect = node.getBoundingClientRect();\n                const referenceRect = editable.firstElementChild.getBoundingClientRect();\n                // Values from getBoundingClientRect() are all zeros during\n                // Editor startup or saving. We cannot recalculate the tabs\n                // width in thoses cases.\n                if (nodeRect.width && referenceRect.width) {\n                    const width = (nodeRect.left - referenceRect.left) % 40;\n                    node.style.width = (40 - width) + 'px';\n                }\n            }\n        }\n    } else if (node.nodeName === 'A') {\n        // Ensure links have ZWNBSPs so the selection can be set at their edges.\n        padLinkWithZws(root, node);\n    } else if (\n        node.nodeType === Node.TEXT_NODE &&\n        node.textContent.includes('\\uFEFF') &&\n        !closestElement(node, 'a') &&\n        !(\n            closestElement(root, '[contenteditable=true]') &&\n            getTraversedNodes(closestElement(root, '[contenteditable=true]')).includes(node)\n        )\n    ) {\n        const startsWithLegitZws = node.textContent.startsWith('\\uFEFF') && node.previousSibling && node.previousSibling.nodeName === 'A';\n        const endsWithLegitZws = node.textContent.endsWith('\\uFEFF') && node.nextSibling && node.nextSibling.nodeName === 'A';\n        let newText = node.textContent.replace(/\\uFEFF/g, '');\n        if (startsWithLegitZws) {\n            newText = '\\uFEFF' + newText;\n        }\n        if (endsWithLegitZws) {\n            newText = newText + '\\uFEFF';\n        }\n        if (newText !== node.textContent) {\n            // We replace the text node with a new text node with the\n            // update text rather than just changing the text content of\n            // the node because these two methods create different\n            // mutations and at least the tour system breaks if all we\n            // send here is a text content change.\n            let replacement;\n            if (newText.length) {\n                replacement = document.createTextNode(newText);\n                node.before(replacement);\n            } else {\n                replacement = node.parentElement;\n            }\n            node.remove();\n            node = replacement; // The node has been removed, update the reference.\n        }\n    }\n    return node;\n}\n\n/**\n * Sanitize a node tree and return the sanitized node.\n *\n * @param {Node} nodeToSanitize the node to sanitize\n * @param {Node} [root] the root of the tree to sanitize (will not sanitize nodes outside of this tree)\n * @returns {Node} the sanitized node\n */\nexport function sanitize(nodeToSanitize, root = nodeToSanitize) {\n    const start = nodeToSanitize.ownerDocument.getSelection()?.anchorNode;\n    const block = closestBlock(nodeToSanitize);\n    if (block && root.contains(block)) {\n        // If the node is a list, start sanitization from its parent to ensure\n        // adjacent lists are merged when needed.\n        const isList = ['UL', 'OL'].includes(block.nodeName);\n        let node = isList ? block.parentElement : block;\n\n        // Sanitize the tree.\n        while (node && !(root.isConnected && !node.isConnected) && root.contains(node)) {\n            if (!isProtected(node)) {\n                node = sanitizeNode(node, root); // The node itself might be replaced during sanitization.\n            }\n            node = node.firstChild || node.nextSibling || ancestors(node, root).find(a => a.nextSibling)?.nextSibling;\n        }\n\n        // Ensure unique ids on checklists and stars.\n        const elementsWithId = [...block.querySelectorAll('[id^=checkId-]')];\n        const maxId = Math.max(...[0, ...elementsWithId.map(node => +node.getAttribute('id').substring(8))]);\n        let nextId = maxId + 1;\n        const ids = [];\n        for (const node of block.querySelectorAll('[id^=checkId-], .o_checklist > li, .o_stars')) {\n            if (\n                !node.classList.contains('o_stars') && (\n                    !node.parentElement.classList.contains('o_checklist') ||\n                    [...node.children].some(child => ['UL', 'OL'].includes(child.nodeName))\n            )) {\n                // Remove unique ids from checklists and stars from elements\n                // that are no longer checklist items or stars, and from\n                // parents of nested lists.\n                node.removeAttribute('id')\n            } else {\n                // Add/change IDs where needed, and ensure they're unique.\n                let id = node.getAttribute('id');\n                if (!id || ids.includes(id)) {\n                    id = `checkId-${nextId}`;\n                    nextId++;\n                    node.setAttribute('id', id);\n                }\n                ids.push(id);\n            }\n        }\n\n        // Update link URL if label is a new valid link.\n        const startEl = start && closestElement(start, 'a');\n        if (startEl && root.contains(startEl)) {\n            const label = startEl.innerText;\n            const url = deduceURLfromText(label, startEl);\n            if (url) {\n                startEl.setAttribute('href', url);\n            }\n        }\n    }\n    return nodeToSanitize;\n}\n", "/** @odoo-module **/\n// TODO: avoid empty keys when not necessary to reduce request size\nexport function serializeNode(node, nodesToStripFromChildren = new Set()) {\n    if (!node.oid) {\n        return;\n    }\n    const result = {\n        nodeType: node.nodeType,\n        oid: node.oid,\n    };\n    if (node.nodeType === Node.TEXT_NODE) {\n        result.textValue = node.nodeValue;\n    } else if (node.nodeType === Node.ELEMENT_NODE) {\n        result.tagName = node.tagName;\n        result.children = [];\n        result.attributes = {};\n        for (let i = 0; i < node.attributes.length; i++) {\n            result.attributes[node.attributes[i].name] = node.attributes[i].value;\n        }\n        let child = node.firstChild;\n        // Don't serialize transient nodes\n        if (![\"true\", \"\"].includes(node.dataset.oeTransientContent)) {\n            while (child) {\n                if (!nodesToStripFromChildren.has(child.oid)) {\n                    const serializedChild = serializeNode(child, nodesToStripFromChildren);\n                    if (serializedChild) {\n                        result.children.push(serializedChild);\n                    }\n                }\n                child = child.nextSibling;\n            }\n        }\n    }\n    return result;\n}\n\nexport function unserializeNode(obj) {\n    if (!obj) {\n        return;\n    }\n    let result = undefined;\n    if (obj.nodeType === Node.TEXT_NODE) {\n        result = document.createTextNode(obj.textValue);\n    } else if (obj.nodeType === Node.ELEMENT_NODE) {\n        result = document.createElement(obj.tagName);\n        for (const key in obj.attributes) {\n            result.setAttribute(key, obj.attributes[key]);\n        }\n        obj.children.forEach(child => result.append(unserializeNode(child)));\n    } else {\n        console.warn('unknown node type');\n    }\n    if (result) {\n        result.oid = obj.oid;\n        return result;\n    }\n}\n\nexport function serializeSelection(selection) {\n    if (\n        selection &&\n        selection.anchorNode &&\n        selection.anchorNode.oid &&\n        typeof selection.anchorOffset !==  'undefined' &&\n        selection.focusNode &&\n        selection.anchorNode.oid &&\n        typeof selection.focusOffset !==  'undefined'\n    ) {\n        return {\n            anchorNodeOid: selection.anchorNode.oid,\n            anchorOffset: selection.anchorOffset,\n            focusNodeOid: selection.focusNode.oid,\n            focusOffset: selection.focusOffset,\n        };\n    } else {\n        return {\n            anchorNodeOid: undefined,\n            anchorOffset: undefined,\n            focusNodeOid: undefined,\n            focusOffset: undefined,\n        };\n    }\n}\n", "/** @odoo-module **/\nimport { getRangePosition } from '../utils/utils.js';\n\nexport class TablePicker extends EventTarget {\n    constructor(options = {}) {\n        super();\n        this.options = options;\n        this.options.minRowCount = this.options.minRowCount || 3;\n        this.options.minColCount = this.options.minColCount || 3;\n        this.options.getContextFromParentRect = this.options.getContextFromParentRect || (() => ({ top: 0, left: 0 }));\n\n        this.rowNumber = this.options.minRowCount;\n        this.colNumber = this.options.minColCount;\n\n        this.tablePickerWrapper = document.createElement('div');\n        this.tablePickerWrapper.classList.add('oe-tablepicker-wrapper');\n        this.tablePickerWrapper.innerHTML = `\n            <div class=\"oe-tablepicker\"></div>\n            <div class=\"oe-tablepicker-size\"></div>\n        `;\n\n        if (this.options.floating) {\n            this.tablePickerWrapper.style.position = 'absolute';\n            this.tablePickerWrapper.classList.add('oe-floating');\n        }\n\n        this.tablePickerElement = this.tablePickerWrapper.querySelector('.oe-tablepicker');\n        this.tablePickerSizeViewElement =\n            this.tablePickerWrapper.querySelector('.oe-tablepicker-size');\n\n        this.el = this.tablePickerWrapper;\n\n        this.hide();\n    }\n\n    render() {\n        this.tablePickerElement.innerHTML = '';\n\n        const colCount = Math.max(this.colNumber, this.options.minRowCount);\n        const rowCount = Math.max(this.rowNumber, this.options.minRowCount);\n        const extraCol = 1;\n        const extraRow = 1;\n\n        for (let rowNumber = 1; rowNumber <= rowCount + extraRow; rowNumber++) {\n            const rowElement = document.createElement('div');\n            rowElement.classList.add('oe-tablepicker-row');\n            this.tablePickerElement.appendChild(rowElement);\n            for (let colNumber = 1; colNumber <= colCount + extraCol; colNumber++) {\n                const cell = this.el.ownerDocument.createElement('div');\n                cell.classList.add('oe-tablepicker-cell', 'btn');\n                rowElement.appendChild(cell);\n\n                if (rowNumber <= this.rowNumber && colNumber <= this.colNumber) {\n                    cell.classList.add('active');\n                }\n\n                const bindMouseMove = () => {\n                    cell.addEventListener('mouseover', () => {\n                        if (this.colNumber !== colNumber || this.rowNumber != rowNumber) {\n                            this.colNumber = colNumber;\n                            this.rowNumber = rowNumber;\n                            this.render();\n                        }\n                    });\n                    this.el.ownerDocument.removeEventListener('mousemove', bindMouseMove);\n                };\n                this.el.ownerDocument.addEventListener('mousemove', bindMouseMove);\n                cell.addEventListener('mousedown', this.selectCell.bind(this));\n            }\n        }\n\n        this.tablePickerSizeViewElement.textContent = `${this.colNumber}x${this.rowNumber}`;\n    }\n\n    show() {\n        this.reset();\n        this.el.style.display = 'block';\n        if (this.options.floating) {\n            this._showFloating();\n        }\n    }\n\n    hide() {\n        this.el.style.display = 'none';\n    }\n\n    reset() {\n        this.rowNumber = this.options.minRowCount;\n        this.colNumber = this.options.minColCount;\n        this.render();\n    }\n\n    selectCell() {\n        this.dispatchEvent(\n            new CustomEvent('cell-selected', {\n                detail: { colNumber: this.colNumber, rowNumber: this.rowNumber },\n            }),\n        );\n    }\n\n    _showFloating() {\n        const isRtl = this.options.direction === 'rtl';\n        const keydown = e => {\n            const actions = {\n                ArrowRight: {\n                    colNumber: (this.colNumber + (isRtl ? -1 : 1)) || 1,\n                    rowNumber: this.rowNumber,\n                },\n                ArrowLeft: {\n                    colNumber: (this.colNumber + (isRtl ? 1 : -1)) || 1,\n                    rowNumber: this.rowNumber,\n                },\n                ArrowUp: {\n                    colNumber: this.colNumber,\n                    rowNumber: this.rowNumber - 1 || 1,\n                },\n                ArrowDown: {\n                    colNumber: this.colNumber,\n                    rowNumber: this.rowNumber + 1,\n                },\n            };\n            const action = actions[e.key];\n            if (action) {\n                this.rowNumber = action.rowNumber || this.rowNumber;\n                this.colNumber = action.colNumber || this.colNumber;\n                this.render();\n\n                e.preventDefault();\n            } else if (e.key === 'Enter') {\n                this.selectCell();\n                e.preventDefault();\n            } else if (e.key === 'Escape') {\n                stop();\n                e.preventDefault();\n            }\n        };\n\n        const offset = getRangePosition(this.el, this.options.document, this.options);\n        if (isRtl) {\n            this.el.style.right = `${offset.right}px`;\n        } else {\n            this.el.style.left = `${offset.left}px`;\n        }\n\n        this.el.style.top = `${offset.top}px`;\n\n        const stop = () => {\n            this.hide();\n            this.options.document.removeEventListener('mousedown', stop);\n            this.removeEventListener('cell-selected', stop);\n            this.options.document.removeEventListener('keydown', keydown, true);\n        };\n\n        // Allow the mousedown that activate this command callback to release before adding the listener.\n        setTimeout(() => {\n            this.options.document.addEventListener('mousedown', stop);\n        });\n        this.options.document.addEventListener('keydown', keydown, true);\n        this.addEventListener('cell-selected', stop);\n    }\n}\n", "/** @odoo-module **/\n/**\n * program: \"patienceDiff\" algorithm implemented in javascript.\n * author: Jonathan Trent\n * version: 2.0\n *\n * use:  patienceDiff( aLines[], bLines[], diffPlusFlag)\n *\n * where:\n *      aLines[] contains the original text lines.\n *      bLines[] contains the new text lines.\n *      diffPlusFlag if true, returns additional arrays with the subset of lines that were\n *          either deleted or inserted.  These additional arrays are used by patienceDiffPlus.\n *\n * returns an object with the following properties:\n *      lines[] with properties of:\n *          line containing the line of text from aLines or bLines.\n *          aIndex referencing the index in aLine[].\n *          bIndex referencing the index in bLines[].\n *              (Note:  The line is text from either aLines or bLines, with aIndex and bIndex\n *               referencing the original index. If aIndex === -1 then the line is new from bLines,\n *               and if bIndex === -1 then the line is old from aLines.)\n *          moved is true if the line was moved from elsewhere in aLines[] or bLines[].\n *      lineCountDeleted is the number of lines from aLines[] not appearing in bLines[].\n *      lineCountInserted is the number of lines from bLines[] not appearing in aLines[].\n *      lineCountMoved is the number of lines moved outside of the Longest Common Subsequence.\n *\n */\n\nexport function patienceDiff(aLines, bLines, diffPlusFlag) {\n    //\n    // findUnique finds all unique values in arr[lo..hi], inclusive.  This\n    // function is used in preparation for determining the longest common\n    // subsequence.  Specifically, it first reduces the array range in question\n    // to unique values.\n    //\n    // Returns an ordered Map, with the arr[i] value as the Map key and the\n    // array index i as the Map value.\n    //\n    function findUnique(arr, lo, hi) {\n        var lineMap = new Map();\n\n        for (let i = lo; i <= hi; i++) {\n            let line = arr[i];\n            if (lineMap.has(line)) {\n                lineMap.get(line).count++;\n                lineMap.get(line).index = i;\n            } else {\n                lineMap.set(line, { count: 1, index: i });\n            }\n        }\n\n        lineMap.forEach((val, key, map) => {\n            if (val.count !== 1) {\n                map.delete(key);\n            } else {\n                map.set(key, val.index);\n            }\n        });\n\n        return lineMap;\n    }\n\n    //\n    // uniqueCommon finds all the unique common entries between aArray[aLo..aHi]\n    // and bArray[bLo..bHi], inclusive.  This function uses findUnique to pare\n    // down the aArray and bArray ranges first, before then walking the comparison\n    // between the two arrays.\n    //\n    // Returns an ordered Map, with the Map key as the common line between aArray\n    // and bArray, with the Map value as an object containing the array indexes of\n    // the matching unique lines.\n    //\n    function uniqueCommon(aArray, aLo, aHi, bArray, bLo, bHi) {\n        let ma = findUnique(aArray, aLo, aHi);\n        let mb = findUnique(bArray, bLo, bHi);\n\n        ma.forEach((val, key, map) => {\n            if (mb.has(key)) {\n                map.set(key, { indexA: val, indexB: mb.get(key) });\n            } else {\n                map.delete(key);\n            }\n        });\n\n        return ma;\n    }\n\n    //\n    // longestCommonSubsequence takes an ordered Map from the function uniqueCommon\n    // and determines the Longest Common Subsequence (LCS).\n    //\n    // Returns an ordered array of objects containing the array indexes of the\n    // matching lines for a LCS.\n    //\n    function longestCommonSubsequence(abMap) {\n        var ja = [];\n\n        // First, walk the list creating the jagged array.\n        abMap.forEach((val, key, map) => {\n            let i = 0;\n            while (ja[i] && ja[i][ja[i].length - 1].indexB < val.indexB) {\n                i++;\n            }\n\n            if (!ja[i]) {\n                ja[i] = [];\n            }\n\n            if (0 < i) {\n                val.prev = ja[i - 1][ja[i - 1].length - 1];\n            }\n\n            ja[i].push(val);\n        });\n\n        // Now, pull out the longest common subsequence.\n        var lcs = [];\n        if (0 < ja.length) {\n            let n = ja.length - 1;\n            var lcs = [ja[n][ja[n].length - 1]];\n            while (lcs[lcs.length - 1].prev) {\n                lcs.push(lcs[lcs.length - 1].prev);\n            }\n        }\n\n        return lcs.reverse();\n    }\n\n    // \"result\" is the array used to accumulate the aLines that are deleted, the\n    // lines that are shared between aLines and bLines, and the bLines that were\n    // inserted.\n    let result = [];\n    let deleted = 0;\n    let inserted = 0;\n\n    // aMove and bMove will contain the lines that don't match, and will be returned\n    // for possible searching of lines that moved.\n\n    let aMove = [];\n    let aMoveIndex = [];\n    let bMove = [];\n    let bMoveIndex = [];\n\n    //\n    // addToResult simply pushes the latest value onto the \"result\" array.  This\n    // array captures the diff of the line, aIndex, and bIndex from the aLines\n    // and bLines array.\n    //\n    function addToResult(aIndex, bIndex) {\n        if (bIndex < 0) {\n            aMove.push(aLines[aIndex]);\n            aMoveIndex.push(result.length);\n            deleted++;\n        } else if (aIndex < 0) {\n            bMove.push(bLines[bIndex]);\n            bMoveIndex.push(result.length);\n            inserted++;\n        }\n\n        result.push({\n            line: 0 <= aIndex ? aLines[aIndex] : bLines[bIndex],\n            aIndex: aIndex,\n            bIndex: bIndex,\n        });\n    }\n\n    //\n    // addSubMatch handles the lines between a pair of entries in the LCS.  Thus,\n    // this function might recursively call recurseLCS to further match the lines\n    // between aLines and bLines.\n    //\n    function addSubMatch(aLo, aHi, bLo, bHi) {\n        // Match any lines at the beginning of aLines and bLines.\n        while (aLo <= aHi && bLo <= bHi && aLines[aLo] === bLines[bLo]) {\n            addToResult(aLo++, bLo++);\n        }\n\n        // Match any lines at the end of aLines and bLines, but don't place them\n        // in the \"result\" array just yet, as the lines between these matches at\n        // the beginning and the end need to be analyzed first.\n        let aHiTemp = aHi;\n        while (aLo <= aHi && bLo <= bHi && aLines[aHi] === bLines[bHi]) {\n            aHi--;\n            bHi--;\n        }\n\n        // Now, check to determine with the remaining lines in the subsequence\n        // whether there are any unique common lines between aLines and bLines.\n        //\n        // If not, add the subsequence to the result (all aLines having been\n        // deleted, and all bLines having been inserted).\n        //\n        // If there are unique common lines between aLines and bLines, then let's\n        // recursively perform the patience diff on the subsequence.\n        let uniqueCommonMap = uniqueCommon(aLines, aLo, aHi, bLines, bLo, bHi);\n        if (uniqueCommonMap.size === 0) {\n            while (aLo <= aHi) {\n                addToResult(aLo++, -1);\n            }\n            while (bLo <= bHi) {\n                addToResult(-1, bLo++);\n            }\n        } else {\n            recurseLCS(aLo, aHi, bLo, bHi, uniqueCommonMap);\n        }\n\n        // Finally, let's add the matches at the end to the result.\n        while (aHi < aHiTemp) {\n            addToResult(++aHi, ++bHi);\n        }\n    }\n\n    //\n    // recurseLCS finds the longest common subsequence (LCS) between the arrays\n    // aLines[aLo..aHi] and bLines[bLo..bHi] inclusive.  Then for each subsequence\n    // recursively performs another LCS search (via addSubMatch), until there are\n    // none found, at which point the subsequence is dumped to the result.\n    //\n    function recurseLCS(aLo, aHi, bLo, bHi, uniqueCommonMap) {\n        var x = longestCommonSubsequence(\n            uniqueCommonMap || uniqueCommon(aLines, aLo, aHi, bLines, bLo, bHi),\n        );\n        if (x.length === 0) {\n            addSubMatch(aLo, aHi, bLo, bHi);\n        } else {\n            if (aLo < x[0].indexA || bLo < x[0].indexB) {\n                addSubMatch(aLo, x[0].indexA - 1, bLo, x[0].indexB - 1);\n            }\n\n            let i;\n            for (i = 0; i < x.length - 1; i++) {\n                addSubMatch(x[i].indexA, x[i + 1].indexA - 1, x[i].indexB, x[i + 1].indexB - 1);\n            }\n\n            if (x[i].indexA <= aHi || x[i].indexB <= bHi) {\n                addSubMatch(x[i].indexA, aHi, x[i].indexB, bHi);\n            }\n        }\n    }\n\n    recurseLCS(0, aLines.length - 1, 0, bLines.length - 1);\n\n    if (diffPlusFlag) {\n        return {\n            lines: result,\n            lineCountDeleted: deleted,\n            lineCountInserted: inserted,\n            lineCountMoved: 0,\n            aMove: aMove,\n            aMoveIndex: aMoveIndex,\n            bMove: bMove,\n            bMoveIndex: bMoveIndex,\n        };\n    }\n\n    return {\n        lines: result,\n        lineCountDeleted: deleted,\n        lineCountInserted: inserted,\n        lineCountMoved: 0,\n    };\n}\n", "/** @odoo-module **/\nimport { patienceDiff } from './patienceDiff.js';\nimport { closestBlock, getRangePosition } from '../utils/utils.js';\n\nconst REGEX_RESERVED_CHARS = /[\\\\^$.*+?()[\\]{}|]/g;\n/**\n * Make `num` cycle from 0 to `max`.\n */\nfunction cycle(num, max) {\n    const y = max + 1;\n    return ((num % y) + y) % y;\n}\n\n/**\n * interface PowerboxCommand {\n *     category: string;\n *     name: string;\n *     priority: number;\n *     description: string;\n *     fontawesome: string; // a fontawesome class name\n *     callback: () => void; // to execute when the command is picked\n *     isDisabled?: () => boolean; // return true to disable the command\n * }\n */\n\nexport class Powerbox {\n    constructor({\n        categories, commands, commandFilters, editable, getContextFromParentRect,\n        onShow, onStop, beforeCommand, afterCommand\n    } = {}) {\n        this.categories = categories;\n        this.commands = commands;\n        this.commandFilters = commandFilters || [];\n        this.editable = editable;\n        this.getContextFromParentRect = getContextFromParentRect;\n        this.onShow = onShow;\n        this.onStop = onStop;\n        this.beforeCommand = beforeCommand;\n        this.afterCommand = afterCommand;\n        this.isOpen = false;\n        this.document = editable.ownerDocument;\n\n        // Draw the powerbox.\n        this.el = document.createElement('div');\n        this.el.className = 'oe-powerbox-wrapper position-absolute overflow-hidden';\n        this.el.style.display = 'none';\n        document.body.append(this.el);\n        this._mainWrapperElement = document.createElement('div');\n        this._mainWrapperElement.className = 'oe-powerbox-mainWrapper flex-skrink-1 overflow-auto py-2';\n        this.el.append(this._mainWrapperElement);\n        this.el.addEventListener('mousedown', ev => ev.stopPropagation());\n\n        // Set up events for later binding.\n        this._boundOnKeyup = this._onKeyup.bind(this);\n        this._boundOnKeydown = this._onKeydown.bind(this);\n        this._boundClose = this.close.bind(this);\n        this._events = [\n            [this.document, 'keyup', this._boundOnKeyup],\n            [this.document, 'keydown', this._boundOnKeydown, true],\n            [this.document, 'mousedown', this._boundClose],\n        ]\n        // If the global document is different from the provided\n        // options.document, which happens when the editor is inside an iframe,\n        // we need to listen to the mouse event on both documents to be sure the\n        // Powerbox will always close when clicking outside of it.\n        if (document !== this.document) {\n            this._events.push(\n                [document, 'mousedown', this._boundClose],\n            );\n        }\n\n    }\n    destroy() {\n        if (this.isOpen) {\n            this.close();\n        }\n        this.el.remove();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public\n    // -------------------------------------------------------------------------\n\n    /**\n     * Open the Powerbox with the given commands or with all instance commands.\n     *\n     * @param {PowerboxCommand[]} [commands=this.commands]\n     * @param {Array<{name: string, priority: number}} [categories=this.categories]\n     */\n    open(commands=this.commands, categories=this.categories) {\n        commands = (commands || []).map(command => ({\n            ...command,\n            category: command.category || '',\n            name: command.name || '',\n            priority: command.priority || 0,\n            description: command.description || '',\n            callback: command.callback || (() => {}),\n        }));\n        categories = (categories || []).map(category => ({\n            name: category.name || '',\n            priority: category.priority || 0,\n        }));\n        const order = (a, b) => b.priority - a.priority || a.name.localeCompare(b.name);\n        // Remove duplicate category names, keeping only last declared version,\n        // and order them.\n        categories = [...categories].reverse().filter((category, index, cats) => (\n            cats.findIndex(cat => cat.name === category.name) === index\n        )).sort(order);\n\n        // Apply optional filters to disable commands, then order them.\n        for (let filter of this.commandFilters) {\n            commands = filter(commands);\n        }\n        commands = commands.filter(command => !command.isDisabled || !command.isDisabled()).sort(order);\n        commands = this._groupCommands(commands, categories).flatMap(group => group[1]);\n\n        const selection = this.document.getSelection();\n        const currentBlock = (selection && closestBlock(selection.anchorNode)) || this.editable;\n        this._context = {\n            commands, categories, filteredCommands: commands, selectedCommand: undefined,\n            initialTarget: currentBlock, initialValue: currentBlock.textContent,\n            lastText: undefined,\n        }\n        this.isOpen = true;\n        this._render(this._context.commands, this._context.categories);\n        this._bindEvents();\n        this.show();\n    }\n    /**\n     * Close the Powerbox without destroying it. Unbind events, reset context\n     * and call the optional `onStop` hook.\n     */\n    close() {\n        this.isOpen = false;\n        this.hide();\n        this._context = undefined;\n        this._unbindEvents();\n        this.onStop && this.onStop();\n    };\n    /**\n     * Show the Powerbox and position it. Call the optional `onShow` hook.\n     */\n    show() {\n        this.onShow && this.onShow();\n        this.el.style.display = 'flex';\n        this._resetPosition();\n    }\n    /**\n     * Hide the Powerbox. If the Powerbox is active, close it.\n     *\n     * @see close\n     */\n    hide() {\n        this.el.style.display = 'none';\n        if (this.isOpen) {\n            this.close();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Private\n    // -------------------------------------------------------------------------\n\n    /**\n     * Render the Powerbox with the given commands, grouped by `category`.\n     *\n     * @private\n     * @param {PowerboxCommand[]} commands\n     * @param {Array<{name: string, priority: number}} categories\n     */\n    _render(commands, categories) {\n        const parser = new DOMParser();\n        this._mainWrapperElement.innerHTML = '';\n        this._hoverActive = false;\n        this._mainWrapperElement.classList.toggle('oe-powerbox-noResult', commands.length === 0);\n        this._context.selectedCommand = commands.find(command => command === this._context.selectedCommand) || commands[0];\n        for (const [category, categoryCommands] of this._groupCommands(commands, categories)) {\n            const categoryWrapperEl = parser.parseFromString(`\n                <div class=\"oe-powerbox-categoryWrapper\">\n                    <div class=\"oe-powerbox-category mx-3 my-1 text-uppercase\"></div>\n                </div>`, 'text/html').body.firstChild;\n            this._mainWrapperElement.append(categoryWrapperEl);\n            categoryWrapperEl.firstElementChild.innerText = category;\n            for (const command of categoryCommands) {\n                const commandElWrapper = document.createElement('div');\n                commandElWrapper.className = 'oe-powerbox-commandWrapper d-flex align-items-center px-3 py-2 cursor-pointer';\n                commandElWrapper.classList.toggle('active', this._context.selectedCommand === command);\n                commandElWrapper.replaceChildren(...parser.parseFromString(`\n                    <div class=\"oe-powerbox-commandLeftCol border rounded\">\n                        <i class=\"oe-powerbox-commandImg d-flex align-items-center justify-content-center fa\"></i>\n                    </div>\n                    <div class=\"oe-powerbox-commandRightCol ms-3\">\n                        <div class=\"oe-powerbox-commandName\"></div>\n                        <div class=\"oe-powerbox-commandDescription\"></div>\n                    </div>`, 'text/html').body.children);\n                commandElWrapper.querySelector('.oe-powerbox-commandImg').classList.add(command.fontawesome);\n                commandElWrapper.querySelector('.oe-powerbox-commandName').innerText = command.name;\n                commandElWrapper.querySelector('.oe-powerbox-commandDescription').innerText = command.description;\n                categoryWrapperEl.append(commandElWrapper);\n                // Handle events on command (activate and pick).\n                commandElWrapper.addEventListener('mousemove', () => {\n                    this.el.querySelector('.oe-powerbox-commandWrapper.active').classList.remove('active');\n                    this._context.selectedCommand = command;\n                    commandElWrapper.classList.add('active');\n                });\n                commandElWrapper.addEventListener('click', ev => {\n                        ev.preventDefault();\n                        ev.stopImmediatePropagation();\n                        this._pickCommand(command);\n                    }, true,\n                );\n            }\n        }\n        // Hide category name if there is only a single one.\n        if (this._mainWrapperElement.childElementCount === 1) {\n            this._mainWrapperElement.querySelector('.oe-powerbox-category').style.display = 'none';\n        }\n        this._resetPosition();\n    }\n    /**\n     * Handle the selection of a command: call the command's callback. Also call\n     * the `beforeCommand` and `afterCommand` hooks if they exists.\n     *\n     * @private\n     * @param {PowerboxCommand} [command=this._context.selectedCommand]\n     */\n    async _pickCommand(command=this._context.selectedCommand) {\n        if (command) {\n            if (this.beforeCommand) {\n                await this.beforeCommand();\n            }\n            await command.callback();\n            if (this.afterCommand) {\n                await this.afterCommand();\n            }\n        }\n        this.close();\n    };\n    /**\n     * Takes a list of commands and returns an object whose keys are all\n     * existing category names and whose values are each of these categories'\n     * commands. Categories with no commands are removed.\n     *\n     * @private\n     * @param {PowerboxCommand[]} commands\n     * @param {Array<{name: string, priority: number}} categories\n     * @returns {{Array<[string, PowerboxCommand[]]>}>}\n     */\n    _groupCommands(commands, categories) {\n        const groups = [];\n        for (const category of categories) {\n            const categoryCommands = commands.filter(command => command.category === category.name);\n            commands = commands.filter(command => command.category !== category.name);\n            groups.push([category.name, categoryCommands]);\n        }\n        // If commands remain, it means they declared categories that didn't\n        // exist. Add these categories alphabetically at the end of the list.\n        const remainingCategories = [...new Set(commands.map(command => command.category))];\n        for (const categoryName of remainingCategories.sort((a, b) => a.localeCompare(b))) {\n            const categoryCommands = commands.filter(command => command.category === categoryName);\n            groups.push([categoryName, categoryCommands]);\n        }\n        return groups.filter(group => group[1].length);\n    }\n    /**\n     * Take an array of commands or categories and return a reordered copy of\n     * it, based on their respective priorities.\n     *\n     * @param {PowerboxCommand[] | Array<{name: string, priority: number}} commandsOrCategories\n     * @returns {PowerboxCommand[] | Array<{name: string, priority: number}}\n     */\n    _orderByPriority(commandsOrCategories) {\n        return [...commandsOrCategories].sort((a, b) => b.priority - a.priority || a.name.localeCompare(b.name));\n    }\n    /**\n     * Recompute the Powerbox's position base on the selection in the document.\n     *\n     * @private\n     */\n    _resetPosition() {\n        let options = {};\n        if (this.getContextFromParentRect) {\n            options['parentContextRect'] = this.getContextFromParentRect();\n        }\n        const position = getRangePosition(this.el, this.document, options);\n        if (position) {\n            let { left, top } = position;\n            this.el.style.left = `${left}px`;\n            this.el.style.top = `${top}px`;\n        } else {\n            this.hide();\n        }\n    }\n    /**\n     * Add all events to their given target, based on @see _events.\n     *\n     * @private\n     */\n    _bindEvents() {\n        for (const [target, eventName, callback, option] of this._events) {\n            target.addEventListener(eventName, callback, option);\n        }\n    }\n    /**\n     * Remove all events from their given target, based on @see _events.\n     *\n     * @private\n     */\n    _unbindEvents() {\n        for (const [target, eventName, callback, option] of this._events) {\n            target.removeEventListener(eventName, callback, option);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Handlers\n    // -------------------------------------------------------------------------\n\n    /**\n     * Handle keyup events to filter commands based on what was typed, and\n     * prevent changing selection when using the arrow keys.\n     *\n     * @private\n     * @param {KeyboardEvent} ev\n     */\n    _onKeyup(ev) {\n        if (ev.key === 'ArrowDown' || ev.key === 'ArrowUp') {\n            ev.preventDefault();\n        } else {\n            const diff = patienceDiff(\n                this._context.initialValue.split(''),\n                this._context.initialTarget.textContent.split(''),\n                true,\n            );\n            this._context.lastText = diff.bMove.join('').replaceAll('\\ufeff', '');\n            const selection = this.document.getSelection();\n            if (\n                this._context.lastText.match(/\\s/) ||\n                !selection ||\n                this._context.initialTarget !== closestBlock(selection.anchorNode)\n            ) {\n                this.close();\n            } else {\n                const term = this._context.lastText.toLowerCase()\n                    .replaceAll(/\\s/g, '\\\\s')\n                    .replaceAll('\\u200B', '')\n                    .replace(REGEX_RESERVED_CHARS, '\\\\$&');\n                if (term.length) {\n                    const exactRegex = new RegExp(term, 'i');\n                    const fuzzyRegex = new RegExp(term.match(/\\\\.|./g).join('.*'), 'i');\n                    this._context.filteredCommands = this._context.commands.filter(command => {\n                        const commandText = (command.category + ' ' + command.name);\n                        const commandDescription = command.description.replace(/\\s/g, '');\n                        return commandText.match(fuzzyRegex) || commandDescription.match(exactRegex);\n                    });\n                } else {\n                    this._context.filteredCommands = this._context.commands;\n                }\n                this._render(this._context.filteredCommands, this._context.categories);\n            }\n        }\n    }\n    /**\n     * Handle keydown events to add keyboard interactions with the Powerbox.\n     *\n     * @private\n     * @param {KeyboardEvent} ev\n     */\n    _onKeydown(ev) {\n        if (ev.key === 'Enter') {\n            ev.stopImmediatePropagation();\n            this._pickCommand();\n            ev.preventDefault();\n        } else if (ev.key === 'Escape') {\n            ev.stopImmediatePropagation();\n            this.close();\n            ev.preventDefault();\n        } else if (ev.key === 'Backspace' && !this._context.lastText) {\n            this.close();\n        } else if (ev.key === 'ArrowDown' || ev.key === 'ArrowUp') {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n\n            const commandIndex = this._context.filteredCommands.findIndex(\n                command => command === this._context.selectedCommand,\n            );\n            if (this._context.filteredCommands.length && commandIndex !== -1) {\n                const nextIndex = commandIndex + (ev.key === 'ArrowDown' ? 1 : -1);\n                const newIndex = cycle(nextIndex, this._context.filteredCommands.length - 1);\n                this._context.selectedCommand = this._context.filteredCommands[newIndex];\n            } else {\n                this._context.selectedCommand = undefined;\n            }\n            this._render(this._context.filteredCommands, this._context.categories);\n            const activeCommand = this.el.querySelector('.oe-powerbox-commandWrapper.active');\n            if (activeCommand) {\n                activeCommand.scrollIntoView({block: 'nearest', inline: 'nearest'});\n            }\n        }\n    }\n}\n", "/** @odoo-module **/\nimport { childNodeIndex, isBlock } from '../utils/utils.js';\n\nText.prototype.oAlign = function (offset, mode) {\n    this.parentElement.oAlign(childNodeIndex(this), mode);\n};\n/**\n * This does not check for command state\n * @param {*} offset\n * @param {*} mode 'left', 'right', 'center' or 'justify'\n */\nHTMLElement.prototype.oAlign = function (offset, mode) {\n    if (!isBlock(this)) {\n        return this.parentElement.oAlign(childNodeIndex(this), mode);\n    }\n    const { textAlign } = getComputedStyle(this);\n    const alreadyAlignedLeft = textAlign === 'start' || textAlign === 'left';\n    const shouldApplyStyle = !(alreadyAlignedLeft && mode === 'left');\n    if (shouldApplyStyle) {\n        this.style.textAlign = mode;\n    }\n};\n", "/** @odoo-module **/\nimport { REGEX_BOOTSTRAP_COLUMN } from '../utils/constants.js';\nimport {\n    ancestors,\n    descendants,\n    childNodeIndex,\n    closestBlock,\n    closestElement,\n    closestPath,\n    DIRECTIONS,\n    findNode,\n    getCursors,\n    getDeepRange,\n    getInSelection,\n    getListMode,\n    getSelectedNodes,\n    getTraversedNodes,\n    insertAndSelectZws,\n    insertText,\n    isBlock,\n    isColorGradient,\n    isSelectionFormat,\n    isShrunkBlock,\n    isSelfClosingElement,\n    leftLeafFirstPath,\n    preserveCursor,\n    rightPos,\n    setSelection,\n    setCursorStart,\n    setTagName,\n    splitAroundUntil,\n    splitElement,\n    splitTextNode,\n    startPos,\n    nodeSize,\n    allowsParagraphRelatedElements,\n    isUnbreakable,\n    makeContentsInline,\n    unwrapContents,\n    getColumnIndex,\n    pxToFloat,\n    getRowIndex,\n    parseHTML,\n    formatSelection,\n    getDeepestPosition,\n    fillEmpty,\n    isEmptyBlock,\n    isWhitespace,\n    isVisibleTextNode,\n    getCursorDirection,\n    resetOuids,\n    FONT_SIZE_CLASSES,\n    TEXT_STYLE_CLASSES,\n    padLinkWithZws,\n    isLinkEligibleForZwnbsp,\n    paragraphRelatedElements,\n    lastLeaf,\n    firstLeaf,\n    convertList,\n} from '../utils/utils.js';\n\nconst TEXT_CLASSES_REGEX = /\\btext-[^\\s]*\\b/;\nconst BG_CLASSES_REGEX = /\\bbg-[^\\s]*\\b/;\n\nfunction align(editor, mode) {\n    const sel = editor.document.getSelection();\n    const visitedBlocks = new Set();\n    const traversedNode = getTraversedNodes(editor.editable);\n    for (const node of traversedNode) {\n        if (isVisibleTextNode(node)) {\n            const block = closestBlock(node);\n            if (!visitedBlocks.has(block)) {\n                const hasModifier = getComputedStyle(block).textAlign === mode;\n                if (!hasModifier && block.isContentEditable) {\n                    block.oAlign(sel.anchorOffset, mode);\n                }\n                visitedBlocks.add(block);\n            }\n        }\n    }\n}\n\n/**\n * Applies a css or class color (fore- or background-) to an element.\n * Replace the color that was already there if any.\n *\n * @param {Element} element\n * @param {string} color hexadecimal or bg-name/text-name class\n * @param {string} mode 'color' or 'backgroundColor'\n */\nfunction colorElement(element, color, mode) {\n    const newClassName = element.className\n        .replace(mode === 'color' ? TEXT_CLASSES_REGEX : BG_CLASSES_REGEX, '')\n        .replace(/\\btext-gradient\\b/g, '') // cannot be combined with setting a background\n        .replace(/\\s+/, ' ');\n    element.className !== newClassName && (element.className = newClassName);\n    element.style['background-image'] = '';\n    if (mode === 'backgroundColor') {\n        element.style['background'] = '';\n    }\n    if (color.startsWith('text') || color.startsWith('bg-')) {\n        element.style[mode] = '';\n        element.classList.add(color);\n    } else if (isColorGradient(color)) {\n        element.style[mode] = '';\n        if (mode === 'color') {\n            element.style['background'] = '';\n            element.style['background-image'] = color;\n            element.classList.add('text-gradient');\n        } else {\n            element.style['background-image'] = color;\n        }\n    } else {\n        element.style[mode] = color;\n    }\n}\n\n/**\n * Returns true if the given element has a visible color (fore- or\n * -background depending on the given mode).\n *\n * @param {Element} element\n * @param {string} mode 'color' or 'backgroundColor'\n * @returns {boolean}\n */\nfunction hasColor(element, mode) {\n    const style = element.style;\n    const parent = element.parentNode;\n    const classRegex = mode === 'color' ? TEXT_CLASSES_REGEX : BG_CLASSES_REGEX;\n    if (isColorGradient(style['background-image'])) {\n        if (element.classList.contains('text-gradient')) {\n            if (mode === 'color') {\n                return true;\n            }\n        } else {\n            if (mode !== 'color') {\n                return true;\n            }\n        }\n    }\n    return (\n        (style[mode] && style[mode] !== 'inherit' && (!parent || style[mode] !== parent.style[mode])) ||\n        (classRegex.test(element.className) &&\n            (!parent || getComputedStyle(element)[mode] !== getComputedStyle(parent)[mode]))\n    );\n}\n\n// This is a whitelist of the commands that are implemented by the\n// editor itself rather than the node prototypes. It might be\n// possible to switch the conditions and test if the method exist on\n// `sel.anchorNode` rather than relying on an expicit whitelist, but\n// the behavior would change if a method name exists both on the\n// editor and on the nodes. This is too risky to change in the\n// absence of a strong test suite, so the whitelist stays for now.\nexport const editorCommands = {\n    insert: (editor, content) => {\n        if (!content) return;\n        const selection = editor.document.getSelection();\n        let startNode;\n        let insertBefore = false;\n        if (!selection.isCollapsed) {\n            editor.deleteRange(selection);\n        }\n        const range = selection.getRangeAt(0);\n        const block = closestBlock(selection.anchorNode);\n        const isSelectionAtStart = firstLeaf(block) === selection.anchorNode && selection.anchorOffset === 0;\n        const isSelectionAtEnd = lastLeaf(block) === selection.focusNode && selection.focusOffset === nodeSize(selection.focusNode);\n        if (range.startContainer.nodeType === Node.TEXT_NODE) {\n            insertBefore = !range.startOffset;\n            splitTextNode(range.startContainer, range.startOffset, DIRECTIONS.LEFT);\n            startNode = range.startContainer;\n        }\n\n        const container = document.createElement('fake-element');\n        const containerFirstChild = document.createElement('fake-element-fc');\n        const containerLastChild = document.createElement('fake-element-lc');\n\n        if (typeof content === 'string') {\n            container.textContent = content;\n        } else {\n            container.replaceChildren(content);\n        }\n\n        // In case the html inserted starts with a list and will be inserted within\n        // a list, unwrap the list elements from the list.\n        const isList = node => ['UL', 'OL'].includes(node.nodeName);\n        const hasSingleChild = container.childNodes.length === 1;\n        if (\n            closestElement(selection.anchorNode, 'UL, OL') &&\n            isList(container.firstChild)\n        ) {\n            unwrapContents(container.firstChild);\n        }\n        // Similarly if the html inserted ends with a list.\n        if (\n            closestElement(selection.focusNode, 'UL, OL') &&\n            isList(container.lastChild) &&\n            !hasSingleChild\n        ) {\n            unwrapContents(container.lastChild);\n        }\n\n        startNode = startNode || editor.document.getSelection().anchorNode;\n        const shouldUnwrap = (node) => (\n            [...paragraphRelatedElements, 'LI'].includes(node.nodeName) &&\n            block.textContent !== \"\" && node.textContent !== \"\" &&\n            (\n                block.nodeName === node.nodeName ||\n                ['BLOCKQUOTE', 'PRE', 'DIV'].includes(block.nodeName)\n            ) && selection.anchorNode.oid !== 'root'\n        );\n\n        // Empty block must contain a br element to allow cursor placement.\n        if (\n            container.lastElementChild &&\n            isBlock(container.lastElementChild) &&\n            !container.lastElementChild.hasChildNodes()\n        ) {\n            fillEmpty(container.lastElementChild);\n        }\n\n        // In case the html inserted is all contained in a single root <p> or <li>\n        // tag, we take the all content of the <p> or <li> and avoid inserting the\n        // <p> or <li>. The same is true for a <pre> inside a <pre>.\n        if (\n            container.childElementCount === 1 &&\n            (\n                ['P', 'LI'].includes(container.firstChild.nodeName) ||\n                shouldUnwrap(container.firstChild)\n            ) && selection.anchorNode.oid !== 'root'\n        ) {\n            const p = container.firstElementChild;\n            container.replaceChildren(...p.childNodes);\n        } else if (container.childElementCount > 1) {\n            // Grab the content of the first child block and isolate it.\n            if (shouldUnwrap(container.firstChild) && !isSelectionAtStart) {\n                // Unwrap the deepest nested first <li> element in the\n                // container to extract and paste the text content of the list.\n                if (container.firstChild.nodeName === 'LI') {\n                    const deepestBlock = closestBlock(firstLeaf(container.firstChild));\n                    splitAroundUntil(deepestBlock, container.firstChild);\n                    container.firstElementChild.replaceChildren(...deepestBlock.childNodes);\n                }\n                containerFirstChild.replaceChildren(...container.firstElementChild.childNodes);\n                container.firstElementChild.remove();\n            }\n            // Grab the content of the last child block and isolate it.\n            if (shouldUnwrap(container.lastChild) && !isSelectionAtEnd) {\n                // Unwrap the deepest nested last <li> element in the container\n                // to extract and paste the text content of the list.\n                if (container.lastChild.nodeName === 'LI') {\n                    const deepestBlock = closestBlock(lastLeaf(container.lastChild));\n                    splitAroundUntil(deepestBlock, container.lastChild);\n                    container.lastElementChild.replaceChildren(...deepestBlock.childNodes);\n                }\n                containerLastChild.replaceChildren(...container.lastElementChild.childNodes);\n                container.lastElementChild.remove();\n            }\n        }\n\n        if (startNode.nodeType === Node.ELEMENT_NODE) {\n            if (selection.anchorOffset === 0) {\n                const textNode = editor.document.createTextNode('');\n                if (isSelfClosingElement(startNode)) {\n                    startNode.parentNode.insertBefore(textNode, startNode);\n                } else {\n                    startNode.prepend(textNode);\n                }\n                startNode = textNode;\n            } else {\n                startNode = startNode.childNodes[selection.anchorOffset - 1];\n            }\n        }\n\n        // If we have isolated block content, first we split the current focus\n        // element if it's a block then we insert the content in the right places.\n        let currentNode = startNode;\n        let lastChildNode = false;\n        const currentList = currentNode && closestElement(currentNode, 'UL, OL');\n        const mode = currentList && getListMode(currentList);\n\n        const _insertAt = (reference, nodes, insertBefore) => {\n            for (const child of (insertBefore ? nodes.reverse() : nodes)) {\n                reference[insertBefore ? 'before' : 'after'](child);\n                reference = child;\n            }\n        }\n        const lastInsertedNodes = [...containerLastChild.childNodes];\n        if (containerLastChild.hasChildNodes()) {\n            const toInsert = [...containerLastChild.childNodes]; // Prevent mutation\n            _insertAt(currentNode, [...toInsert], insertBefore);\n            currentNode = insertBefore ? toInsert[0] : currentNode;\n            lastChildNode = toInsert[toInsert.length - 1];\n        }\n        const firstInsertedNodes = [...containerFirstChild.childNodes];\n        if (containerFirstChild.hasChildNodes()) {\n            const toInsert = [...containerFirstChild.childNodes]; // Prevent mutation\n            _insertAt(currentNode, [...toInsert], insertBefore);\n            currentNode = toInsert[toInsert.length - 1];\n            insertBefore = false;\n        }\n\n        // If all the Html have been isolated, We force a split of the parent element\n        // to have the need new line in the final result\n        if (!container.hasChildNodes()) {\n            if (isUnbreakable(closestBlock(currentNode.nextSibling))) {\n                currentNode.nextSibling.oShiftEnter(0);\n            } else {\n                // If we arrive here, the o_enter index should always be 0.\n                const parent = currentNode.nextSibling.parentElement;\n                const index = [...parent.childNodes].indexOf(currentNode.nextSibling);\n                parent.oEnter(index);\n            }\n        }\n\n        let nodeToInsert;\n        const insertedNodes = [...container.childNodes];\n        while ((nodeToInsert = container.childNodes[0])) {\n            if (isBlock(nodeToInsert) && !allowsParagraphRelatedElements(currentNode)) {\n                // Split blocks at the edges if inserting new blocks (preventing\n                // <p><p>text</p></p> or <li><li>text</li></li> scenarios).\n                while (\n                    currentNode.parentElement !== editor.editable &&\n                    (!allowsParagraphRelatedElements(currentNode.parentElement) ||\n                        (currentNode.parentElement.nodeName === 'LI' && nodeToInsert.nodeName !== 'TABLE'))\n                ) {\n                    if (isUnbreakable(currentNode.parentElement)) {\n                        makeContentsInline(container);\n                        nodeToInsert = container.childNodes[0];\n                        break;\n                    }\n                    let offset = childNodeIndex(currentNode);\n                    if (!insertBefore) {\n                        offset += 1;\n                    }\n                    if (offset) {\n                        const [left, right] = splitElement(currentNode.parentElement, offset);\n                        if (isUnbreakable(nodeToInsert) && container.childNodes.length === 1) {\n                            fillEmpty(right);\n                        } else if (isEmptyBlock(right)) {\n                            right.remove();\n                        }\n                        currentNode = insertBefore ? right : left;\n                    } else {\n                        currentNode = currentNode.parentElement;\n                    }\n                }\n                if (currentNode.parentElement.nodeName === 'LI' && nodeToInsert.nodeName === 'TABLE') {\n                    const br = document.createElement('br');\n                    currentNode[currentNode.textContent ? 'after' : 'before'](br);\n                }\n            }\n            // Ensure that all adjacent paragraph elements are converted to\n            // <li> when inserting in a list.\n            if (block.nodeName === \"LI\" && paragraphRelatedElements.includes(nodeToInsert.nodeName)) {\n                setTagName(nodeToInsert, \"LI\");\n            }\n            // Contenteditable false property changes to true after the node is\n            // inserted into DOM.\n            const isNodeToInsertContentEditable = nodeToInsert.isContentEditable;\n            if (insertBefore) {\n                currentNode.before(nodeToInsert);\n                insertBefore = false;\n            } else {\n                currentNode.after(nodeToInsert);\n            }\n            if (\n                ['BLOCKQUOTE', 'PRE'].includes(block.nodeName) &&\n                paragraphRelatedElements.includes(nodeToInsert.nodeName)\n            ) {\n                nodeToInsert = setTagName(nodeToInsert, block.nodeName);\n            }\n            let convertedList;\n            if (\n                currentList &&\n                (\n                    (nodeToInsert.nodeName === 'LI' && nodeToInsert.classList.contains('oe-nested')) ||\n                    isList(nodeToInsert)\n                )\n            ) {\n                convertedList = convertList(nodeToInsert, mode);\n            }\n            if (currentNode.tagName !== 'BR' && isShrunkBlock(currentNode)) {\n                currentNode.remove();\n            }\n            // If the first child of editable is contenteditable false element\n            // a chromium bug prevents selecting the container. Prepend a\n            // zero-width space so it's no longer the first child.\n            if (\n                !isNodeToInsertContentEditable &&\n                editor.editable.firstChild === nodeToInsert &&\n                nodeToInsert.nodeName === 'DIV'\n            ) {\n                const zws = document.createTextNode('\\u200B');\n                nodeToInsert.before(zws);\n            }\n            currentNode = convertedList || nodeToInsert;\n        }\n\n        currentNode = lastChildNode || currentNode;\n        if (\n            !isUnbreakable(currentNode) &&\n            currentNode.nodeName !== 'BR' &&\n            currentNode.nextSibling &&\n            currentNode.nextSibling.nodeName === 'BR' &&\n            lastLeaf(currentNode.parentNode) === currentNode.nextSibling &&\n            !closestElement(currentNode, '[t-field],[t-esc],[t-out]')\n        ) {\n            currentNode.nextSibling.remove();\n        }\n        selection.removeAllRanges();\n        const newRange = new Range();\n        let lastPosition;\n        if (currentNode.nodeName === 'A' && isLinkEligibleForZwnbsp(editor.editable, currentNode)) {\n            padLinkWithZws(editor.editable, currentNode);\n            currentNode = currentNode.nextSibling;\n            lastPosition = getDeepestPosition(...rightPos(currentNode));\n        } else {\n            lastPosition = [...paragraphRelatedElements, 'LI', 'UL', 'OL'].includes(currentNode.nodeName)\n                ? rightPos(lastLeaf(currentNode))\n                : rightPos(currentNode);\n        }\n        if (!editor.options.allowInlineAtRoot && lastPosition[0] === editor.editable) {\n            // Correct the position if it happens to be in the editable root.\n            lastPosition = getDeepestPosition(...lastPosition);\n        }\n        newRange.setStart(lastPosition[0], lastPosition[1]);\n        newRange.setEnd(lastPosition[0], lastPosition[1]);\n        selection.addRange(newRange);\n        return [...firstInsertedNodes, ...insertedNodes, ...lastInsertedNodes];\n    },\n    insertFontAwesome: (editor, faClass = 'fa fa-star') => {\n        const insertedNode = editorCommands.insert(editor, document.createElement('i'))[0];\n        insertedNode.className = faClass;\n        const position = rightPos(insertedNode);\n        setSelection(...position, ...position, false);\n    },\n\n    // History\n    undo: editor => editor.historyUndo(),\n    redo: editor => editor.historyRedo(),\n\n    // Change tags\n    setTag(editor, tagName, extraClass = \"\") {\n        const range = getDeepRange(editor.editable, { correctTripleClick: true });\n        const selectedBlocks = [...new Set(getTraversedNodes(editor.editable, range).map(closestBlock))];\n        const deepestSelectedBlocks = selectedBlocks.filter(block => (\n            !descendants(block).some(descendant => selectedBlocks.includes(descendant)) &&\n            block.isContentEditable\n        ));\n        let { startContainer, startOffset, endContainer, endOffset } = range;\n        const startContainerChild = startContainer.firstChild;\n        const endContainerChild = endContainer.lastChild;\n        for (const block of deepestSelectedBlocks) {\n            if (\n                ['P', 'PRE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'LI', 'BLOCKQUOTE'].includes(\n                    block.nodeName,\n                )\n            ) {\n                const inLI = block.closest('li');\n                if (inLI && tagName === \"P\") {\n                    inLI.oToggleList(0);\n                } else {\n                    const newEl = setTagName(block, tagName);\n                    newEl.classList.remove(\n                        ...FONT_SIZE_CLASSES,\n                        ...TEXT_STYLE_CLASSES,\n                        // We want to be able to edit the case `<h2 class=\"h3\">`\n                        // but in that case, we want to display \"Header 2\" and\n                        // not \"Header 3\" as it is more important to display\n                        // the semantic tag being used (especially for h1 ones).\n                        // This is why those are not in `TEXT_STYLE_CLASSES`.\n                        \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"\n                    );\n                    delete newEl.style.fontSize;\n                    if (extraClass) {\n                        newEl.classList.add(extraClass);\n                    }\n                    if (newEl.classList.length === 0) {\n                        newEl.removeAttribute(\"class\");\n                    }\n                }\n            } else {\n                // eg do not change a <div> into a h1: insert the h1\n                // into it instead.\n                const newBlock = editor.document.createElement(tagName);\n                const children = [...block.childNodes];\n                block.insertBefore(newBlock, block.firstChild);\n                children.forEach(child => newBlock.appendChild(child));\n            }\n        }\n        const isContextBlock = container => ['TD', 'DIV', 'LI'].includes(container.nodeName);\n        if (!startContainer.isConnected || isContextBlock(startContainer)) {\n            startContainer = startContainerChild.parentNode;\n        }\n        if (!endContainer.isConnected || isContextBlock(endContainer)) {\n            endContainer = endContainerChild.parentNode;\n        }\n        const newRange = new Range();\n        newRange.setStart(startContainer, startOffset);\n        newRange.setEnd(endContainer, endOffset);\n        getDeepRange(editor.editable, { range: newRange, select: true });\n        editor.historyStep();\n    },\n\n    // Formats\n    // -------------------------------------------------------------------------\n    bold: editor => formatSelection(editor, 'bold'),\n    italic: editor => formatSelection(editor, 'italic'),\n    underline: editor => formatSelection(editor, 'underline'),\n    strikeThrough: editor => formatSelection(editor, 'strikeThrough'),\n    setFontSize: (editor, size) => formatSelection(editor, 'fontSize', {applyStyle: true, formatProps: {size}}),\n    setFontSizeClassName: (editor, className) => formatSelection(editor, 'setFontSizeClassName', {formatProps: {className}}),\n    switchDirection: editor => {\n        getDeepRange(editor.editable, { splitText: true, select: true, correctTripleClick: true });\n        const selection = editor.document.getSelection();\n        const selectedTextNodes = [selection.anchorNode, ...getSelectedNodes(editor.editable), selection.focusNode]\n            .filter(n => n.nodeType === Node.TEXT_NODE && closestElement(n).isContentEditable && n.nodeValue.trim().length);\n\n        const changedElements = [];\n        const defaultDirection = editor.options.direction;\n        const shouldApplyStyle = !isSelectionFormat(editor.editable, 'switchDirection');\n        let blocks = new Set(selectedTextNodes.map(textNode => closestElement(textNode, 'ul,ol') || closestBlock(textNode)));\n        blocks.forEach(block => {\n            blocks = [...blocks, ...block.querySelectorAll('ul,ol')];\n        })\n        for (const block of blocks) {\n            if (!shouldApplyStyle) {\n                block.removeAttribute('dir');\n            } else {\n                block.setAttribute('dir', defaultDirection === 'ltr' ? 'rtl' : 'ltr');\n            }\n            changedElements.push(block);\n        }\n\n        for (const element of changedElements) {\n            const style = getComputedStyle(element);\n            if (style.direction === 'ltr' && style.textAlign === 'right') {\n                element.style.setProperty('text-align', 'left');\n            } else if (style.direction === 'rtl' && style.textAlign === 'left') {\n                element.style.setProperty('text-align', 'right');\n            }\n        }\n    },\n    removeFormat: editor => {\n        const textAlignStyles = new Map();\n        getTraversedNodes(editor.editable).forEach((element) => {\n            const block = closestBlock(element);\n            if (block.style.textAlign) {\n                textAlignStyles.set(block, block.style.textAlign);\n            }\n        });\n        // Calling `document.execCommand` will cause an input event with the\n        // input type \"formatRemove\". This would cause a new history step to be\n        // created in the middle of the process, which we prevent here.\n        editor.historyPauseSteps();\n        editor.document.execCommand('removeFormat');\n        for (const node of getTraversedNodes(editor.editable)) {\n            if (node.nodeType === Node.ELEMENT_NODE && node.hasAttribute('color')) {\n                node.removeAttribute('color');\n            }\n            const element = closestElement(node);\n            element.style.removeProperty('color');\n            element.style.removeProperty('background');\n        }\n        textAlignStyles.forEach((textAlign, block) => {\n            block.style.setProperty('text-align', textAlign);\n        });\n        editor.historyUnpauseSteps();\n    },\n\n    // Align\n    justifyLeft: editor => align(editor, 'left'),\n    justifyRight: editor => align(editor, 'right'),\n    justifyCenter: editor => align(editor, 'center'),\n    justifyFull: editor => align(editor, 'justify'),\n\n    // Link\n    createLink: (editor, link, content) => {\n        const sel = editor.document.getSelection();\n        if (content && !sel.isCollapsed) {\n            editor.deleteRange(sel);\n        }\n        if (sel.isCollapsed) {\n            insertText(sel, content || 'link');\n        }\n        const currentLink = closestElement(sel.focusNode, 'a');\n        link = link || prompt('URL or Email', (currentLink && currentLink.href) || 'http://');\n        const res = editor.document.execCommand('createLink', false, link);\n        if (res) {\n            setSelection(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset);\n            const node = findNode(closestPath(sel.focusNode), node => node.tagName === 'A');\n            for (const [param, value] of Object.entries(editor.options.defaultLinkAttributes)) {\n                node.setAttribute(param, `${value}`);\n            }\n            const pos = [node.parentElement, childNodeIndex(node) + 1];\n            setSelection(...pos, ...pos, false);\n        }\n    },\n    unlink: editor => {\n        const sel = editor.document.getSelection();\n        const isCollapsed = sel.isCollapsed;\n        // If the selection is collapsed, unlink the whole link:\n        // `<a>a[]b</a>` => `a[]b`.\n        getDeepRange(editor.editable, { sel, splitText: true, select: true });\n        if (!isCollapsed) {\n            // If not, unlink only the part(s) of the link(s) that are selected:\n            // `<a>a[b</a>c<a>d</a>e<a>f]g</a>` => `<a>a</a>[bcdef]<a>g</a>`.\n            let { anchorNode, focusNode, anchorOffset, focusOffset } = sel;\n            const direction = getCursorDirection(anchorNode, anchorOffset, focusNode, focusOffset);\n            // Split the links around the selection.\n            const [startLink, endLink] = [closestElement(anchorNode, 'a'), closestElement(focusNode, 'a')];\n            if (startLink) {\n                anchorNode = splitAroundUntil(anchorNode, startLink);\n                anchorOffset = direction === DIRECTIONS.RIGHT ? 0 : nodeSize(anchorNode);\n                setSelection(anchorNode, anchorOffset, focusNode, focusOffset, true);\n            }\n            // Only split the end link if it was not already done above.\n            if (endLink && endLink.isConnected) {\n                focusNode = splitAroundUntil(focusNode, endLink);\n                focusOffset = direction === DIRECTIONS.RIGHT ? nodeSize(focusNode) : 0;\n                setSelection(anchorNode, anchorOffset, focusNode, focusOffset, true);\n            }\n        }\n        const targetedNodes = isCollapsed ? [sel.anchorNode] : getSelectedNodes(editor.editable);\n        const links = new Set(targetedNodes.map(node => closestElement(node, 'a')).filter(a => a && a.isContentEditable));\n        if (links.size) {\n            const cr = preserveCursor(editor.document);\n            for (const link of links) {\n                unwrapContents(link);\n            }\n            cr();\n        }\n    },\n\n    // List\n    indentList: (editor, mode = 'indent') => {\n        const [pos1, pos2] = getCursors(editor.document);\n        const end = leftLeafFirstPath(...pos1).next().value;\n        const li = new Set();\n        for (const node of leftLeafFirstPath(...pos2)) {\n            const cli = closestElement(node,'li');\n            if (\n                cli &&\n                cli.tagName == 'LI' &&\n                !li.has(cli) &&\n                !cli.classList.contains('oe-nested') &&\n                cli.isContentEditable &&\n                !cli.classList.contains('nav-item')\n            ) {\n                li.add(cli);\n            }\n            if (node == end) break;\n        }\n        for (const node of li) {\n            if (mode == 'indent') {\n                node.oTab(0);\n            } else {\n                node.oShiftTab(0);\n            }\n        }\n        return true;\n    },\n    toggleList: (editor, mode) => {\n        const li = new Set();\n        const blocks = new Set();\n\n        const selectedBlocks = getTraversedNodes(editor.editable);\n        const deepestSelectedBlocks = selectedBlocks.filter(block => (\n            !descendants(block).some(descendant => selectedBlocks.includes(descendant))\n        ));\n        for (const node of deepestSelectedBlocks) {\n            if (node.nodeType === Node.TEXT_NODE && isWhitespace(node) && closestElement(node).isContentEditable) {\n                node.remove();\n            } else {\n                // Ensure nav-item lists are excluded from toggling\n                const isNavItemList = node => node.nodeName === 'LI' && node.classList.contains('nav-item');\n                let nodeToToggle = closestBlock(node);\n                nodeToToggle = isNavItemList(nodeToToggle) ? node : nodeToToggle;\n                if (!['OL', 'UL'].includes(nodeToToggle.tagName) && (nodeToToggle.isContentEditable || nodeToToggle.nodeType === Node.TEXT_NODE)) {\n                    const closestLi = closestElement(nodeToToggle, 'li');\n                    nodeToToggle = closestLi && !isNavItemList(closestLi) ? closestLi : nodeToToggle;\n                    const ublock = nodeToToggle.nodeName === 'LI' && nodeToToggle.closest('ol, ul');\n                    ublock && getListMode(ublock) == mode ? li.add(nodeToToggle) : blocks.add(nodeToToggle);\n                }\n            }\n        }\n\n        let target = [...(blocks.size ? blocks : li)];\n        if (blocks.size) {\n            // Remove hardcoded padding to have default padding of list element \n            for (const block of blocks) {\n                if (block.style) {\n                    block.style.padding = \"\";\n                }\n            }\n        }\n        while (target.length) {\n            const node = target.pop();\n            // only apply one li per ul\n            if (!node.oToggleList(0, mode)) {\n                target = target.filter(\n                    li => li.parentNode != node.parentNode || li.tagName != 'LI',\n                );\n            }\n        }\n    },\n\n    /**\n     * Apply a css or class color on the current selection (wrapped in <font>).\n     *\n     * @param {string} color hexadecimal or bg-name/text-name class\n     * @param {string} mode 'color' or 'backgroundColor'\n     * @param {Element} [element]\n     */\n    applyColor: (editor, color, mode, element) => {\n        const selectedTds = [...editor.editable.querySelectorAll('td.o_selected_td')].filter(\n            node => closestElement(node).isContentEditable\n        );\n        let coloredTds = [];\n        if (selectedTds.length && mode === \"backgroundColor\") {\n            for (const td of selectedTds) {\n                colorElement(td, color, mode);\n            }\n            coloredTds = [...selectedTds];\n        } else if (element) {\n            colorElement(element, color, mode);\n            return [element];\n        }\n        const selection = editor.document.getSelection();\n        let wasCollapsed = false;\n        if (selection.getRangeAt(0).collapsed && !selectedTds.length) {\n            insertAndSelectZws(selection);\n            wasCollapsed = true;\n        }\n        const range = getDeepRange(editor.editable, { splitText: true, select: true });\n        if (!range) return;\n        const restoreCursor = preserveCursor(editor.document);\n        // Get the <font> nodes to color\n        const selectionNodes = getSelectedNodes(editor.editable).filter(node => closestElement(node).isContentEditable && node.nodeName !== \"T\");\n        if (isEmptyBlock(range.endContainer)) {\n            selectionNodes.push(range.endContainer, ...descendants(range.endContainer));\n        }\n        const selectedNodes = mode === \"backgroundColor\"\n            ? selectionNodes.filter(node => !closestElement(node, 'table.o_selected_table'))\n            : selectionNodes;\n        const selectedFieldNodes = new Set(getSelectedNodes(editor.editable)\n                .map(n => closestElement(n, \"*[t-field],*[t-out],*[t-esc]\"))\n                .filter(Boolean));\n\n        function getFonts(selectedNodes) {\n            return selectedNodes.flatMap(node => {\n                let font = closestElement(node, 'font') || closestElement(node, 'span');\n                const children = font && descendants(font);\n                if (font && (font.nodeName === 'FONT' || (font.nodeName === 'SPAN' && font.style[mode]))) {\n                    // Partially selected <font>: split it.\n                    const selectedChildren = children.filter(child => selectedNodes.includes(child));\n                    if (selectedChildren.length) {\n                        font = splitAroundUntil(selectedChildren, font);\n                    } else {\n                        font = [];\n                    }\n                } else if ((node.nodeType === Node.TEXT_NODE && !isWhitespace(node) && node.textContent !== '\\ufeff')\n                        || (node.nodeName === 'BR' && isEmptyBlock(node.parentNode))\n                        || (node.nodeType === Node.ELEMENT_NODE &&\n                            node.nodeName !== 'FIGURE' &&\n                            ['inline', 'inline-block'].includes(getComputedStyle(node).display) &&\n                            !isWhitespace(node.textContent) &&\n                            !node.classList.contains('btn') &&\n                            !node.querySelector('font')) &&\n                            node.nodeName !== 'A' &&\n                            !(node.nodeName === 'SPAN' && node.style['fontSize'])) {\n                    // Node is a visible text or inline node without font nor a button:\n                    // wrap it in a <font>.\n                    const previous = node.previousSibling;\n                    const classRegex = mode === 'color' ? BG_CLASSES_REGEX : TEXT_CLASSES_REGEX;\n                    if (\n                        previous &&\n                        previous.nodeName === 'FONT' &&\n                        !previous.style[mode === 'color' ? 'backgroundColor' : 'color'] &&\n                        !classRegex.test(previous.className) &&\n                        selectedNodes.includes(previous.firstChild) &&\n                        selectedNodes.includes(previous.lastChild)\n                    ) {\n                        // Directly follows a fully selected <font> that isn't\n                        // colored in the other mode: append to that.\n                        font = previous;\n                    } else {\n                        // No <font> found: insert a new one.\n                        font = document.createElement('font');\n                        node.after(font);\n                    }\n                    if (node.textContent) {\n                        font.appendChild(node);\n                    } else {\n                        fillEmpty(font);\n                    }\n                } else {\n                    font = []; // Ignore non-text or invisible text nodes.\n                }\n                return font;\n            });\n        }\n\n        for (const fieldNode of selectedFieldNodes) {\n            colorElement(fieldNode, color, mode);\n        }\n\n        let fonts = getFonts(selectedNodes);\n        // Dirty fix as the previous call could have unconnected elements\n        // because of the `splitAroundUntil`. Another call should provide he\n        // correct list of fonts.\n        if (!fonts.every((font) => font.isConnected)) {\n            fonts = getFonts(selectedNodes);\n        }\n\n        // Color the selected <font>s and remove uncolored fonts.\n        const fontsSet = new Set(fonts);\n        for (const font of fontsSet) {\n            colorElement(font, color, mode);\n            if ((!hasColor(font, 'color') && !hasColor(font,'backgroundColor')) && (!font.hasAttribute('style') || !color)) {\n                for (const child of [...font.childNodes]) {\n                    font.parentNode.insertBefore(child, font);\n                }\n                font.parentNode.removeChild(font);\n                fontsSet.delete(font);\n            }\n        }\n        restoreCursor();\n        if (wasCollapsed) {\n            const newSelection = editor.document.getSelection();\n            const range = new Range();\n            range.setStart(newSelection.anchorNode, newSelection.anchorOffset);\n            range.collapse(true);\n            newSelection.removeAllRanges();\n            newSelection.addRange(range);\n        }\n        return [...fontsSet, ...coloredTds];\n    },\n    // Table\n    insertTable: (editor, { rowNumber = 2, colNumber = 2 } = {}) => {\n        const tdsHtml = new Array(colNumber).fill('<td><p><br></p></td>').join('');\n        const trsHtml = new Array(rowNumber).fill(`<tr>${tdsHtml}</tr>`).join('');\n        const tableHtml = `<table class=\"table table-bordered o_table\"><tbody>${trsHtml}</tbody></table>`;\n        const sel = editor.document.getSelection();\n        if (!sel.isCollapsed) {\n            editor.deleteRange(sel);\n        }\n        while (!isBlock(sel.anchorNode)) {\n            const anchorNode = sel.anchorNode;\n            const isTextNode = anchorNode.nodeType === Node.TEXT_NODE;\n            const newAnchorNode = isTextNode\n                ? splitTextNode(anchorNode, sel.anchorOffset, DIRECTIONS.LEFT) + 1 && anchorNode\n                : splitElement(anchorNode, sel.anchorOffset).shift();\n            const newPosition = rightPos(newAnchorNode);\n            setSelection(...newPosition, ...newPosition, false);\n        }\n        const [table] = editorCommands.insert(editor, parseHTML(editor.document, tableHtml));\n        setCursorStart(table.querySelector('p'));\n    },\n    addColumn: (editor, beforeOrAfter, referenceCell) => {\n        if (!referenceCell) {\n            getDeepRange(editor.editable, { select: true }); // Ensure deep range for finding td.\n            referenceCell = getInSelection(editor.document, 'td');\n            if (!referenceCell) return;\n        }\n        const columnIndex = getColumnIndex(referenceCell);\n        const table = closestElement(referenceCell, 'table');\n        const tableWidth = table.style.width ? pxToFloat(table.style.width) : table.clientWidth;\n        const referenceColumn = table.querySelectorAll(`tr td:nth-of-type(${columnIndex + 1})`);\n        const referenceCellWidth = referenceCell.style.width ? pxToFloat(referenceCell.style.width) : referenceCell.clientWidth;\n        // Temporarily set widths so proportions are respected.\n        const firstRow = table.querySelector('tr');\n        const firstRowCells = [...firstRow.children].filter(child => child.nodeName === 'TD' || child.nodeName === 'TH');\n        let totalWidth = 0;\n        for (const cell of firstRowCells) {\n            const width = cell.style.width ? pxToFloat(cell.style.width) : cell.clientWidth;\n            cell.style.width = width + 'px';\n            // Spread the widths to preserve proportions.\n            // -1 for the width of the border of the new column.\n            const newWidth = Math.max(Math.round((width * tableWidth) / (tableWidth + referenceCellWidth - 1)), 13);\n            cell.style.width = newWidth + 'px';\n            totalWidth += newWidth;\n        }\n        referenceColumn.forEach((cell, rowIndex) => {\n            const newCell = document.createElement('td');\n            const p = document.createElement('p');\n            p.append(document.createElement('br'));\n            newCell.append(p);\n            cell[beforeOrAfter](newCell);\n            if (rowIndex === 0) {\n                newCell.style.width = cell.style.width;\n                totalWidth += pxToFloat(cell.style.width);\n            }\n        });\n        if (totalWidth !== tableWidth - 1) { // -1 for the width of the border of the new column.\n            firstRowCells[firstRowCells.length - 1].style.width = pxToFloat(firstRowCells[firstRowCells.length - 1].style.width) + (tableWidth - totalWidth - 1) + 'px';\n        }\n        // Fix the table and row's width so it doesn't change.\n        table.style.width = tableWidth + 'px';\n    },\n    addRow: (editor, beforeOrAfter, referenceRow) => {\n        if (!referenceRow) {\n            getDeepRange(editor.editable, { select: true }); // Ensure deep range for finding tr.\n            referenceRow = getInSelection(editor.document, 'tr');\n            if (!referenceRow) return;\n        }\n        const referenceRowHeight = referenceRow.style.height ? pxToFloat(referenceRow.style.height) : referenceRow.clientHeight;\n        const newRow = document.createElement('tr');\n        newRow.style.height = referenceRowHeight + 'px';\n        const cells = referenceRow.querySelectorAll('td');\n        newRow.append(...Array.from(Array(cells.length)).map(() => {\n            const td = document.createElement('td');\n            const p = document.createElement('p');\n            p.append(document.createElement('br'));\n            td.append(p);\n            return td;\n        }));\n        referenceRow[beforeOrAfter](newRow);\n        newRow.style.height = referenceRowHeight + 'px';\n        if (getRowIndex(newRow) === 0) {\n            let columnIndex = 0;\n            for (const newColumn of newRow.children) {\n                newColumn.style.width = cells[columnIndex].style.width;\n                cells[columnIndex].style.width = '';\n                columnIndex++;\n            }\n        }\n    },\n    removeColumn: (editor, cell) => {\n        if (!cell) {\n            getDeepRange(editor.editable, { select: true }); // Ensure deep range for finding td.\n            cell = getInSelection(editor.document, 'td');\n            if (!cell) return;\n        }\n        const table = closestElement(cell, 'table');\n        const cells = [...closestElement(cell, 'tr').querySelectorAll('th, td')];\n        const index = cells.findIndex(td => td === cell);\n        const siblingCell = cells[index - 1] || cells[index + 1];\n        if (table.style.width) {\n            const tableRect = table.getBoundingClientRect();\n            const cellRect = cell.getBoundingClientRect();\n            table.style.width = tableRect.width - cellRect.width + 'px';\n        }\n        table.querySelectorAll(`tr td:nth-of-type(${index + 1})`).forEach(td => td.remove());\n        siblingCell ? setSelection(...startPos(siblingCell)) : editorCommands.deleteTable(editor, table);\n    },\n    removeRow: (editor, row) => {\n        if (!row) {\n            getDeepRange(editor.editable, { select: true }); // Ensure deep range for finding tr.\n            row = getInSelection(editor.document, 'tr');\n            if (!row) return;\n        }\n        const table = closestElement(row, 'table');\n        const rows = [...table.querySelectorAll('tr')];\n        const rowIndex = rows.findIndex(tr => tr === row);\n        const siblingRow = rows[rowIndex - 1] || rows[rowIndex + 1];\n        row.remove();\n        siblingRow ? setSelection(...startPos(siblingRow)) : editorCommands.deleteTable(editor, table);\n    },\n    resetSize: (editor,table) => {\n        if (!table) {\n            getDeepRange(editor.editable, { select: true });\n            table = getInSelection(editor.document,'table');\n        }\n        table.removeAttribute('style');\n        const cells = [...table.querySelectorAll('tr, td')];\n        cells.forEach( cell => {\n            const cStyle = cell.style;\n            if (cell.tagName === 'TR') {\n                cStyle.height = '';\n            } else {\n                cStyle.width = '';\n            }\n        })\n    },\n    deleteTable: (editor, table) => {\n        table = table || getInSelection(editor.document, 'table');\n        if (!table) return;\n        const p = document.createElement('p');\n        p.appendChild(document.createElement('br'));\n        table.before(p);\n        table.remove();\n        setSelection(p, 0);\n    },\n    // Structure\n    columnize: (editor, numberOfColumns, addParagraphAfter=true) => {\n        const sel = editor.document.getSelection();\n        const anchor = sel.anchorNode;\n        const hasColumns = !!closestElement(anchor, '.o_text_columns');\n        if (!numberOfColumns && hasColumns) {\n            // Remove columns.\n            const restore = preserveCursor(editor.document);\n            const container = closestElement(anchor, '.o_text_columns');\n            const rows = unwrapContents(container);\n            for (const row of rows) {\n                const columns = unwrapContents(row);\n                for (const column of columns) {\n                    const columnContents = unwrapContents(column);\n                    for (const node of columnContents) {\n                        resetOuids(node);\n                    }\n                }\n            }\n            restore();\n        } else if (numberOfColumns && !hasColumns) {\n            // Create columns.\n            const restore = preserveCursor(editor.document);\n            const container = document.createElement('div');\n            if (!closestElement(anchor, '.container')) {\n                container.classList.add('container');\n            }\n            container.classList.add('o_text_columns');\n            const row = document.createElement('div');\n            row.classList.add('row');\n            container.append(row);\n            const block = closestBlock(anchor);\n            resetOuids(block);\n            const columnSize = Math.floor(12 / numberOfColumns);\n            const columns = [];\n            for (let i = 0; i < numberOfColumns; i++) {\n                const column = document.createElement('div');\n                column.classList.add(`col-${columnSize}`);\n                row.append(column);\n                columns.push(column);\n            }\n            block.before(container);\n            columns.shift().append(block);\n            for (const column of columns) {\n                const p = document.createElement('p');\n                p.append(document.createElement('br'));\n                p.classList.add('oe-hint');\n                p.setAttribute('placeholder', 'New column...');\n                column.append(p);\n            }\n            restore();\n            if (addParagraphAfter) {\n                const p = document.createElement('p');\n                p.append(document.createElement('br'));\n                container.after(p);\n            }\n        } else if (numberOfColumns && hasColumns) {\n            const row = closestElement(anchor, '.row');\n            const columns = [...row.children];\n            const columnSize = Math.floor(12 / numberOfColumns);\n            const diff = numberOfColumns - columns.length;\n            if (diff > 0) {\n                // Add extra columns.\n                const restore = preserveCursor(editor.document);\n                for (const column of columns) {\n                    column.className = column.className.replace(REGEX_BOOTSTRAP_COLUMN, `col$1-${columnSize}`);\n                }\n                let lastColumn = columns[columns.length - 1];\n                for (let i = 0; i < diff; i++) {\n                    const column = document.createElement('div');\n                    column.classList.add(`col-${columnSize}`);\n                    const p = document.createElement('p');\n                    p.append(document.createElement('br'));\n                    p.classList.add('oe-hint');\n                    p.setAttribute('placeholder', 'New column...');\n                    column.append(p);\n                    lastColumn.after(column);\n                    lastColumn = column;\n                }\n                restore();\n            } else if (diff < 0) {\n                // Remove superfluous columns.\n                const restore = preserveCursor(editor.document);\n                for (const column of columns) {\n                    column.className = column.className.replace(REGEX_BOOTSTRAP_COLUMN, `col$1-${columnSize}`);\n                }\n                const contents = [];\n                for (let i = diff; i < 0; i++) {\n                    const column = columns.pop();\n                    const columnContents = unwrapContents(column);\n                    for (const node of columnContents) {\n                        resetOuids(node);\n                    }\n                    contents.unshift(...columnContents);\n                }\n                columns[columns.length - 1].append(...contents);\n                restore();\n            }\n        }\n    },\n    insertHorizontalRule(editor) {\n        const selection = editor.document.getSelection();\n        const range = selection.getRangeAt(0);\n        const element = closestElement(range.startContainer, paragraphRelatedElements) || closestBlock(range.startContainer);\n\n        if (element && ancestors(element).includes(editor.editable)) {\n            element.before(editor.document.createElement('hr'));\n        }\n    },\n};\n", "/** @odoo-module **/\nimport { UNBREAKABLE_ROLLBACK_CODE, UNREMOVABLE_ROLLBACK_CODE, REGEX_BOOTSTRAP_COLUMN } from '../utils/constants.js';\nimport {deleteText} from './deleteForward.js';\nimport {\n    boundariesOut,\n    childNodeIndex,\n    CTGROUPS,\n    CTYPES,\n    DIRECTIONS,\n    endPos,\n    fillEmpty,\n    getState,\n    isBlock,\n    isEmptyBlock,\n    isUnbreakable,\n    isUnremovable,\n    isVisible,\n    leftPos,\n    rightPos,\n    moveNodes,\n    nodeSize,\n    paragraphRelatedElements,\n    prepareUpdate,\n    setSelection,\n    isMediaElement,\n    isSelfClosingElement,\n    isNotEditableNode,\n    createDOMPathGenerator,\n    closestElement,\n    closestBlock,\n    getOffsetAndCharSize,\n    ZERO_WIDTH_CHARS,\n} from '../utils/utils.js';\n\nText.prototype.oDeleteBackward = function (offset, alreadyMoved = false) {\n    const parentElement = this.parentElement;\n\n    if (!offset) {\n        // Backspace at the beginning of a text node is not a specific case to\n        // handle, let the element implementation handle it.\n        parentElement.oDeleteBackward([...parentElement.childNodes].indexOf(this), alreadyMoved);\n        return;\n    }\n    // Get the size of the unicode character to remove.\n    // If the current offset split an emoji in the middle , we need to change offset to the end of the emoji\n    const [newOffset, charSize] = getOffsetAndCharSize(this.nodeValue, offset, DIRECTIONS.LEFT);\n    deleteText.call(this, charSize, newOffset - charSize, DIRECTIONS.LEFT, alreadyMoved);\n};\n\nconst isDeletable = (node) => {\n    return isMediaElement(node) || isNotEditableNode(node);\n}\n\nHTMLElement.prototype.oDeleteBackward = function (offset, alreadyMoved = false, offsetLimit) {\n    const contentIsZWS = ZERO_WIDTH_CHARS.includes(this.textContent);\n    let moveDest;\n    if (offset) {\n        const leftNode = this.childNodes[offset - 1];\n        if (isUnremovable(leftNode)) {\n            throw UNREMOVABLE_ROLLBACK_CODE;\n        }\n        if (\n            isDeletable(leftNode)\n        ) {\n            leftNode.remove();\n            return;\n        }\n        if (!isBlock(leftNode) || isSelfClosingElement(leftNode)) {\n            /**\n             * Backspace just after an inline node, convert to backspace at the\n             * end of that inline node.\n             *\n             * E.g. <p>abc<i>def</i>[]</p> + BACKSPACE\n             * <=>  <p>abc<i>def[]</i></p> + BACKSPACE\n             */\n            leftNode.oDeleteBackward(nodeSize(leftNode), alreadyMoved);\n            return;\n        }\n\n        /**\n         * Backspace just after an block node, we have to move any inline\n         * content after it, up to the next block. If the cursor is between\n         * two blocks, this is a theoretical case: just do nothing.\n         *\n         * E.g. <p>abc</p>[]de<i>f</i><p>ghi</p> + BACKSPACE\n         * <=>  <p>abcde<i>f</i></p><p>ghi</p>\n         */\n        alreadyMoved = true;\n        moveDest = endPos(leftNode);\n    } else {\n        if (isUnremovable(this)) {\n            throw UNREMOVABLE_ROLLBACK_CODE;\n        }\n        // Empty unbreakable blocks should be removed with backspace, with the\n        // notable exception of Bootstrap columns.\n        if (isUnbreakable(this) && (REGEX_BOOTSTRAP_COLUMN.test(this.className) || !isEmptyBlock(this))) {\n            throw UNBREAKABLE_ROLLBACK_CODE;\n        }\n        const parentEl = this.parentElement;\n        // Handle editable sub-nodes\n        if (\n            parentEl &&\n            parentEl.getAttribute(\"contenteditable\") === \"true\" &&\n            parentEl.oid !== \"root\" &&\n            parentEl.parentElement &&\n            !parentEl.parentElement.isContentEditable &&\n            paragraphRelatedElements.includes(this.tagName) &&\n            !this.previousElementSibling\n        ) {\n            // The first child element of a contenteditable=\"true\" zone which\n            // itself is contained in a contenteditable=\"false\" zone can not be\n            // removed if it is paragraph-like.\n            throw UNREMOVABLE_ROLLBACK_CODE;\n        }\n        const closestLi = closestElement(this, 'li');\n        if ((closestLi && !closestLi.previousElementSibling) || !isBlock(this) || isSelfClosingElement(this)) {\n            /**\n             * Backspace at the beginning of an inline node, nothing has to be\n             * done: propagate the backspace. If the node was empty, we remove\n             * it before.\n             *\n             * E.g. <p>abc<b></b><i>[]def</i></p> + BACKSPACE\n             * <=>  <p>abc<b>[]</b><i>def</i></p> + BACKSPACE\n             * <=>  <p>abc[]<i>def</i></p> + BACKSPACE\n             */\n            const parentOffset = childNodeIndex(this);\n\n            if (!nodeSize(this) || contentIsZWS) {\n                const visible = isVisible(this);\n                const restore = prepareUpdate(...boundariesOut(this));\n                this.remove();\n                restore();\n\n                fillEmpty(parentEl);\n\n                if (visible) {\n                    // TODO this handle BR/IMG/etc removals../ to see if we\n                    // prefer to have a dedicated handler for every possible\n                    // HTML element or if we let this generic code handle it.\n                    setSelection(parentEl, parentOffset);\n                    return;\n                }\n            }\n            parentEl.oDeleteBackward(parentOffset, alreadyMoved);\n            return;\n        }\n\n        /** If we are at the beninning of a block node,\n         *  And the previous node is empty, remove it.\n         *\n         *   E.g. (previousEl == empty)\n         *        <p><br></p><h1>[]def</h1> + BACKSPACE\n         *   <=>  <h1>[]def</h1>\n         *\n         *   E.g. (previousEl != empty)\n         *        <h3>abc</h3><h1>[]def</h1> + BACKSPACE\n         *   <=>  <h3>abc[]def</h3>\n        */\n        const previousElementSiblingClosestBlock = closestBlock(this.previousElementSibling);\n        if (\n            previousElementSiblingClosestBlock &&\n            (isEmptyBlock(previousElementSiblingClosestBlock) ||\n                previousElementSiblingClosestBlock.textContent === '\\u200B') &&\n            paragraphRelatedElements.includes(this.nodeName)\n        ) {\n            previousElementSiblingClosestBlock.remove();\n            setSelection(this, 0);\n            return;\n        }\n\n        /**\n         * Backspace at the beginning of a block node. If it doesn't have a left\n         * block and it is one of the special block formatting tags below then\n         * convert the block into a P and return immediately. Otherwise, we have\n         * to move the inline content at its beginning outside of the element\n         * and propagate to the left block.\n         *\n         * E.g. (prev == block)\n         *      <p>abc</p><div>[]def<p>ghi</p></div> + BACKSPACE\n         * <=>  <p>abc</p>[]def<div><p>ghi</p></div> + BACKSPACE\n         *\n         * E.g. (prev != block)\n         *      abc<div>[]def<p>ghi</p></div> + BACKSPACE\n         * <=>  abc[]def<div><p>ghi</p></div>\n         */\n        if (\n            !this.previousElementSibling &&\n            paragraphRelatedElements.includes(this.nodeName) &&\n            this.nodeName !== 'P' &&\n            !closestLi\n        ) {\n            if (!this.textContent) {\n                const p = document.createElement('p');\n                p.replaceChildren(...this.childNodes);\n                this.replaceWith(p);\n                setSelection(p, offset);\n            }\n            return;\n        } else {\n            moveDest = leftPos(this);\n        }\n    }\n\n    const domPathGenerator = createDOMPathGenerator(DIRECTIONS.LEFT, {\n        leafOnly: true,\n        stopTraverseFunction: isDeletable,\n    });\n    const domPath = domPathGenerator(this, offset)\n    const leftNode = domPath.next().value;\n    if (leftNode && isDeletable(leftNode)) {\n        const [parent, offset] = rightPos(leftNode);\n        return parent.oDeleteBackward(offset, alreadyMoved);\n    }\n    let node = this.childNodes[offset];\n    const nextSibling = this.nextSibling;\n    let currentNodeIndex = offset;\n\n    // `offsetLimit` will ensure we never move nodes that were not initialy in\n    // the element => when Deleting and merging an element the containing node\n    // will temporarily be hosted in the common parent beside possible other\n    // nodes. We don't want to touch those other nodes when merging two html\n    // elements ex : <div>12<p>ab[]</p><p>cd</p>34</div> should never touch the\n    // 12 and 34 text node.\n    if (offsetLimit === undefined) {\n        while (node && !isBlock(node)) {\n            node = node.nextSibling;\n            currentNodeIndex++;\n        }\n    } else {\n        currentNodeIndex = offsetLimit;\n    }\n    let [cursorNode, cursorOffset] = moveNodes(...moveDest, this, offset, currentNodeIndex);\n    setSelection(cursorNode, cursorOffset);\n\n    // Propagate if this is still a block on the left of where the nodes were\n    // moved.\n    if (\n        cursorNode.nodeType === Node.TEXT_NODE &&\n        (cursorOffset === 0 || cursorOffset === cursorNode.length)\n    ) {\n        cursorOffset = childNodeIndex(cursorNode) + (cursorOffset === 0 ? 0 : 1);\n        cursorNode = cursorNode.parentNode;\n    }\n    if (cursorNode.nodeType !== Node.TEXT_NODE) {\n        const { cType } = getState(cursorNode, cursorOffset, DIRECTIONS.LEFT);\n        if (cType & CTGROUPS.BLOCK && (!alreadyMoved || cType === CTYPES.BLOCK_OUTSIDE)) {\n            cursorNode.oDeleteBackward(cursorOffset, alreadyMoved, cursorOffset + currentNodeIndex - offset);\n        } else if (!alreadyMoved) {\n            // When removing a block node adjacent to an inline node, we need to\n            // ensure the block node induced line break are kept with a <br>.\n            // ex : <div>a<span>b</span><p>[]c</p>d</div> => deleteBakward =>\n            // <div>a<span>b</span>[]c<br>d</div> In this case we cannot simply\n            // merge the <p> content into the div parent, or we would lose the\n            // line break located after the <p>.\n            const cursorNodeNode = cursorNode.childNodes[cursorOffset];\n            const cursorNodeRightNode = cursorNodeNode ? cursorNodeNode.nextSibling : undefined;\n            if (cursorNodeRightNode &&\n                cursorNodeRightNode.nodeType === Node.TEXT_NODE &&\n                nextSibling === cursorNodeRightNode) {\n                moveDest[0].insertBefore(document.createElement('br'), cursorNodeRightNode);\n            }\n        }\n    }\n};\n\nHTMLLIElement.prototype.oDeleteBackward = function (offset, alreadyMoved = false) {\n    // If the deleteBackward is performed at the begening of a LI element,\n    // we take the current LI out of the list.\n    if (offset === 0) {\n        this.oToggleList(offset);\n        return;\n    }\n    // Otherwise, call the HTMLElement deleteBackward method.\n    HTMLElement.prototype.oDeleteBackward.call(this, offset, alreadyMoved);\n};\n\nHTMLBRElement.prototype.oDeleteBackward = function (offset, alreadyMoved = false) {\n    const parentOffset = childNodeIndex(this);\n    const rightState = getState(this.parentElement, parentOffset + 1, DIRECTIONS.RIGHT).cType;\n    if (rightState & CTYPES.BLOCK_INSIDE) {\n        this.parentElement.oDeleteBackward(parentOffset, alreadyMoved);\n    } else {\n        HTMLElement.prototype.oDeleteBackward.call(this, offset, alreadyMoved);\n    }\n};\n\nHTMLTableCellElement.prototype.oDeleteBackward = function (offset, alreadyMoved = false) {\n    if (offset) {\n        HTMLElement.prototype.oDeleteBackward.call(this, offset, alreadyMoved);\n    }\n};\n", "/** @odoo-module **/\nimport { UNREMOVABLE_ROLLBACK_CODE } from '../utils/constants.js';\nimport {\n    findNode,\n    isSelfClosingElement,\n    nodeSize,\n    rightPos,\n    getState,\n    DIRECTIONS,\n    CTYPES,\n    leftPos,\n    isFontAwesome,\n    rightLeafOnlyNotBlockNotEditablePath,\n    rightLeafOnlyPathNotBlockNotEditablePath,\n    isNotEditableNode,\n    splitTextNode,\n    paragraphRelatedElements,\n    prepareUpdate,\n    isInPre,\n    fillEmpty,\n    setSelection,\n    isZWS,\n    childNodeIndex,\n    boundariesOut,\n    isEditorTab,\n    isVisible,\n    isUnbreakable,\n    isEmptyBlock,\n    isWhitespace,\n    isVisibleTextNode,\n    getOffsetAndCharSize,\n    ZERO_WIDTH_CHARS,\n} from '../utils/utils.js';\n\n/**\n * Handle text node deletion for Text.oDeleteForward and Text.oDeleteBackward.\n *\n * @param {int} charSize\n * @param {int} offset\n * @param {DIRECTIONS} direction\n * @param {boolean} alreadyMoved\n */\nexport function deleteText(charSize, offset, direction, alreadyMoved) {\n    const parentElement = this.parentElement;\n    // Split around the character where the deletion occurs.\n    const firstSplitOffset = splitTextNode(this, offset);\n    const secondSplitOffset = splitTextNode(parentElement.childNodes[firstSplitOffset], charSize);\n    const middleNode = parentElement.childNodes[firstSplitOffset];\n\n    // Do remove the character, then restore the state of the surrounding parts.\n    const restore = prepareUpdate(parentElement, firstSplitOffset, parentElement, secondSplitOffset);\n    const isSpace = isWhitespace(middleNode) && !isInPre(middleNode);\n    const isZWS = ZERO_WIDTH_CHARS.includes(middleNode.nodeValue);\n    middleNode.remove();\n    restore();\n\n    // If the removed element was not visible content, propagate the deletion.\n    const parentState = getState(parentElement, firstSplitOffset, direction);\n    if (\n        isZWS ||\n        (isSpace &&\n            (parentState.cType !== CTYPES.CONTENT || parentState.node === undefined))\n    ) {\n        if (direction === DIRECTIONS.LEFT) {\n            parentElement.oDeleteBackward(firstSplitOffset, alreadyMoved);\n        } else {\n            if (isSpace && parentState.node == undefined) {\n                // multiple invisible space at the start of the node\n                this.oDeleteForward(offset, alreadyMoved);\n            } else {\n                parentElement.oDeleteForward(firstSplitOffset, alreadyMoved);\n            }\n        }\n        if (isZWS && parentElement.isConnected) {\n            fillEmpty(parentElement);\n        }\n        return;\n    }\n    fillEmpty(parentElement);\n    setSelection(parentElement, firstSplitOffset);\n}\n\nText.prototype.oDeleteForward = function (offset, alreadyMoved = false) {\n    const parentElement = this.parentElement;\n\n    if (offset === this.nodeValue.length) {\n        // Delete at the end of a text node is not a specific case to handle,\n        // let the element implementation handle it.\n        parentElement.oDeleteForward([...parentElement.childNodes].indexOf(this) + 1);\n        return;\n    }\n    // Get the size of the unicode character to remove.\n    const [newOffset, charSize] = getOffsetAndCharSize(this.nodeValue, offset + 1, DIRECTIONS.RIGHT);\n    deleteText.call(this, charSize, newOffset, DIRECTIONS.RIGHT, alreadyMoved);\n};\n\nHTMLElement.prototype.oDeleteForward = function (offset) {\n    const filterFunc = node =>\n        isSelfClosingElement(node) || isVisibleTextNode(node) || isNotEditableNode(node);\n\n    const firstLeafNode = findNode(rightLeafOnlyNotBlockNotEditablePath(this, offset), filterFunc);\n    if (firstLeafNode &&\n        isZWS(firstLeafNode) &&\n        this.parentElement.hasAttribute('data-oe-zws-empty-inline')\n    ) {\n        const grandparent = this.parentElement.parentElement;\n        if (!grandparent) {\n            return;\n        }\n\n        const parentIndex = childNodeIndex(this.parentElement);\n        const restore = prepareUpdate(...boundariesOut(this.parentElement));\n        this.parentElement.remove();\n        restore();\n        HTMLElement.prototype.oDeleteForward.call(grandparent, parentIndex);\n        return;\n    } else if (\n        firstLeafNode &&\n        firstLeafNode.nodeType === Node.TEXT_NODE &&\n        firstLeafNode.textContent === '\\ufeff'\n    ) {\n        firstLeafNode.oDeleteForward(1);\n        return;\n    }\n    if (\n        this.hasAttribute &&\n        this.hasAttribute('data-oe-zws-empty-inline') &&\n        (\n            isZWS(this) ||\n            (this.textContent === '' && this.childNodes.length === 0)\n        )\n    ) {\n        const parent = this.parentElement;\n        if (!parent) {\n            return;\n        }\n\n        const index = childNodeIndex(this);\n        const restore = prepareUpdate(...boundariesOut(this));\n        this.remove();\n        restore();\n        HTMLElement.prototype.oDeleteForward.call(parent, index);\n        return;\n    }\n\n    if (firstLeafNode && (isFontAwesome(firstLeafNode) || isNotEditableNode(firstLeafNode))) {\n        const nextSibling = firstLeafNode.nextSibling;\n        const nextSiblingText = nextSibling ? nextSibling.textContent : '';\n        firstLeafNode.remove();\n        if (isEditorTab(firstLeafNode) && nextSiblingText[0] === '\\u200B') {\n            // When deleting an editor tab, we need to ensure it's related ZWS\n            // il deleted as well.\n            nextSibling.textContent = nextSiblingText.replace('\\u200B', '');\n        }\n        return;\n    }\n    if (\n        firstLeafNode &&\n        (firstLeafNode.nodeName !== 'BR' ||\n            getState(...rightPos(firstLeafNode), DIRECTIONS.RIGHT).cType !== CTYPES.BLOCK_INSIDE)\n    ) {\n        firstLeafNode.oDeleteBackward(Math.min(1, nodeSize(firstLeafNode)));\n        return;\n    }\n\n    const nextSibling = this.nextSibling;\n    if (\n        (\n            offset === this.childNodes.length ||\n            (this.childNodes.length === 1 && this.childNodes[0].tagName === 'BR')\n        ) &&\n        this.parentElement &&\n        nextSibling &&\n        ['LI', 'UL', 'OL'].includes(nextSibling.tagName)\n    ) {\n        const nextSiblingNestedLi = nextSibling.querySelector('li:first-child');\n        if (nextSiblingNestedLi) {\n            // Add the first LI from the next sibbling list to the current list.\n            this.after(nextSiblingNestedLi);\n            // Remove the next sibbling list if it's empty.\n            if (!isVisible(nextSibling, false) || nextSibling.textContent === '') {\n                nextSibling.remove();\n            }\n            HTMLElement.prototype.oDeleteBackward.call(nextSiblingNestedLi, 0, true);\n        } else {\n            HTMLElement.prototype.oDeleteBackward.call(nextSibling, 0);\n        }\n        return;\n    }\n\n    // Remove the nextSibling if it is a non-editable element.\n    if (\n        nextSibling &&\n        nextSibling.nodeType === Node.ELEMENT_NODE &&\n        !nextSibling.isContentEditable\n    ) {\n        nextSibling.remove();\n        return;\n    }\n    const parentEl = this.parentElement;\n    // Prevent the deleteForward operation since it is done at the end of an\n    // enclosed editable zone (inside a non-editable zone in the editor).\n    if (\n        parentEl &&\n        parentEl.getAttribute(\"contenteditable\") === \"true\" &&\n        parentEl.oid !== \"root\" &&\n        parentEl.parentElement &&\n        !parentEl.parentElement.isContentEditable &&\n        paragraphRelatedElements.includes(this.tagName) &&\n        !this.nextElementSibling\n    ) {\n        throw UNREMOVABLE_ROLLBACK_CODE;\n    }\n    const firstOutNode = findNode(\n        rightLeafOnlyPathNotBlockNotEditablePath(\n            ...(firstLeafNode ? rightPos(firstLeafNode) : [this, offset]),\n        ),\n        filterFunc,\n    );\n    if (firstOutNode) {\n        // If next sibblings is an unbreadable node, and current node is empty, we\n        // delete the current node and put the selection at the beginning of the\n        // next sibbling.\n        if (nextSibling && isUnbreakable(nextSibling) && isEmptyBlock(this)) {\n            const restore = prepareUpdate(...boundariesOut(this));\n            this.remove();\n            restore();\n            setSelection(firstOutNode, 0);\n            return;\n        }\n        const [node, offset] = leftPos(firstOutNode);\n        // If the next node is a <LI> we call directly the htmlElement\n        // oDeleteBackward : because we don't want the special cases of\n        // deleteBackward for LI when we comme from a deleteForward.\n        if (node.tagName === 'LI') {\n            HTMLElement.prototype.oDeleteBackward.call(node, offset);\n            return;\n        }\n        node.oDeleteBackward(offset);\n        return;\n    }\n};\n", "/** @odoo-module **/\nimport { UNBREAKABLE_ROLLBACK_CODE } from '../utils/constants.js';\n\nimport {\n    childNodeIndex,\n    fillEmpty,\n    isBlock,\n    isUnbreakable,\n    prepareUpdate,\n    setCursorStart,\n    setCursorEnd,\n    setTagName,\n    splitTextNode,\n    toggleClass,\n    isVisible,\n    descendants,\n    isVisibleTextNode,\n    nodeSize,\n} from '../utils/utils.js';\n\nText.prototype.oEnter = function (offset) {\n    this.parentElement.oEnter(splitTextNode(this, offset), true);\n};\n/**\n * The whole logic can pretty much be described by this example:\n *\n *     <p><span><b>[]xt</b>ab</span>cd</p> + ENTER\n * <=> <p><span><b><br></b>[]<b>xt</b>ab</span>cd</p> + ENTER\n * <=> <p><span><b><br></b></span>[]<span><b>xt</b>ab</span>cd</p> + ENTER\n * <=> <p><span><b><br></b></span></p><p><span><b>[]xt</b>ab</span>cd</p> + SANITIZE\n * <=> <p><br></p><p><span><b>[]xt</b>ab</span>cd</p>\n *\n * Propagate the split for as long as we split an inline node, then refocus the\n * beginning of the first split node\n */\nHTMLElement.prototype.oEnter = function (offset, firstSplit = true) {\n    let didSplit = false;\n    if (isUnbreakable(this)) {\n        throw UNBREAKABLE_ROLLBACK_CODE;\n    }\n    let restore;\n    if (firstSplit) {\n        restore = prepareUpdate(this, offset);\n    }\n\n    // First split the node in two and move half the children in the clone.\n    let splitEl = this.cloneNode(false);\n    while (offset < this.childNodes.length) {\n        splitEl.appendChild(this.childNodes[offset]);\n    }\n    if (isBlock(this) || splitEl.hasChildNodes()) {\n        this.after(splitEl);\n        if (isBlock(splitEl) || isVisible(splitEl) || splitEl.textContent === '\\u200B') {\n            didSplit = true;\n        } else {\n            splitEl.remove();\n        }\n    }\n\n    // Propagate the split until reaching a block element (or continue to the\n    // closest list item element if there is one).\n    if (!isBlock(this) || (this.nodeName !== 'LI' && this.closest('LI'))) {\n        if (this.parentElement) {\n            this.parentElement.oEnter(childNodeIndex(this) + 1, !didSplit);\n        } else {\n            // There was no block parent element in the original chain, consider\n            // this unsplittable, like an unbreakable.\n            throw UNBREAKABLE_ROLLBACK_CODE;\n        }\n    }\n\n    // All split have been done, place the cursor at the right position, and\n    // fill/remove empty nodes.\n    if (firstSplit && didSplit) {\n        restore();\n\n        let node = this;\n        while (!isBlock(node) && !isVisible(node)) {\n            const toRemove = node;\n            node = node.parentNode;\n            toRemove.remove();\n        }\n        fillEmpty(node);\n        fillEmpty(splitEl);\n        if (splitEl.tagName === 'A') {\n            while (!isBlock(splitEl) && !isVisible(splitEl)) {\n                const toRemove = splitEl;\n                splitEl = splitEl.parentNode;\n                toRemove.remove();\n            }\n        }\n        setCursorStart(splitEl);\n    }\n    return splitEl;\n};\n/**\n * Specific behavior for headings: do not split in two if cursor at the end but\n * instead create a paragraph.\n * Cursor end of line: <h1>title[]</h1> + ENTER <=> <h1>title</h1><p>[]<br/></p>\n * Cursor in the line: <h1>tit[]le</h1> + ENTER <=> <h1>tit</h1><h1>[]le</h1>\n */\nHTMLHeadingElement.prototype.oEnter = function () {\n    const newEl = HTMLElement.prototype.oEnter.call(this, ...arguments);\n    if (!descendants(newEl).some(isVisibleTextNode)) {\n        const node = setTagName(newEl, 'P');\n        node.replaceChildren(document.createElement('br'));\n        setCursorStart(node);\n    }\n};\nconst isAtEdgeofLink = (link, offset) => {\n    const childNodes = [...link.childNodes];\n    let firstVisibleIndex = childNodes.findIndex(isVisible);\n    firstVisibleIndex = firstVisibleIndex === -1 ? 0 : firstVisibleIndex;\n    if (offset <= firstVisibleIndex) {\n        return 'start';\n    }\n    let lastVisibleIndex = childNodes.reverse().findIndex(isVisible);\n    lastVisibleIndex = lastVisibleIndex === -1 ? 0 : childNodes.length - lastVisibleIndex;\n    if (offset >= lastVisibleIndex) {\n        return 'end';\n    }\n    return false;\n}\nHTMLAnchorElement.prototype.oEnter = function (offset) {\n    const edge = isAtEdgeofLink(this, offset);\n    if (edge === 'start') {\n        // Do not break the link at the edge: break before it.\n        if (this.previousSibling) {\n            return HTMLElement.prototype.oEnter.call(this.previousSibling, nodeSize(this.previousSibling));\n        } else {\n            const index = childNodeIndex(this);\n            return HTMLElement.prototype.oEnter.call(this.parentElement, index ? index - 1 : 0);\n        }\n    } else if (edge === 'end') {\n        // Do not break the link at the edge: break after it.\n        if (this.nextSibling) {\n            return HTMLElement.prototype.oEnter.call(this.nextSibling, 0);\n        } else {\n            return HTMLElement.prototype.oEnter.call(this.parentElement, childNodeIndex(this));\n        }\n    } else {\n        HTMLElement.prototype.oEnter.call(this, ...arguments);\n    }\n}\n/**\n * Same specific behavior as headings elements.\n */\nHTMLQuoteElement.prototype.oEnter = HTMLHeadingElement.prototype.oEnter;\n/**\n * Specific behavior for list items: deletion and unindentation when empty.\n */\nHTMLLIElement.prototype.oEnter = function () {\n    // If not empty list item, regular block split\n    if (this.textContent || this.querySelector('table')) {\n        const node = HTMLElement.prototype.oEnter.call(this, ...arguments);\n        if (node.classList.contains('o_checked')) {\n            toggleClass(node, 'o_checked');\n        }\n        return node;\n    }\n    this.oShiftTab();\n};\n/**\n * Specific behavior for pre: insert newline (\\n) in text or insert p at end.\n */\nHTMLPreElement.prototype.oEnter = function (offset) {\n    if (offset < this.childNodes.length) {\n        const lineBreak = document.createElement('br');\n        this.insertBefore(lineBreak, this.childNodes[offset]);\n        setCursorEnd(lineBreak);\n    } else {\n        const node = document.createElement('p');\n        this.parentNode.insertBefore(node, this.nextSibling);\n        fillEmpty(node);\n        setCursorStart(node);\n    }\n};\n", "/** @odoo-module **/\nimport {\n    CTYPES,\n    DIRECTIONS,\n    isFakeLineBreak,\n    prepareUpdate,\n    rightPos,\n    setSelection,\n    getState,\n    leftPos,\n    splitTextNode,\n} from '../utils/utils.js';\n\nText.prototype.oShiftEnter = function (offset) {\n    return this.parentElement.oShiftEnter(splitTextNode(this, offset));\n};\n\nHTMLElement.prototype.oShiftEnter = function (offset) {\n    const restore = prepareUpdate(this, offset);\n\n    const brEl = document.createElement('br');\n    const brEls = [brEl];\n    if (offset >= this.childNodes.length) {\n        this.appendChild(brEl);\n    } else {\n        this.insertBefore(brEl, this.childNodes[offset]);\n    }\n    if (isFakeLineBreak(brEl) && getState(...leftPos(brEl), DIRECTIONS.LEFT).cType !== CTYPES.BR) {\n        const brEl2 = document.createElement('br');\n        brEl.before(brEl2);\n        brEls.unshift(brEl2);\n    }\n\n    restore();\n\n    for (const el of brEls) {\n        if (el.parentNode) {\n            setSelection(...rightPos(el));\n            break;\n        }\n    }\n\n    return brEls;\n};\n\n/**\n * Special behavior for links: do not add a line break at its edges, but rather\n * move the line break outside the link.\n */\nHTMLAnchorElement.prototype.oShiftEnter = function () {\n    const brs = HTMLElement.prototype.oShiftEnter.call(this, ...arguments);\n    const anchor = brs[0].parentElement;\n    let firstChild = anchor.firstChild;\n    if (firstChild && firstChild.nodeType === Node.TEXT_NODE && firstChild.textContent === '\\uFEFF') {\n        firstChild = anchor.childNodes[1];\n    }\n    let lastChild = anchor.lastChild;\n    if (lastChild && lastChild.nodeType === Node.TEXT_NODE && lastChild.textContent === '\\uFEFF') {\n        lastChild = anchor.childNodes.length > 1 && anchor.childNodes[anchor.childNodes.length - 2];\n    }\n    if (brs.includes(firstChild)) {\n        brs.forEach(br => anchor.before(br));\n        setSelection(...rightPos(brs[brs.length - 1]));\n    } else if (brs.includes(lastChild)) {\n        brs.forEach(br => anchor.after(br));\n        setSelection(...rightPos(brs[0]));\n    }\n}\n", "/** @odoo-module **/\nimport { isUnbreakable, preserveCursor, toggleClass, isBlock, isVisible } from '../utils/utils.js';\n\nText.prototype.oShiftTab = function () {\n    return this.parentElement.oShiftTab(0);\n};\n\nHTMLElement.prototype.oShiftTab = function (offset = undefined) {\n    if (!isUnbreakable(this)) {\n        return this.parentElement.oShiftTab(offset);\n    }\n    return false;\n};\n\n// returns: is still in a <LI> nested list\nHTMLLIElement.prototype.oShiftTab = function () {\n    const li = this;\n    if (li.nextElementSibling) {\n        const ul = li.parentElement.cloneNode(false);\n        while (li.nextSibling) {\n            ul.append(li.nextSibling);\n        }\n        if (li.parentNode.parentNode.tagName === 'LI') {\n            const lip = document.createElement('li');\n            toggleClass(lip, 'oe-nested');\n            lip.append(ul);\n            li.parentNode.parentNode.after(lip);\n        } else {\n            li.parentNode.after(ul);\n        }\n    }\n\n    const restoreCursor = preserveCursor(this.ownerDocument);\n    if (\n        li.parentNode.parentNode.tagName === 'LI' &&\n        !li.parentNode.parentNode.classList.contains('nav-item')\n    ) {\n        const ul = li.parentNode;\n        const shouldRemoveParentLi = !li.previousElementSibling && !ul.previousElementSibling;\n        const toremove = shouldRemoveParentLi ? ul.parentNode : null;\n        ul.parentNode.after(li);\n        if (toremove) {\n            if (toremove.classList.contains('oe-nested')) {\n                // <li>content<ul>...</ul></li>\n                toremove.remove();\n            } else {\n                // <li class=\"oe-nested\"><ul>...</ul></li>\n                ul.remove();\n            }\n        }\n        restoreCursor();\n        return li;\n    } else {\n        const ul = li.parentNode;\n        const dir = ul.getAttribute('dir');\n        let p;\n        while (li.firstChild) {\n            if (isBlock(li.firstChild)) {\n                if (p && isVisible(p)) {\n                    ul.after(p);\n                }\n                p = undefined;\n                ul.after(li.firstChild);\n            } else {\n                p = p || document.createElement('P');\n                if (dir) {\n                    p.setAttribute('dir', dir);\n                    p.style.setProperty('text-align', ul.style.getPropertyValue('text-align'));\n                }\n                p.append(li.firstChild);\n            }\n        }\n        if (p && isVisible(p)) {\n            ul.after(p)\n        }\n\n        restoreCursor(new Map([[li, ul.nextSibling]]));\n        li.remove();\n        if (!ul.firstElementChild) {\n            ul.remove();\n        }\n    }\n    return false;\n};\n", "/** @odoo-module **/\nimport { createList, getListMode, isBlock, preserveCursor, toggleClass } from '../utils/utils.js';\n\nText.prototype.oTab = function () {\n    return this.parentElement.oTab(0);\n};\n\nHTMLElement.prototype.oTab = function (offset) {\n    if (!isBlock(this)) {\n        return this.parentElement.oTab(offset);\n    }\n    return false;\n};\n\nHTMLLIElement.prototype.oTab = function () {\n    const lip = document.createElement('li');\n    const destul =\n        (this.previousElementSibling && this.previousElementSibling.querySelector('ol, ul')) ||\n        (this.nextElementSibling && this.nextElementSibling.querySelector('ol, ul')) ||\n        this.closest('ul, ol');\n\n    const ul = createList(getListMode(destul));\n    lip.append(ul);\n\n    const cr = preserveCursor(this.ownerDocument);\n    toggleClass(lip, 'oe-nested');\n    this.before(lip);\n    ul.append(this);\n    cr();\n    return true;\n};\n", "/** @odoo-module **/\nimport {\n    childNodeIndex,\n    isBlock,\n    preserveCursor,\n    insertListAfter,\n    getAdjacents,\n    closestElement,\n    toggleList,\n} from '../utils/utils.js';\n\nText.prototype.oToggleList = function (offset, mode) {\n    // Create a new list if textNode is inside a nav-item list\n    if (closestElement(this, 'li').classList.contains('nav-item')) {\n        const restoreCursor = preserveCursor(this.ownerDocument);\n        insertListAfter(this, mode, [this]);\n        restoreCursor();\n    } else {\n        this.parentElement.oToggleList(childNodeIndex(this), mode);\n    }\n};\n\nHTMLElement.prototype.oToggleList = function (offset, mode = 'UL') {\n    if (!isBlock(this)) {\n        return this.parentElement.oToggleList(childNodeIndex(this));\n    }\n    const closestLi = this.closest('li');\n    // Do not toggle nav-item list as they don't behave like regular list items\n    if (closestLi && !closestLi.classList.contains('nav-item')) {\n        return closestLi.oToggleList(0, mode);\n    }\n    const restoreCursor = preserveCursor(this.ownerDocument);\n    if (this.oid === 'root') {\n        const callingNode = this.childNodes[offset];\n        const group = getAdjacents(callingNode, n => !isBlock(n));\n        insertListAfter(callingNode, mode, [group]);\n        restoreCursor();\n    } else {\n        const list = insertListAfter(this, mode, [this]);\n        if (this.hasAttribute('dir')) {\n            list.setAttribute('dir', this.getAttribute('dir'));\n        }\n        restoreCursor(new Map([[this, list.firstElementChild]]));\n    }\n};\n\nHTMLParagraphElement.prototype.oToggleList = function (offset, mode = 'UL') {\n    const restoreCursor = preserveCursor(this.ownerDocument);\n    const list = insertListAfter(this, mode, [[...this.childNodes]]);\n    const classList = [...list.classList];\n    for (const attribute of this.attributes) {\n        if (attribute.name === 'class' && attribute.value && list.className) {\n            list.className = `${list.className} ${attribute.value}`;\n        } else {\n            list.setAttribute(attribute.name, attribute.value);\n        }\n    }\n    for (const className of classList) {\n        list.classList.toggle(className, true); // restore list classes\n    }\n    this.remove();\n\n    restoreCursor(new Map([[this, list.firstChild]]));\n    return true;\n};\n\nHTMLLIElement.prototype.oToggleList = function (offset, mode) {\n    const restoreCursor = preserveCursor(this.ownerDocument);\n    toggleList(this, mode, offset);\n    restoreCursor();\n    return false;\n};\n\nHTMLTableCellElement.prototype.oToggleList = function (offset, mode) {\n    const restoreCursor = preserveCursor(this.ownerDocument);\n    const callingNode = this.childNodes[offset];\n    const group = getAdjacents(callingNode, n => !isBlock(n));\n    insertListAfter(callingNode, mode, [group]);\n    restoreCursor();\n};\n", "/** @odoo-module **/\nimport { makeDraggableHook } from \"@web/core/utils/draggable_hook_builder\";\nimport { pick } from \"@web/core/utils/objects\";\nimport { reactive } from \"@odoo/owl\";\nimport { throttleForAnimation } from \"@web/core/utils/timing\";\nimport { closest, touching } from \"@web/core/utils/ui\";\n\n/** @typedef {import(\"@web/core/utils/draggable_hook_builder\").DraggableHandlerParams} DraggableHandlerParams */\n/** @typedef {import(\"@web/core/utils/draggable_hook_builder\").DraggableBuilderParams} DraggableBuilderParams */\n/** @typedef {import(\"@web/core/utils/draggable\").DraggableParams} DraggableParams */\n\n/** @typedef {DraggableHandlerParams & { dropzone: HTMLElement | null, helper: HTMLElement }} DragAndDropHandlerParams */\n/** @typedef {DraggableHandlerParams & { helper: HTMLElement }} DragAndDropStartParams */\n/** @typedef {DraggableHandlerParams & { dropzone: HTMLElement }} DropzoneHandlerParams */\n/**\n * @typedef DragAndDropParams\n * @extends {DraggableParams}\n *\n * MANDATORY\n * @property {(() => Array)} dropzones a function that returns the available dropzones\n * @property {(() => HTMLElement)} helper a function that returns a helper element\n * that will follow the cursor when dragging\n * @property {HTMLElement || (() => HTMLElement)} scrollingElement the element on\n * which a scroll should be triggered\n *\n * HANDLERS (Optional)\n * @property {(params: DragAndDropStartParams) => any} [onDragStart]\n * called when a dragging sequence is initiated\n * @property {(params: DropzoneHandlerParams) => any} [dropzoneOver]\n * called when an element is over a dropzone\n * @property {(params: DropzoneHandlerParams) => any} [dropzoneOut]\n * called when an element is leaving a dropzone\n * @property {(params: DragAndDropHandlerParams) => any} [onDrag]\n * called when an element is being dragged\n * @property {(params: DragAndDropHandlerParams) => any} [onDragEnd]\n * called when the dragging sequence is over\n */\n/**\n * @typedef NativeDraggableState\n * @property {(params: DraggableParams) => any} update\n * method to update the params of the draggable\n * @property {import(\"@web/core/utils/draggable\").DraggableState} state\n * state of the draggable component\n * @property {() => any} destroy\n * method to destroy and unbind the draggable component\n */\n/**\n * Utility function to create a native draggable component\n *\n * @param {DraggableBuilderParams} hookParams\n * @param {DraggableParams} initialParams\n * @returns {NativeDraggableState}\n */\nexport function useNativeDraggable(hookParams, initialParams) {\n    const setupFunctions = new Map();\n    const cleanupFunctions = [];\n    const currentParams = { ...initialParams };\n    const setupHooks = {\n        wrapState: reactive,\n        throttle: throttleForAnimation,\n        addListener: (el, type, callback, options) => {\n            el.addEventListener(type, callback, options);\n            cleanupFunctions.push(() => el.removeEventListener(type, callback));\n        },\n        setup: (setupFn, depsFn) => setupFunctions.set(setupFn, depsFn),\n        teardown: (cleanupFn) => {\n            cleanupFunctions.push(cleanupFn);\n        }\n    };\n    // Compatibility for tests\n    const el = initialParams.ref.el;\n    // TODO this is probably to be removed in master: the received params\n    // contain the selector that should be checked and it will be transferred\n    // to the makeDraggableHook function. There should not be any need to add\n    // the default selector class here.\n    el.classList.add(\"o_draggable\");\n    cleanupFunctions.push(() => el.classList.remove(\"o_draggable\"));\n\n    const draggableState = makeDraggableHook({ setupHooks, ...hookParams})(currentParams);\n    draggableState.enable = true;\n    const draggableComponent = {\n        state: draggableState,\n        update: (newParams) => {\n            Object.assign(currentParams, newParams);\n            setupFunctions.forEach((depsFn, setupFn) => setupFn(...depsFn()));\n        },\n        destroy: () => {\n            cleanupFunctions.forEach((cleanupFn) => cleanupFn());\n        }\n    };\n    draggableComponent.update({});\n    return draggableComponent;\n}\n\nfunction updateElementPosition(el, { x, y }, styleFn, offset = { x: 0, y: 0 }) {\n    return styleFn(el, { top: `${y - offset.y}px`, left: `${x - offset.x}px`});\n}\n/** @type DraggableBuilderParams */\nconst dragAndDropHookParams = {\n    name: \"useDragAndDrop\",\n    acceptedParams: {\n        dropzones: [Function],\n        scrollingElement: [Object, Function],\n        helper: [Function],\n        extraWindow: [Object, Function],\n    },\n    edgeScrolling: { enabled: true },\n    onComputeParams({ ctx, params }) {\n        // The helper is mandatory and will follow the cursor instead\n        ctx.followCursor = false;\n        ctx.scrollingElement = params.scrollingElement;\n        ctx.getHelper = params.helper;\n        ctx.getDropZones = params.dropzones;\n    },\n    onWillStartDrag: ({ ctx }) => {\n        ctx.current.container = ctx.scrollingElement;\n        ctx.current.helperOffset = { x: 0, y: 0 };\n    },\n    onDragStart: ({ ctx, addStyle, addCleanup }) => {\n        // Use the helper as the tracking element to properly update scroll values.\n        ctx.current.element = ctx.getHelper({ ...ctx.current, ...ctx.pointer });\n        ctx.current.helper = ctx.current.element;\n        ctx.current.helper.style.position = \"fixed\";\n        // We want the pointer events on the helper so that the cursor\n        // is properly displayed.\n        ctx.current.helper.classList.remove(\"o_dragged\");\n        ctx.current.helper.style.cursor = ctx.cursor;\n        ctx.current.helper.style.pointerEvents = \"auto\";\n\n        // If the helper is inside the iframe, we want pointer events on the\n        // frame element so that they reach the window and properly apply\n        // the cursor.\n        const frameElement = ctx.current.helper.ownerDocument.defaultView.frameElement;\n        if (frameElement) {\n            addStyle(frameElement, { pointerEvents: \"auto\" });\n        }\n\n        addCleanup(() => ctx.current.helper.remove());\n\n        updateElementPosition(ctx.current.helper, ctx.pointer, addStyle, ctx.current.helperOffset);\n\n        return pick(ctx.current, \"element\", \"helper\");\n    },\n    onDrag: ({ ctx, addStyle, callHandler }) => {\n        ctx.current.helper.classList.add(\"o_draggable_dragging\");\n\n        updateElementPosition(ctx.current.helper, ctx.pointer, addStyle, ctx.current.helperOffset);\n        // Unfortunately, DOMRect is not an Object, so spreading operator from\n        // `touching` does not work, so convert DOMRect to plain object.\n        let helperRect = ctx.current.helper.getBoundingClientRect();\n        helperRect = {\n            x: helperRect.x,\n            y: helperRect.y,\n            width: helperRect.width,\n            height: helperRect.height,\n        };\n        const dropzoneEl = closest(touching(ctx.getDropZones(), helperRect), helperRect);\n        // Update the drop zone if it's in grid mode\n        if (ctx.current.dropzone?.el && ctx.current.dropzone.el.classList.contains(\"oe_grid_zone\")) {\n            ctx.current.dropzone.rect = ctx.current.dropzone.el.getBoundingClientRect();\n        }\n        if (\n            ctx.current.dropzone &&\n            (\n                ctx.current.dropzone.el === dropzoneEl\n                || (\n                    !dropzoneEl\n                    && touching([ctx.current.helper], ctx.current.dropzone.rect).length > 0\n                )\n            )\n        ) {\n            // If no new dropzone but old one is still valid, return early.\n            return pick(ctx.current, \"element\", \"dropzone\", \"helper\");\n        }\n\n        if (ctx.current.dropzone && dropzoneEl !== ctx.current.dropzone.el) {\n            callHandler(\"dropzoneOut\", { dropzone: ctx.current.dropzone });\n            delete ctx.current.dropzone;\n        }\n\n        if (dropzoneEl) {\n            // Save rect information prior to calling the over function\n            // to keep a consistent dropzone even if content was added.\n            const rect = DOMRect.fromRect(dropzoneEl.getBoundingClientRect());\n            ctx.current.dropzone = {\n                el: dropzoneEl,\n                rect: {\n                    x: rect.x, y: rect.y, width: rect.width, height: rect.height\n                }\n            };\n            callHandler(\"dropzoneOver\", { dropzone: ctx.current.dropzone });\n        }\n        return pick(ctx.current, \"element\", \"dropzone\", \"helper\");\n    },\n    onDragEnd({ ctx }) {\n        return pick(ctx.current, \"element\", \"dropzone\", \"helper\");\n    }\n};\n/**\n * Function to start a drag and drop handler\n *\n * @param {DragAndDropParams} initialParams params given to the drag and drop\n * component\n * @returns {NativeDraggableState}\n */\nexport function useDragAndDrop(initialParams) {\n    return useNativeDraggable(dragAndDropHookParams, initialParams);\n}\n", "/** @odoo-module **/\n\nimport { registry } from '@web/core/registry'\nimport { HotkeyCommandItem } from '@web/core/commands/default_providers'\nimport { Wysiwyg } from '@web_editor/js/wysiwyg/wysiwyg';\n\n// The only way to know if an editor is under focus when the command palette\n// open is to look if there in a selection within a wysiwyg editor in the page.\n// As the selection changes after the command palette is open, we need to save\n// the action (that have the range and editor in the closure) as well as the\n// label to use.\nlet sessionActionLabel = [];\n\nconst commandProviderRegistry = registry.category(\"command_provider\");\ncommandProviderRegistry.add(\"link dialog\", {\n    async provide(env, { sessionId }) {\n        let [lastSessionId, action, label] = sessionActionLabel;\n        if (lastSessionId !== sessionId) {\n            const wysiwyg = [...Wysiwyg.activeWysiwygs].find((wysiwyg) => {\n                return wysiwyg.isSelectionInEditable();\n            });\n            const selection = wysiwyg && wysiwyg.odooEditor && wysiwyg.odooEditor.document.getSelection();\n            const range = selection && selection.rangeCount && selection.getRangeAt(0);\n            if (range) {\n                label = !wysiwyg.getInSelection('a') ? 'Create link' : 'Edit link';\n                action = () => {\n                    const selection = wysiwyg.odooEditor.document.getSelection();\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n\n                    wysiwyg.openLinkToolsFromSelection();\n                }\n                sessionActionLabel = [sessionId, action, label]\n            } else {\n                sessionActionLabel = [sessionId];\n            }\n        }\n        [lastSessionId, action, label] = sessionActionLabel;\n\n        if (action) {\n            return [\n                {\n                    Component: HotkeyCommandItem,\n                    action: action,\n                    category: 'shortcut_conflict',\n                    name: label,\n                    props: { hotkey: 'control+k' },\n                }\n            ]\n        } else {\n            return [];\n        }\n    },\n});\n", "/** @odoo-module */\nimport {\n    ancestors,\n    closestElement,\n    resetOuids,\n    setSelection,\n} from '@web_editor/js/editor/odoo-editor/src/OdooEditor';\nimport { useNativeDraggable } from \"@web_editor/js/editor/drag_and_drop\";\n\nconst simpleDraggableHook = {\n    acceptedParams: {\n        helper: [Function],\n    },\n    edgeScrolling: { enable: true },\n    onComputeParams({ ctx, params }) {\n        ctx.helper = params.helper;\n        ctx.followCursor = false;\n        ctx.tolerance = 0;\n    },\n    onDragStart({ ctx }) {\n        ctx.current.element = ctx.helper();\n        ctx.current.element.style.left = `${ctx.pointer.x + 10}px`;\n        ctx.current.element.style.top = `${ctx.pointer.y + 10}px`;\n        ctx.current.element.style.position = \"fixed\";\n        // makeDraggableHook disables pointer events, we want them in this case\n        document.body.classList.remove(\"pe-none\");\n        return ctx.current;\n    },\n    onDrag({ ctx }) {\n        ctx.current.element.style.left = `${ctx.pointer.x}px`;\n        ctx.current.element.style.top = `${ctx.pointer.y}px`;\n    },\n    onDragEnd({ ctx }) {\n        ctx.current.element.remove();\n        return ctx.current;\n    },\n};\n\nconst WIDGET_CONTAINER_WIDTH = 25;\nconst WIDGET_MOVE_SIZE = 20;\n\nconst ALLOWED_ELEMENTS = 'h1, h2, h3, p, hr, pre, blockquote, ul, ol, table, .o_knowledge_behavior_anchor, .o_text_columns, .o_editor_banner, .oe_movable';\n\nexport class MoveNodePlugin {\n    constructor(options = {}) {\n        this._options = options;\n\n        this._intersectionObserver = new IntersectionObserver(\n            this._intersectionObserverCallback.bind(this),\n            {\n                root: document,\n            }\n        );\n        this._visibleMovableElements = new Set();\n    }\n\n    start() {\n        this._editor = this._options.editor;\n        this._editable = this._options.editor.editable;\n        this._document = this._options.editor.document;\n        this._elementHookMap = new Map();\n\n        this._editor.addDomListener(this._editable, 'mousemove', this._onMousemove.bind(this), true);\n        this._editor.addDomListener(this._editor.document, 'keydown', this._onDocumentKeydown.bind(this), true);\n        this._editor.addDomListener(this._editor.document, 'mousemove', this._onDocumentMousemove.bind(this), true);\n\n        const avatarContainer = this._editor.mainAbsoluteContainer.querySelector('[data-oe-absolute-container-id=\"oe-avatars-counters-container\"]');\n\n        // This container help to add zone into which the mouse can activate the move widget.\n        this._widgetHookContainer = this._editor.makeAbsoluteContainer('oe-widget-hooks-container');\n        avatarContainer.before(this._widgetHookContainer);\n        // This container contains the differents widgets.\n        this._widgetContainer = this._editor.makeAbsoluteContainer('oe-widgets-container');\n        avatarContainer.before(this._widgetContainer);\n        // This container contains the jquery helper element.\n        this._dragHelperContainer = this._editor.makeAbsoluteContainer('oe-movenode-helper-container');\n        avatarContainer.before(this._dragHelperContainer);\n        // This container contains drop zones. They are the zones that handle where the drop should happen.\n        this._dropzonesContainer = this._editor.makeAbsoluteContainer('oe-dropzones-container');\n        avatarContainer.before(this._dropzonesContainer);\n        // This container contains drop hint. The final rectangle showed to the user.\n        this._dropzoneHintContainer = this._editor.makeAbsoluteContainer('oe-dropzone-hint-container');\n        avatarContainer.before(this._dropzoneHintContainer);\n\n        // Uncomment line for debugging tranparent zones\n        // this._widgetHookContainer.classList.add('debug');\n        // this._dropzonesContainer.classList.add('debug');\n\n        this._scrollableElement = closestElement(this._editable.parentElement);\n        while (this._scrollableElement && getComputedStyle(this._scrollableElement).overflowY !== 'auto') {\n            this._scrollableElement = this._scrollableElement.parentElement;\n        }\n        this._scrollableElement = this._scrollableElement || this._editable;\n\n        this._resetHooksNextMousemove = true;\n        this.mutationObserver = new MutationObserver(() => {\n            this._resetHooksNextMousemove = true;\n            this._removeMoveWidget();\n        });\n        this.mutationObserver.observe(this._editable, {\n            childList: true,\n            subtree: true,\n            characterData: true,\n            characterDataOldValue: true,\n        });\n        this._editor.addDomListener(window, 'resize', this._updateHooks.bind(this));\n        if (this._editor.document.defaultView !== window) {\n            this._editor.addDomListener(this._editor.document.defaultView, 'resize', this._updateHooks.bind(this));\n        }\n    }\n    destroy() {\n        this._intersectionObserver.disconnect();\n        this.mutationObserver.disconnect();\n        this.smoothScrollOnDrag && this.smoothScrollOnDrag.destroy();\n    }\n    _intersectionObserverCallback(entries) {\n        for (const entry of entries) {\n            const element = entry.target;\n            if (entry.isIntersecting) {\n                this._visibleMovableElements.add(element);\n                this._resetHooksNextMousemove = true;\n            } else {\n                this._visibleMovableElements.delete(element);\n                const hookElement = this._elementHookMap.get(element);\n                if (hookElement) {\n                    // If hookElement is undefined, it means that this callback\n                    // was called after a new element was inserted in the\n                    // editable, but before the next _updateHooks. The hook will\n                    // be created when that happens.\n                    hookElement.style.display = `none`;\n                }\n            }\n        }\n    }\n    _updateHooks() {\n        const editableStyles = getComputedStyle(this._editable);\n        this._editableRect = this._editable.getBoundingClientRect();\n        const paddingLeft = parseInt(editableStyles.paddingLeft, 10) || 0;\n        this._editableRect.x = this._editableRect.x + paddingLeft - (WIDGET_CONTAINER_WIDTH + 5);\n        this._editableRect.width = this._editableRect.width - paddingLeft + (WIDGET_CONTAINER_WIDTH + 5);\n        const containerRect = this._widgetHookContainer.getBoundingClientRect();\n        const elements = this._getMovableElements();\n\n        const elementsToGarbageCollect = new Set(this._elementHookMap.keys());\n        for (const index in elements) {\n            const element = elements[index];\n            elementsToGarbageCollect.delete(element);\n            let hookElement = this._elementHookMap.get(element);\n            if (!hookElement) {\n                hookElement = document.createElement('div');\n                this._elementHookMap.set(element, hookElement);\n                hookElement.classList.add('oe-dropzone-hook');\n                hookElement.addEventListener('mouseenter', () => {\n                    if (element !== this._currentMovableElement) {\n                        this._setMovableElement(element);\n                    }\n                });\n                this._widgetHookContainer.append(hookElement);\n                hookElement.style.display = `none`;\n\n                this._intersectionObserver.observe(element);\n            }\n            hookElement.style.zIndex = index;\n        }\n        // For all the elements that are not in the dom, remove their\n        // corresponding hook.\n        for (const element of elementsToGarbageCollect) {\n            this._visibleMovableElements.delete(element);\n            this._elementHookMap.get(element).remove();\n            this._intersectionObserver.unobserve(element);\n            this._elementHookMap.delete(element);\n        }\n\n        const visibleElements = [...this._visibleMovableElements];\n        // Prevent layout thrashing by computing all the rects in advance.\n        const elementRects = visibleElements.map((element) => element.getBoundingClientRect());\n        for (const index in visibleElements) {\n            const element = visibleElements[index];\n            const elementRect = elementRects[index];\n            const hookElement = this._elementHookMap.get(element);\n\n            const style = getComputedStyle(element);\n            const marginTop = parseInt(style.marginTop, 10) || 0;\n            const marginBottom = parseInt(style.marginBottom, 10) || 0;\n            let hookBox;\n            if (element.tagName === 'HR') {\n                hookBox = new DOMRect(\n                    elementRect.x - containerRect.left - WIDGET_CONTAINER_WIDTH,\n                    elementRect.y - containerRect.top - marginTop,\n                    elementRect.width + WIDGET_CONTAINER_WIDTH,\n                    elementRect.height + marginTop + marginBottom,\n                );\n            } else {\n                hookBox = new DOMRect(\n                    elementRect.x - containerRect.left - WIDGET_CONTAINER_WIDTH,\n                    elementRect.y - containerRect.top - marginTop,\n                    WIDGET_CONTAINER_WIDTH,\n                    elementRect.height + marginTop + marginBottom,\n                );\n            }\n\n            hookElement.style.left = `${hookBox.x}px`;\n            hookElement.style.top = `${hookBox.y}px`;\n            hookElement.style.width = `${hookBox.width}px`;\n            hookElement.style.height = `${hookBox.height}px`;\n            hookElement.style.display = `block`;\n        }\n    }\n    _updateAnchorWidgets(newAnchorWidget) {\n        let movableElement = newAnchorWidget && closestElement(newAnchorWidget, (node) => {\n            return isNodeMovable(node) && node.matches(ALLOWED_ELEMENTS);\n        });\n        // Retrive the first list container from the ancestors.\n        const listContainer = movableElement && ancestors(movableElement, this._editable)\n            .reverse()\n            .find(n => ['UL', 'OL'].includes(n.tagName));\n        movableElement = listContainer || movableElement;\n        if (movableElement && (movableElement !== this._currentMovableElement)) {\n            this._setMovableElement(movableElement);\n        }\n    }\n    _getMovableElements() {\n        return [...new Set([...this._editable.querySelectorAll(ALLOWED_ELEMENTS)])]\n            .filter((node) => isNodeMovable(node));\n    }\n    _getDroppableElements(draggableNode) {\n        return this._getMovableElements().filter((node) =>\n            !closestElement(node.parentElement, (n) => n === draggableNode)\n        );\n    }\n    _setMovableElement(movableElement) {\n        this._removeMoveWidget();\n        this._currentMovableElement = movableElement;\n        this._editor.disableAvatarForElement(movableElement);\n\n        const containerRect = this._widgetContainer.getBoundingClientRect();\n        const anchorBlockRect = this._currentMovableElement.getBoundingClientRect();\n        const closestList = closestElement(this._currentMovableElement, 'ul, ol'); // Prevent overlap bullets.\n        const anchorX = closestList ? closestList.getBoundingClientRect().x : anchorBlockRect.x;\n        let anchorY = anchorBlockRect.y;\n        if (this._currentMovableElement.tagName.match(/H[1-6]/)) {\n            anchorY += (anchorBlockRect.height - WIDGET_MOVE_SIZE) / 2;\n        }\n\n        this._moveWidget = this._document.createElement('div');\n        this._moveWidget.className = 'oe-sidewidget-move fa fa-sort';\n        this._widgetContainer.append(this._moveWidget);\n\n        let moveWidgetOffsetTop = 0;\n        if (movableElement.tagName === 'HR') {\n            const style = getComputedStyle(movableElement);\n            moveWidgetOffsetTop = parseInt(style.marginTop, 10) || 0;\n        }\n\n        this._moveWidget.style.width = `${WIDGET_MOVE_SIZE}px`;\n        this._moveWidget.style.height = `${WIDGET_MOVE_SIZE}px`;\n        this._moveWidget.style.top = `${anchorY - containerRect.y - moveWidgetOffsetTop}px`;\n        this._moveWidget.style.left = `${anchorX - containerRect.x - WIDGET_CONTAINER_WIDTH}px`;\n\n        if (this._scrollableElement) {\n            this.smoothScrollOnDrag && this.smoothScrollOnDrag.destroy();\n            // TODO: This should be made more generic, one hook for the entire\n            // editable with each element handled.\n            this.smoothScrollOnDrag = useNativeDraggable(simpleDraggableHook, {\n                ref: { el: this._widgetContainer },\n                elements: \".oe-sidewidget-move\",\n                onDragStart: () => this._startDropzones(movableElement, containerRect),\n                onDragEnd: () => this._stopDropzones(movableElement),\n                helper: () => {\n                    const container = document.createElement('div');\n                    container.append(movableElement.cloneNode(true));\n                    const style = getComputedStyle(movableElement);\n                    container.style.height = style.height;\n                    container.style.width = style.width;\n                    container.style.paddingLeft = '25px';\n                    container.style.opacity = '0.4';\n                    this._dragHelperContainer.append(container);\n                    return container;\n                }\n            });\n        }\n    }\n    _removeMoveWidget() {\n        this._editor.enableAvatars();\n        this._moveWidget?.remove();\n        this._moveWidget = undefined;\n        this._currentMovableElement = undefined;\n    }\n    _startDropzones(movableElement, containerRect, directions = ['north', 'south']) {\n        this._removeMoveWidget();\n        const elements = this._getDroppableElements(movableElement);\n\n        this._dropzonesContainer.replaceChildren();\n        this._editable.classList.add('oe-editor-dragging');\n\n        for (const element of elements) {\n            const originalRect = element.getBoundingClientRect();\n            const style = getComputedStyle(element);\n            const marginTop = parseInt(style.marginTop, 10);\n            const marginBottom = parseInt(style.marginBottom, 10);\n            const marginLeft = parseInt(style.marginLeft, 10);\n            const marginRight = parseInt(style.marginRight, 10);\n\n            const dropzoneRect = new DOMRect(\n                originalRect.left - marginLeft - WIDGET_CONTAINER_WIDTH,\n                originalRect.top - marginTop,\n                originalRect.width + marginLeft + marginRight + WIDGET_CONTAINER_WIDTH,\n                originalRect.height + marginTop + marginBottom,\n            );\n            const dropzoneHintRect = new DOMRect(\n                originalRect.left - marginLeft,\n                originalRect.top - marginTop,\n                originalRect.width + marginLeft + marginRight,\n                originalRect.height + marginTop + marginBottom,\n            );\n\n            const dropzoneBox = document.createElement('div');\n            dropzoneBox.className = `oe-dropzone-box`;\n            dropzoneBox.style.top = `${dropzoneRect.top - containerRect.top}px`;\n            dropzoneBox.style.left = `${dropzoneRect.left - containerRect.left}px`;\n            dropzoneBox.style.width = `${dropzoneRect.width}px`;\n            dropzoneBox.style.height = `${dropzoneRect.height}px`;\n\n            const dropzoneHintBox = document.createElement('div');\n            dropzoneHintBox.className = `oe-dropzone-box`;\n            dropzoneHintBox.style.top = `${dropzoneHintRect.top - containerRect.top}px`;\n            dropzoneHintBox.style.left = `${dropzoneHintRect.left - containerRect.left}px`;\n            dropzoneHintBox.style.width = `${dropzoneHintRect.width}px`;\n            dropzoneHintBox.style.height = `${dropzoneHintRect.height}px`;\n\n            const sideElements = {};\n            for (const direction of directions) {\n                const sideElement = document.createElement('div');\n                sideElement.className = `oe-dropzone-box-side oe-dropzone-box-side-${direction}`;\n                sideElements[direction] = sideElement;\n                dropzoneBox.append(sideElement);\n                sideElement.addEventListener('mouseenter', () => {\n                    this._currentZone = [direction];\n\n                    removeDropHint();\n                    this._currentDropHint = document.createElement('div');\n                    this._currentDropHint.className = `oe-current-drop-hint`;\n                    const currentDropHintSize = 4;\n                    const currentDropHintSizeHalf = currentDropHintSize / 2;\n\n                    if (direction === 'north') {\n                        this._currentDropHint.style['top'] = `-${currentDropHintSizeHalf}px`;\n                        this._currentDropHint.style['width'] = `100%`;\n                        this._currentDropHint.style['height'] = `${currentDropHintSize}px`;\n                        dropzoneHintBox.append(this._currentDropHint);\n                        this._currentDropHintElementPosition = ['top', element];\n                    } else if (direction === 'south') {\n                        this._currentDropHint.style['bottom'] = `-${currentDropHintSizeHalf}px`;\n                        this._currentDropHint.style['width'] = `100%`;\n                        this._currentDropHint.style['height'] = `${currentDropHintSize}px`;\n                        dropzoneHintBox.append(this._currentDropHint);\n                        this._currentDropHintElementPosition = ['bottom', element];\n                    } else if (direction === 'west') {\n                        this._currentDropHint.style['left'] = `-${currentDropHintSizeHalf}px`;\n                        this._currentDropHint.style['height'] = `100%`;\n                        this._currentDropHint.style['width'] = `${currentDropHintSize}px`;\n                        dropzoneHintBox.append(this._currentDropHint);\n                        this._currentDropHintElementPosition = ['left', element];\n                    } else if (direction === 'east') {\n                        this._currentDropHint.style['right'] = `-${currentDropHintSizeHalf}px`;\n                        this._currentDropHint.style['height'] = `100%`;\n                        this._currentDropHint.style['width'] = `${currentDropHintSize}px`;\n                        dropzoneHintBox.append(this._currentDropHint);\n                        this._currentDropHintElementPosition = ['right', element];\n                    }\n                });\n                const removeDropHint = () => {\n                    if (this._currentDropHint) {\n                        this._currentDropHint.remove();\n                        this._currentDropHint = null;\n                    }\n                    this._currentDropHintCommand = null;\n                }\n                dropzoneBox.addEventListener('mouseleave', removeDropHint);\n            }\n\n            this._dropzonesContainer.append(dropzoneBox);\n            this._dropzoneHintContainer.append(dropzoneHintBox);\n        }\n    }\n    _stopDropzones(movableElement) {\n        this._editable.classList.remove('oe-editor-dragging');\n        this._dropzonesContainer.replaceChildren();\n        this._dropzoneHintContainer.replaceChildren();\n\n        if (this._currentDropHintElementPosition) {\n            const [position, focusElelement] = this._currentDropHintElementPosition;\n            this._currentDropHintElementPosition = undefined;\n            const previousParent = movableElement.parentElement;\n            if (position === 'top') {\n                focusElelement.before(movableElement);\n            } else if (position === 'bottom') {\n                focusElelement.after(movableElement);\n            }\n            if (previousParent.innerHTML.trim() === '') {\n                const p = document.createElement('p');\n                const br = document.createElement('br');\n                p.append(br);\n                previousParent.append(p);\n            }\n            setSelection(\n                movableElement,\n                movableElement.childNodes.length\n            );\n            resetOuids(movableElement);\n            this._editor.historyStep();\n        }\n    }\n    _onMousemove(e) {\n        this._updateAnchorWidgets(e.target);\n    }\n    _onDocumentKeydown() {\n        // Hide the move widget upon keystroke for visual clarity and provide\n        // visibility to a collaborative avatar.\n        this._removeMoveWidget();\n    }\n    _onDocumentMousemove(e) {\n        if(this._resetHooksNextMousemove) {\n            this._resetHooksNextMousemove = false;\n            this._removeMoveWidget();\n            this._updateHooks();\n        }\n        if (this._editableRect && !isPointInside(this._editableRect, e.clientX, e.clientY)) {\n            this._removeMoveWidget();\n        }\n    }\n}\n\nfunction isNodeMovable(node) {\n    return node.parentElement?.getAttribute('contentEditable') === 'true' && !node.parentElement.closest('.o_editor_banner');\n}\n\nfunction isPointInside(rect, x, y) {\n    return rect.left <= x &&\n        rect.right >= x &&\n        rect.top <= y &&\n        rect.bottom >= y;\n};\n", "/** @odoo-module */\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst collaborationDebug = urlParams.get('collaborationDebug');\nconst COLLABORATION_LOCALSTORAGE_KEY = 'odoo_editor_collaboration_debug';\nif (typeof collaborationDebug === 'string') {\n    if (collaborationDebug === 'false') {\n        localStorage.removeItem(\n            COLLABORATION_LOCALSTORAGE_KEY,\n            urlParams.get('collaborationDebug'),\n        );\n    } else {\n        localStorage.setItem(COLLABORATION_LOCALSTORAGE_KEY, urlParams.get('collaborationDebug'));\n    }\n}\nconst debugValue = localStorage.getItem(COLLABORATION_LOCALSTORAGE_KEY);\n\nconst debugShowLog = ['', 'true', 'all'].includes(debugValue);\nconst debugShowNotifications = debugValue === 'all';\n\nconst baseNotificationMethods = {\n    ptp_request: async function(notification) {\n        const { requestId, requestName, requestPayload, requestTransport } =\n            notification.notificationPayload;\n        this._onRequest(\n            notification.fromClientId,\n            requestId,\n            requestName,\n            requestPayload,\n            requestTransport,\n        );\n    },\n    ptp_request_result: function(notification) {\n        const { requestId, result } = notification.notificationPayload;\n        // If not in _pendingRequestResolver, it means it has timeout.\n        if (this._pendingRequestResolver[requestId]) {\n            clearTimeout(this._pendingRequestResolver[requestId].rejectTimeout);\n            this._pendingRequestResolver[requestId].resolve(result);\n            delete this._pendingRequestResolver[requestId];\n        }\n    },\n\n    ptp_join: async function (notification) {\n        const clientId = notification.fromClientId;\n        if (this.clientsInfos[clientId] && this.clientsInfos[clientId].peerConnection) {\n            return this.clientsInfos[clientId];\n        }\n        this._createClient(clientId);\n    },\n\n    rtc_signal_icecandidate: async function (notification) {\n        if (debugShowLog) console.log(`%creceive candidate`, 'background: darkgreen; color: white;');\n        const clientInfos = this.clientsInfos[notification.fromClientId];\n        if (\n            !clientInfos ||\n            !clientInfos.peerConnection ||\n            clientInfos.peerConnection.connectionState === 'closed'\n        ) {\n            console.groupCollapsed('=== ERROR: Handle Ice Candidate from undefined|closed ===');\n            console.trace(clientInfos);\n            console.groupEnd();\n            return;\n        }\n        if (!clientInfos.peerConnection.remoteDescription) {\n            clientInfos.iceCandidateBuffer.push(notification.notificationPayload);\n        } else {\n            this._addIceCandidate(clientInfos, notification.notificationPayload);\n        }\n    },\n    rtc_signal_description: async function (notification) {\n        const description = notification.notificationPayload;\n        if (debugShowLog)\n            console.log(\n                `%cdescription received:`,\n                'background: blueviolet; color: white;',\n                description,\n            );\n\n        const clientInfos =\n            this.clientsInfos[notification.fromClientId] ||\n            this._createClient(notification.fromClientId);\n        const pc = clientInfos.peerConnection;\n\n        if (!pc || pc.connectionState === 'closed') {\n            if (debugShowLog) {\n                console.groupCollapsed('=== ERROR: handle offer ===');\n                console.log(\n                    'An offer has been received for a non-existent peer connection - client: ' +\n                        notification.fromClientId,\n                );\n                console.trace(pc && pc.connectionState);\n                console.groupEnd();\n            }\n            return;\n        }\n\n        // Skip if we already have an offer.\n        if (pc.signalingState === 'have-remote-offer') {\n            return;\n        }\n\n        // If there is a racing conditing with the signaling offer (two\n        // being sent at the same time). We need one client that abort by\n        // rollbacking to a stable signaling state where the other is\n        // continuing the process. The client that is polite is the one that\n        // will rollback.\n        const isPolite =\n            ('' + notification.fromClientId).localeCompare('' + this._currentClientId) === 1;\n        if (debugShowLog)\n            console.log(\n                `%cisPolite: %c${isPolite}`,\n                'background: deepskyblue;',\n                `background:${isPolite ? 'green' : 'red'}`,\n            );\n\n        const isOfferRacing =\n            description.type === 'offer' &&\n            (clientInfos.makingOffer || pc.signalingState !== 'stable');\n        // If there is a racing conditing with the signaling offer and the\n        // client is impolite, we must not process this offer and wait for\n        // the answer for the signaling process to continue.\n        if (isOfferRacing && !isPolite) {\n            if (debugShowLog)\n                console.log(\n                    `%creturn because isOfferRacing && !isPolite. pc.signalingState: ${pc.signalingState}`,\n                    'background: red;',\n                );\n            return;\n        }\n        if (debugShowLog) {\n            console.log(`%cisOfferRacing: ${isOfferRacing}`, 'background: red;');\n            console.log(`%c SETREMOTEDESCRIPTION`, 'background: navy; color:white;');\n        }\n        try {\n            await pc.setRemoteDescription(description);\n        } catch (e) {\n            if (e instanceof DOMException && e.name === 'InvalidStateError') {\n                console.error(e);\n                return;\n            } else {\n                throw e;\n            }\n        }\n        if (clientInfos.iceCandidateBuffer.length) {\n            for (const candidate of clientInfos.iceCandidateBuffer) {\n                await this._addIceCandidate(clientInfos, candidate);\n            }\n            clientInfos.iceCandidateBuffer.splice(0);\n        }\n        if (description.type === 'offer') {\n            const answerDescription = await pc.createAnswer();\n            try {\n                await pc.setLocalDescription(answerDescription);\n            } catch (e) {\n                if (e instanceof DOMException && e.name === 'InvalidStateError') {\n                    console.error(e);\n                    return;\n                } else {\n                    throw e;\n                }\n            }\n            this.notifyClient(\n                notification.fromClientId,\n                'rtc_signal_description',\n                pc.localDescription,\n            );\n        }\n    },\n};\n\nexport class PeerToPeer {\n    constructor(options) {\n        this.options = options;\n        this._currentClientId = this.options.currentClientId;\n        if (debugShowLog)\n            console.log(\n                `%c currentClientId:${this._currentClientId}`,\n                'background: blue; color: white;',\n            );\n\n        // clientId -> ClientInfos\n        this.clientsInfos = {};\n        this._lastRequestId = -1;\n        this._pendingRequestResolver = {};\n        this._stopped = false;\n    }\n\n    stop() {\n        this.closeAllConnections();\n        this._stopped = true;\n    }\n\n    getConnectedClientIds() {\n        return Object.entries(this.clientsInfos)\n            .filter(\n                ([id, infos]) =>\n                    infos.peerConnection && infos.peerConnection.iceConnectionState === 'connected' &&\n                    infos.dataChannel && infos.dataChannel.readyState === 'open',\n            )\n            .map(([id]) => id);\n    }\n\n    removeClient(clientId) {\n        if (debugShowLog) console.log(`%c REMOVE CLIENT ${clientId}`, 'background: chocolate;');\n        this.notifySelf('ptp_remove', clientId);\n        const clientInfos = this.clientsInfos[clientId];\n        if (!clientInfos) return;\n        clearTimeout(clientInfos.fallbackTimeout);\n        clearTimeout(clientInfos.zombieTimeout);\n        clientInfos.dataChannel && clientInfos.dataChannel.close();\n        clientInfos.peerConnection && clientInfos.peerConnection.close();\n        delete this.clientsInfos[clientId];\n    }\n\n    closeAllConnections() {\n        for (const clientId of Object.keys(this.clientsInfos)) {\n            this.notifyAllClients('ptp_disconnect');\n            this.removeClient(clientId);\n        }\n    }\n\n    async notifyAllClients(notificationName, notificationPayload, { transport = 'server' } = {}) {\n        if (this._stopped) {\n            return;\n        }\n        const transportPayload = {\n            fromClientId: this._currentClientId,\n            notificationName,\n            notificationPayload,\n        };\n        if (transport === 'server') {\n            await this.options.broadcastAll(transportPayload);\n        } else if (transport === 'rtc') {\n            for (const cliendId of Object.keys(this.clientsInfos)) {\n                this._channelNotify(cliendId, transportPayload);\n            }\n        } else {\n            throw new Error(\n                `Transport \"${transport}\" is not supported. Use \"server\" or \"rtc\" transport.`,\n            );\n        }\n    }\n\n    notifyClient(clientId, notificationName, notificationPayload, { transport = 'server' } = {}) {\n        if (this._stopped) {\n            return;\n        }\n        if (debugShowNotifications) {\n            if (notificationName === 'ptp_request_result') {\n                console.log(\n                    `%c${Date.now()} - REQUEST RESULT SEND: %c${transport}:${\n                        notificationPayload.requestId\n                    }:${this._currentClientId.slice('-5')}:${clientId.slice('-5')}`,\n                    'color: #aaa;font-weight:bold;',\n                    'color: #aaa;font-weight:normal',\n                );\n            } else if (notificationName === 'ptp_request') {\n                console.log(\n                    `%c${Date.now()} - REQUEST SEND: %c${transport}:${\n                        notificationPayload.requestName\n                    }|${notificationPayload.requestId}:${this._currentClientId.slice(\n                        '-5',\n                    )}:${clientId.slice('-5')}`,\n                    'color: #aaa;font-weight:bold;',\n                    'color: #aaa;font-weight:normal',\n                );\n            } else {\n                console.log(\n                    `%c${Date.now()} - NOTIFICATION SEND: %c${transport}:${notificationName}:${this._currentClientId.slice(\n                        '-5',\n                    )}:${clientId.slice('-5')}`,\n                    'color: #aaa;font-weight:bold;',\n                    'color: #aaa;font-weight:normal',\n                );\n            }\n        }\n        const transportPayload = {\n            fromClientId: this._currentClientId,\n            toClientId: clientId,\n            notificationName,\n            notificationPayload,\n        };\n        if (transport === 'server') {\n            this.options.broadcastAll(transportPayload);\n        } else if (transport === 'rtc') {\n            this._channelNotify(clientId, transportPayload);\n        } else {\n            throw new Error(\n                `Transport \"${transport}\" is not supported. Use \"server\" or \"rtc\" transport.`,\n            );\n        }\n    }\n\n    notifySelf(notificationName, notificationPayload) {\n        if (this._stopped) {\n            return;\n        }\n        return this.handleNotification({ notificationName, notificationPayload });\n    }\n\n    handleNotification(notification) {\n        if (this._stopped) {\n            return;\n        }\n        const isInternalNotification =\n            typeof notification.fromClientId === 'undefined' &&\n            typeof notification.toClientId === 'undefined';\n        if (\n            isInternalNotification ||\n            (notification.fromClientId !== this._currentClientId && !notification.toClientId) ||\n            notification.toClientId === this._currentClientId\n        ) {\n            if (debugShowNotifications) {\n                if (notification.notificationName === 'ptp_request_result') {\n                    console.log(\n                        `%c${Date.now()} - REQUEST RESULT RECEIVE: %c${\n                            notification.notificationPayload.requestId\n                        }:${notification.fromClientId.slice('-5')}:${notification.toClientId.slice(\n                            '-5',\n                        )}`,\n                        'color: #aaa;font-weight:bold;',\n                        'color: #aaa;font-weight:normal',\n                    );\n                } else if (notification.notificationName === 'ptp_request') {\n                    console.log(\n                        `%c${Date.now()} - REQUEST RECEIVE: %c${\n                            notification.notificationPayload.requestName\n                        }|${\n                            notification.notificationPayload.requestId\n                        }:${notification.fromClientId.slice('-5')}:${notification.toClientId.slice(\n                            '-5',\n                        )}`,\n                        'color: #aaa;font-weight:bold;',\n                        'color: #aaa;font-weight:normal',\n                    );\n                } else {\n                    console.log(\n                        `%c${Date.now()} - NOTIFICATION RECEIVE: %c${\n                            notification.notificationName\n                        }:${notification.fromClientId}:${notification.toClientId}`,\n                        'color: #aaa;font-weight:bold;',\n                        'color: #aaa;font-weight:normal',\n                    );\n                }\n            }\n            try {\n                const baseMethod = baseNotificationMethods[notification.notificationName];\n                if (baseMethod) {\n                    return baseMethod.call(this, notification);\n                }\n                if (this.options.onNotification) {\n                    return this.options.onNotification(notification);\n                }\n            } catch (error) {\n                console.groupCollapsed('=== ERROR: On notification in collaboration ===');\n                console.error(error);\n                console.groupEnd();\n            }\n        }\n    }\n\n    requestClient(clientId, requestName, requestPayload, { transport = 'server' } = {}) {\n        if (this._stopped) {\n            return;\n        }\n        return new Promise((resolve, reject) => {\n            const requestId = this._getRequestId();\n\n            const abort = (reason) => {\n                clearTimeout(rejectTimeout);\n                delete this._pendingRequestResolver[requestId];\n                reject(new RequestError(reason || 'Request was aborted.'));\n            };\n            const rejectTimeout = setTimeout(\n                () => abort('Request took too long (more than 10 seconds).'),\n                10000\n            );\n\n            this._pendingRequestResolver[requestId] = {\n                resolve,\n                rejectTimeout,\n                abort,\n            };\n\n            this.notifyClient(\n                clientId,\n                'ptp_request',\n                {\n                    requestId,\n                    requestName,\n                    requestPayload,\n                    requestTransport: transport,\n                },\n                { transport },\n            );\n        });\n    }\n    abortCurrentRequests() {\n        for (const { abort } of Object.values(this._pendingRequestResolver)) {\n            abort();\n        }\n    }\n    _createClient(clientId, { makeOffer = true } = {}) {\n        if (this._stopped) {\n            return;\n        }\n        if (debugShowLog) console.log('CREATE CONNECTION with client id:', clientId);\n        this.clientsInfos[clientId] = {\n            makingOffer: false,\n            iceCandidateBuffer: [],\n            backoffFactor: 0,\n        };\n\n        if (!navigator.onLine) {\n            return this.clientsInfos[clientId];\n        }\n        const pc = new RTCPeerConnection(this.options.peerConnectionConfig);\n\n        if (makeOffer) {\n            pc.onnegotiationneeded = async () => {\n                if (debugShowLog)\n                    console.log(\n                        `%c NEGONATION NEEDED: ${pc.connectionState}`,\n                        'background: deeppink;',\n                    );\n                try {\n                    this.clientsInfos[clientId].makingOffer = true;\n                    if (debugShowLog)\n                        console.log(\n                            `%ccreating and sending an offer`,\n                            'background: darkmagenta; color: white;',\n                        );\n                    const offer = await pc.createOffer();\n                    // Avoid race condition.\n                    if (pc.signalingState !== 'stable') {\n                        return;\n                    }\n                    await pc.setLocalDescription(offer);\n                    this.notifyClient(clientId, 'rtc_signal_description', pc.localDescription);\n                } catch (err) {\n                    console.error(err);\n                } finally {\n                    this.clientsInfos[clientId].makingOffer = false;\n                }\n            };\n        }\n        pc.onicecandidate = async event => {\n            if (event.candidate) {\n                this.notifyClient(clientId, 'rtc_signal_icecandidate', event.candidate);\n            }\n        };\n        pc.oniceconnectionstatechange = async () => {\n            if (debugShowLog) console.log('ICE STATE UPDATE: ' + pc.iceConnectionState);\n\n            switch (pc.iceConnectionState) {\n                case 'failed':\n                case 'closed':\n                    this.removeClient(clientId);\n                    break;\n                case 'disconnected':\n                    if (navigator.onLine) {\n                        await this._recoverConnection(clientId, {\n                            delay: 3000,\n                            reason: 'ice connection disconnected',\n                        });\n                    }\n                    break;\n                case 'connected':\n                    this.clientsInfos[clientId].backoffFactor = 0;\n                    break;\n            }\n        };\n        // This event does not work in FF. Let's try with oniceconnectionstatechange if it is sufficient.\n        pc.onconnectionstatechange = async () => {\n            if (debugShowLog) console.log('CONNECTION STATE UPDATE:' + pc.connectionState);\n\n            switch (pc.connectionState) {\n                case 'failed':\n                case 'closed':\n                    this.removeClient(clientId);\n                    break;\n                case 'disconnected':\n                    if (navigator.onLine) {\n                        await this._recoverConnection(clientId, {\n                            delay: 3000,\n                            reason: 'connection disconnected',\n                        });\n                    }\n                    break;\n                case 'connected':\n                case 'completed':\n                    this.clientsInfos[clientId].backoffFactor = 0;\n                    break;\n            }\n        };\n        pc.onicecandidateerror = async error => {\n            if (debugShowLog) {\n                console.groupCollapsed('=== ERROR: onIceCandidate ===');\n                console.log(\n                    'connectionState: ' +\n                        pc.connectionState +\n                        ' - iceState: ' +\n                        pc.iceConnectionState,\n                );\n                console.trace(error);\n                console.groupEnd();\n            }\n            this._recoverConnection(clientId, { delay: 3000, reason: 'ice candidate error' });\n        };\n        const dataChannel = pc.createDataChannel('notifications', { negotiated: true, id: 1 });\n        let message = [];\n        dataChannel.onmessage = event => {\n            if (event.data !== '-') {\n                message.push(event.data);\n            } else {\n                this.handleNotification(JSON.parse(message.join('')));\n                message = [];\n            }\n        };\n        dataChannel.onopen = event => {\n            this.notifySelf('rtc_data_channel_open', {\n                connectionClientId: clientId,\n            });\n        };\n\n        this.clientsInfos[clientId].peerConnection = pc;\n        this.clientsInfos[clientId].dataChannel = dataChannel;\n\n        return this.clientsInfos[clientId];\n    }\n    async _addIceCandidate(clientInfos, candidate) {\n        const rtcIceCandidate = new RTCIceCandidate(candidate);\n        try {\n            await clientInfos.peerConnection.addIceCandidate(rtcIceCandidate);\n        } catch (error) {\n            // Ignored.\n            console.groupCollapsed('=== ERROR: ADD ICE CANDIDATE ===');\n            console.trace(error);\n            console.groupEnd();\n        }\n    }\n\n    _channelNotify(clientId, transportPayload) {\n        if (this._stopped) {\n            return;\n        }\n        const clientInfo = this.clientsInfos[clientId];\n        const dataChannel = clientInfo && clientInfo.dataChannel;\n\n        if (!dataChannel || dataChannel.readyState !== 'open') {\n            if (clientInfo && !clientInfo.zombieTimeout) {\n                if (debugShowLog) console.warn(\n                    `Impossible to communicate with client ${clientId}. The connection will be killed in 10 seconds if the datachannel state has not changed.`,\n                );\n                this._killPotentialZombie(clientId);\n            }\n        } else {\n            const str = JSON.stringify(transportPayload);\n            const size = str.length;\n            const maxStringLength = 5000;\n            let from = 0;\n            let to = maxStringLength;\n            while (from < size) {\n                dataChannel.send(str.slice(from, to));\n                from = to;\n                to = to += maxStringLength;\n            }\n            dataChannel.send('-');\n        }\n    }\n\n    _getRequestId() {\n        this._lastRequestId++;\n        return this._lastRequestId;\n    }\n\n    async _onRequest(fromClientId, requestId, requestName, requestPayload, requestTransport) {\n        if (this._stopped) {\n            return;\n        }\n        const requestFunction = this.options.onRequest && this.options.onRequest[requestName];\n        const result = await requestFunction({\n            fromClientId,\n            requestId,\n            requestName,\n            requestPayload,\n        });\n        this.notifyClient(\n            fromClientId,\n            'ptp_request_result',\n            { requestId, result },\n            { transport: requestTransport },\n        );\n    }\n    /**\n     * Attempts a connection recovery by updating the tracks, which will start\n     * a new transaction: negotiationneeded -> offer -> answer -> ...\n     *\n     * @private\n     * @param {Object} [param1]\n     * @param {number} [param1.delay] in ms\n     * @param {string} [param1.reason]\n     */\n    _recoverConnection(clientId, { delay = 0, reason = '' } = {}) {\n        if (this._stopped) {\n            this.removeClient(clientId);\n            return;\n        }\n        const clientInfos = this.clientsInfos[clientId];\n        if (!clientInfos || clientInfos.fallbackTimeout) return;\n        const backoffFactor = this.clientsInfos[clientId].backoffFactor;\n        const backoffDelay = delay * Math.pow(2, backoffFactor);\n        // Stop trying to recover the connection after 10 attempts.\n        if (backoffFactor > 10) {\n            if (debugShowLog) {\n                console.log(\n                    `%c STOP RTC RECOVERY: impossible to connect to client ${clientId}: ${reason}`,\n                    'background: darkred; color: white;',\n                );\n            }\n            return;\n        }\n\n        clientInfos.fallbackTimeout = setTimeout(async () => {\n            clientInfos.fallbackTimeout = undefined;\n            const pc = clientInfos.peerConnection;\n            if (!pc || pc.iceConnectionState === 'connected') {\n                return;\n            }\n            if (['connected', 'closed'].includes(pc.connectionState)) {\n                return;\n            }\n            // hard reset: recreating a RTCPeerConnection\n            if (debugShowLog)\n                console.log(\n                    `%c RTC RECOVERY: calling back client ${clientId} to salvage the connection ${pc.iceConnectionState} after ${backoffDelay}ms, reason: ${reason}`,\n                    'background: darkorange; color: white;',\n                );\n            this.removeClient(clientId);\n            const newClientInfos = this._createClient(clientId);\n            newClientInfos.backoffFactor = backoffFactor + 1;\n        }, backoffDelay);\n    }\n    // todo: do we try to salvage the connection after killing the zombie ?\n    // Maybe the salvage should be done when the connection is dropped.\n    _killPotentialZombie(clientId) {\n        if (this._stopped) {\n            this.removeClient(clientId);\n            return;\n        }\n        const clientInfos = this.clientsInfos[clientId];\n        if (!clientInfos || clientInfos.zombieTimeout) {\n            return;\n        }\n\n        // If there is no connection after 10 seconds, terminate.\n        clientInfos.zombieTimeout = setTimeout(() => {\n            if (clientInfos && clientInfos.dataChannel && clientInfos.dataChannel.readyState !== 'open') {\n                if (debugShowLog) console.log(`%c KILL ZOMBIE ${clientId}`, 'background: red;');\n                this.removeClient(clientId);\n            } else {\n                if (debugShowLog) console.log(`%c NOT A ZOMBIE ${clientId}`, 'background: green;');\n            }\n        }, 10000);\n    }\n}\n\nexport class RequestError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"RequestError\";\n  }\n}\n", "/* @odoo-module */\n\nimport { Component } from \"@odoo/owl\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\n\nexport class ConflictDialog extends Component {\n    static components = { Dialog };\n    static props = [\"close\",\"content\"];\n    static template = 'web_editor.ConflictDialog';\n}\n", "\n/** @odoo-module **/\nimport { registry } from \"@web/core/registry\";\n\nlet colorPickerTemplatePromise;\nexport const getColorPickerTemplateService = {\n    dependencies: [\"orm\"],\n    async: true,\n    start(env, { orm }) {\n        return () => {\n            colorPickerTemplatePromise ??= orm.call(\n                'ir.ui.view',\n                'render_public_asset',\n                ['web_editor.colorpicker', {}]\n            );\n            return colorPickerTemplatePromise;\n        };\n    },\n};\n\nregistry.category(\"services\").add(\"get_color_picker_template\", getColorPickerTemplateService);\n", "/** @odoo-module **/\n\n/**\n * Transform a 2D point using a projective transformation matrix. Note that\n * this method is only well behaved for points that don't map to infinity!\n *\n * @param {number[][]} matrix - A projective transformation matrix\n * @param {number[]} point - A 2D point\n * @returns The transformed 2D point\n */\nexport function transform([[a, b, c], [d, e, f], [g, h, i]], [x, y]) {\n    let z = g * x + h * y + i;\n    return [(a * x + b * y + c) / z, (d * x + e * y + f) / z];\n}\n\n/**\n * Calculate the inverse of a 3x3 matrix assuming it is invertible.\n *\n * @param {number[][]} matrix - A 3x3 matrix\n * @returns The resulting 3x3 matrix\n */\nfunction invert([[a, b, c], [d, e, f], [g, h, i]]) {\n    const determinant = a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n    return [\n        [(e * i - h * f) / determinant, (h * c - b * i) / determinant, (b * f - e * c) / determinant],\n        [(g * f - d * i) / determinant, (a * i - g * c) / determinant, (d * c - a * f) / determinant],\n        [(d * h - g * e) / determinant, (g * b - a * h) / determinant, (a * e - d * b) / determinant],\n    ];\n}\n\n/**\n * Multiply two 3x3 matrices.\n *\n * @param {number[][]} a - A 3x3 matrix\n * @param {number[][]} b - A 3x3 matrix\n * @returns The resulting 3x3 matrix\n */\nfunction multiply(a, b) {\n    const [[a0, a1, a2], [a3, a4, a5], [a6, a7, a8]] = a;\n    const [[b0, b1, b2], [b3, b4, b5], [b6, b7, b8]] = b;\n    return [\n        [a0 * b0 + a1 * b3 + a2 * b6, a0 * b1 + a1 * b4 + a2 * b7, a0 * b2 + a1 * b5 + a2 * b8],\n        [a3 * b0 + a4 * b3 + a5 * b6, a3 * b1 + a4 * b4 + a5 * b7, a3 * b2 + a4 * b5 + a5 * b8],\n        [a6 * b0 + a7 * b3 + a8 * b6, a6 * b1 + a7 * b4 + a8 * b7, a6 * b2 + a7 * b5 + a8 * b8],\n    ];\n}\n\n/**\n * Find a projective transformation mapping a rectangular area at origin (0,0)\n * with a given width and height to a certain quadrilateral.\n *\n * @param {number} width - The width of the rectangular area\n * @param {number} height - The height of the rectangular area\n * @param {number[][]} quadrilateral - The vertices of the quadrilateral\n * @returns A projective transformation matrix\n */\nexport function getProjective(width, height, [[x0, y0], [x1, y1], [x2, y2], [x3, y3]]) {\n    // Calculate a set of homogeneous coordinates a, b, c of the first\n    // point using the other three points as basis vectors in the\n    // underlying vector space.\n    const denominator = x3 * (y1 - y2) + x1 * (y2 - y3) + x2 * (y3 - y1);\n    const a = (x0 * (y2 - y3) + x2 * (y3 - y0) + x3 * (y0 - y2)) / denominator;\n    const b = (x0 * (y3 - y1) + x3 * (y1 - y0) + x1 * (y0 - y3)) / denominator;\n    const c = (x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) / denominator;\n\n    // The reverse transformation maps the homogeneous coordinates of\n    // the last three corners of the original image onto the basis vectors\n    // while mapping the first corner onto (1, 1, 1). The forward\n    // transformation maps those basis vectors in addition to (1, 1, 1)\n    // onto homogeneous coordinates of the corresponding corners of the\n    // projective image. Combining these together yields the projective\n    // transformation we are looking for.\n    const reverse = invert([[width, -width, 0], [0, -height, height], [1, -1, 1]]);\n    const forward = [[a * x1, b * x2, c * x3], [a * y1, b * y2, c * y3], [a, b, c]];\n\n    return multiply(forward, reverse);\n}\n\n/**\n * Find an affine transformation matrix that exactly maps the vertices of a\n * triangle to their corresponding images of a projective transformation. The\n * resulting transformation will be an approximation of the projective\n * transformation for the area inside the triangle.\n *\n * @param {number[][]} projective - A projective transformation matrix\n * @param {number[][]} triangle - The vertices of a triangle\n * @returns - An affine transformation matrix\n */\nexport function getAffineApproximation(projective, [[x0, y0], [x1, y1], [x2, y2]]) {\n    const a = transform(projective, [x0, y0]);\n    const b = transform(projective, [x1, y1]);\n    const c = transform(projective, [x2, y2]);\n\n    return multiply(\n        [[a[0], b[0], c[0]], [a[1], b[1], c[1]], [1, 1, 1]],\n        invert([[x0, x1, x2], [y0, y1, y2], [1, 1, 1]]),\n    );\n}\n", "/** @odoo-module **/\n\nimport { pick } from \"@web/core/utils/objects\";\nimport {getAffineApproximation, getProjective} from \"@web_editor/js/editor/perspective_utils\";\n\n// Fields returned by cropperjs 'getData' method, also need to be passed when\n// initializing the cropper to reuse the previous crop.\nexport const cropperDataFields = ['x', 'y', 'width', 'height', 'rotate', 'scaleX', 'scaleY'];\nconst modifierFields = [\n    'filter',\n    'quality',\n    'mimetype',\n    'glFilter',\n    'originalId',\n    'originalSrc',\n    'resizeWidth',\n    'aspectRatio',\n    \"bgSrc\",\n    \"mimetypeBeforeConversion\",\n];\nexport const isGif = (mimetype) => mimetype === 'image/gif';\n\n// webgl color filters\nconst _applyAll = (result, filter, filters) => {\n    filters.forEach(f => {\n        if (f[0] === 'blend') {\n            const cv = f[1];\n            const ctx = result.getContext('2d');\n            ctx.globalCompositeOperation = f[2];\n            ctx.globalAlpha = f[3];\n            ctx.drawImage(cv, 0, 0);\n            ctx.globalCompositeOperation = 'source-over';\n            ctx.globalAlpha = 1.0;\n        } else {\n            filter.addFilter(...f);\n        }\n    });\n};\nlet applyAll;\n\nconst glFilters = {\n    blur: filter => filter.addFilter('blur', 10),\n\n    '1977': (filter, cv) => {\n        const ctx = cv.getContext('2d');\n        ctx.fillStyle = 'rgb(243, 106, 188)';\n        ctx.fillRect(0, 0, cv.width, cv.height);\n        applyAll(filter, [\n            ['blend', cv, 'screen', .3],\n            ['brightness', .1],\n            ['contrast', .1],\n            ['saturation', .3],\n        ]);\n    },\n\n    aden: (filter, cv) => {\n        const ctx = cv.getContext('2d');\n        ctx.fillStyle = 'rgb(66, 10, 14)';\n        ctx.fillRect(0, 0, cv.width, cv.height);\n        applyAll(filter, [\n            ['blend', cv, 'darken', .2],\n            ['brightness', .2],\n            ['contrast', -.1],\n            ['saturation', -.15],\n            ['hue', 20],\n        ]);\n    },\n\n    brannan: (filter, cv) => {\n        const ctx = cv.getContext('2d');\n        ctx.fillStyle = 'rgb(161, 44, 191)';\n        ctx.fillRect(0, 0, cv.width, cv.height);\n        applyAll(filter, [\n            ['blend', cv, 'lighten', .31],\n            ['sepia', .5],\n            ['contrast', .4],\n        ]);\n    },\n\n    earlybird: (filter, cv) => {\n        const ctx = cv.getContext('2d');\n        const gradient = ctx.createRadialGradient(\n            cv.width / 2, cv.height / 2, 0,\n            cv.width / 2, cv.height / 2, Math.hypot(cv.width, cv.height) / 2\n        );\n        gradient.addColorStop(.2, '#D0BA8E');\n        gradient.addColorStop(1, '#1D0210');\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, cv.width, cv.height);\n        applyAll(filter, [\n            ['blend', cv, 'overlay', .2],\n            ['sepia', .2],\n            ['contrast', -.1],\n        ]);\n    },\n\n    inkwell: (filter, cv) => {\n        applyAll(filter, [\n            ['sepia', .3],\n            ['brightness', .1],\n            ['contrast', -.1],\n            ['desaturateLuminance'],\n        ]);\n    },\n\n    // Needs hue blending mode for perfect reproduction. Close enough?\n    maven: (filter, cv) => {\n        applyAll(filter, [\n            ['sepia', .25],\n            ['brightness', -.05],\n            ['contrast', -.05],\n            ['saturation', .5],\n        ]);\n    },\n\n    toaster: (filter, cv) => {\n        const ctx = cv.getContext('2d');\n        const gradient = ctx.createRadialGradient(\n            cv.width / 2, cv.height / 2, 0,\n            cv.width / 2, cv.height / 2, Math.hypot(cv.width, cv.height) / 2\n        );\n        gradient.addColorStop(0, '#0F4E80');\n        gradient.addColorStop(1, '#3B003B');\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, cv.width, cv.height);\n        applyAll(filter, [\n            ['blend', cv, 'screen', .5],\n            ['brightness', -.1],\n            ['contrast', .5],\n        ]);\n    },\n\n    walden: (filter, cv) => {\n        const ctx = cv.getContext('2d');\n        ctx.fillStyle = '#CC4400';\n        ctx.fillRect(0, 0, cv.width, cv.height);\n        applyAll(filter, [\n            ['blend', cv, 'screen', .3],\n            ['sepia', .3],\n            ['brightness', .1],\n            ['saturation', .6],\n            ['hue', 350],\n        ]);\n    },\n\n    valencia: (filter, cv) => {\n        const ctx = cv.getContext('2d');\n        ctx.fillStyle = '#3A0339';\n        ctx.fillRect(0, 0, cv.width, cv.height);\n        applyAll(filter, [\n            ['blend', cv, 'exclusion', .5],\n            ['sepia', .08],\n            ['brightness', .08],\n            ['contrast', .08],\n        ]);\n    },\n\n    xpro: (filter, cv) => {\n        const ctx = cv.getContext('2d');\n        const gradient = ctx.createRadialGradient(\n            cv.width / 2, cv.height / 2, 0,\n            cv.width / 2, cv.height / 2, Math.hypot(cv.width, cv.height) / 2\n        );\n        gradient.addColorStop(.4, '#E0E7E6');\n        gradient.addColorStop(1, '#2B2AA1');\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, cv.width, cv.height);\n        applyAll(filter, [\n            ['blend', cv, 'color-burn', .7],\n            ['sepia', .3],\n        ]);\n    },\n\n    custom: (filter, cv, filterOptions) => {\n        const options = Object.assign({\n            blend: 'normal',\n            filterColor: '',\n            blur: '0',\n            desaturateLuminance: '0',\n            saturation: '0',\n            contrast: '0',\n            brightness: '0',\n            sepia: '0',\n        }, JSON.parse(filterOptions || \"{}\"));\n        const filters = [];\n        if (options.filterColor) {\n            const ctx = cv.getContext('2d');\n            ctx.fillStyle = options.filterColor;\n            ctx.fillRect(0, 0, cv.width, cv.height);\n            filters.push(['blend', cv, options.blend, 1]);\n        }\n        delete options.blend;\n        delete options.filterColor;\n        filters.push(...Object.entries(options).map(([filter, amount]) => [filter, parseInt(amount) / 100]));\n        applyAll(filter, filters);\n    },\n};\n/**\n * Applies data-attributes modifications to an img tag and returns a dataURL\n * containing the result. This function does not modify the original image.\n *\n * @param {HTMLImageElement} img the image to which modifications are applied\n * @returns {string} dataURL of the image with the applied modifications\n */\nexport async function applyModifications(img, dataOptions = {}) {\n    const data = Object.assign({\n        glFilter: '',\n        filter: '#0000',\n        quality: '75',\n        forceModification: false,\n    }, img.dataset, dataOptions);\n    let {\n        width,\n        height,\n        resizeWidth,\n        quality,\n        filter,\n        mimetype,\n        originalSrc,\n        glFilter,\n        filterOptions,\n        forceModification,\n        perspective,\n        svgAspectRatio,\n        imgAspectRatio,\n    } = data;\n    [width, height, resizeWidth] = [width, height, resizeWidth].map(s => parseFloat(s));\n    quality = parseInt(quality);\n\n    // Skip modifications (required to add shapes on animated GIFs).\n    if (isGif(mimetype) && !forceModification) {\n        return await _loadImageDataURL(originalSrc);\n    }\n\n    // Crop\n    const container = document.createElement('div');\n    const original = await loadImage(originalSrc);\n    // loadImage may have ended up loading a different src (see: LOAD_IMAGE_404)\n    originalSrc = original.getAttribute('src');\n    container.appendChild(original);\n    await activateCropper(original, 0, data);\n    let croppedImg = $(original).cropper('getCroppedCanvas', {width, height});\n    $(original).cropper('destroy');\n\n    // Aspect Ratio\n    if (imgAspectRatio) {\n        document.createElement('div').appendChild(croppedImg);\n        imgAspectRatio = imgAspectRatio.split(':');\n        imgAspectRatio = parseFloat(imgAspectRatio[0]) / parseFloat(imgAspectRatio[1]);\n        await activateCropper(croppedImg, imgAspectRatio, {y: 0});\n        croppedImg = $(croppedImg).cropper('getCroppedCanvas');\n        $(croppedImg).cropper('destroy');\n    }\n\n    // Width\n    const result = document.createElement('canvas');\n    result.width = resizeWidth || croppedImg.width;\n    result.height = perspective ? result.width / svgAspectRatio : croppedImg.height * result.width / croppedImg.width;\n    const ctx = result.getContext('2d');\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.mozImageSmoothingEnabled = true;\n    ctx.webkitImageSmoothingEnabled = true;\n    ctx.msImageSmoothingEnabled = true;\n    ctx.imageSmoothingEnabled = true;\n\n    // Perspective 3D\n    if (perspective) {\n        // x, y coordinates of the corners of the image as a percentage\n        // (relative to the width or height of the image) needed to apply\n        // the 3D effect.\n        const points = JSON.parse(perspective);\n        const divisions = 10;\n        const w = croppedImg.width, h = croppedImg.height;\n\n        const project = getProjective(w, h, [\n            [(result.width / 100) * points[0][0], (result.height / 100) * points[0][1]], // Top-left [x, y]\n            [(result.width / 100) * points[1][0], (result.height / 100) * points[1][1]], // Top-right [x, y]\n            [(result.width / 100) * points[2][0], (result.height / 100) * points[2][1]], // bottom-right [x, y]\n            [(result.width / 100) * points[3][0], (result.height / 100) * points[3][1]], // bottom-left [x, y]\n        ]);\n\n        for (let i = 0; i < divisions; i++) {\n            for (let j = 0; j < divisions; j++) {\n                const [dx, dy] = [w / divisions, h / divisions];\n\n                const upper = {origin: [i * dx, j * dy], sides: [dx, dy], flange: 0.1, overlap: 0};\n                const lower = {origin: [i * dx + dx, j * dy + dy], sides: [-dx, -dy], flange: 0, overlap: 0.1};\n\n                for (let {origin, sides, flange, overlap} of [upper, lower]) {\n                    const [[a, c, e], [b, d, f]] = getAffineApproximation(project, [\n                        origin, [origin[0] + sides[0], origin[1]], [origin[0], origin[1] + sides[1]]\n                    ]);\n\n                    const ox = (i !== divisions ? overlap * sides[0] : 0) + flange * sides[0];\n                    const oy = (j !== divisions ? overlap * sides[1] : 0) + flange * sides[1];\n\n                    origin[0] += flange * sides[0];\n                    origin[1] += flange * sides[1];\n\n                    sides[0] -= flange * sides[0];\n                    sides[1] -= flange * sides[1];\n\n                    ctx.save();\n                    ctx.setTransform(a, b, c, d, e, f);\n\n                    ctx.beginPath();\n                    ctx.moveTo(origin[0] - ox, origin[1] - oy);\n                    ctx.lineTo(origin[0] + sides[0], origin[1] - oy);\n                    ctx.lineTo(origin[0] + sides[0], origin[1]);\n                    ctx.lineTo(origin[0], origin[1] + sides[1]);\n                    ctx.lineTo(origin[0] - ox, origin[1] + sides[1]);\n                    ctx.closePath();\n                    ctx.clip();\n                    ctx.drawImage(croppedImg, 0, 0);\n\n                    ctx.restore();\n                }\n            }\n        }\n    } else {\n        ctx.drawImage(croppedImg, 0, 0, croppedImg.width, croppedImg.height, 0, 0, result.width, result.height);\n    }\n\n    // GL filter\n    if (glFilter) {\n        const glf = new window.WebGLImageFilter();\n        const cv = document.createElement('canvas');\n        cv.width = result.width;\n        cv.height = result.height;\n        applyAll = _applyAll.bind(null, result);\n        glFilters[glFilter](glf, cv, filterOptions);\n        const filtered = glf.apply(result);\n        ctx.drawImage(filtered, 0, 0, filtered.width, filtered.height, 0, 0, result.width, result.height);\n    }\n\n    // Color filter\n    ctx.fillStyle = filter || '#0000';\n    ctx.fillRect(0, 0, result.width, result.height);\n\n    // Quality\n    const dataURL = result.toDataURL(mimetype, quality / 100);\n    const newSize = getDataURLBinarySize(dataURL);\n    const originalSize = _getImageSizeFromCache(originalSrc);\n    const isChanged = !!perspective || !!glFilter ||\n        original.width !== result.width || original.height !== result.height ||\n        original.width !== croppedImg.width || original.height !== croppedImg.height;\n    return (isChanged || originalSize >= newSize) ? dataURL : await _loadImageDataURL(originalSrc);\n}\n\n/**\n * Loads an src into an HTMLImageElement.\n *\n * @param {String} src URL of the image to load\n * @param {HTMLImageElement} [img] img element in which to load the image\n * @returns {Promise<HTMLImageElement>} Promise that resolves to the loaded img\n *     or a placeholder image if the src is not found.\n */\nexport function loadImage(src, img = new Image()) {\n    const handleImage = (source, resolve, reject) => {\n        img.addEventListener(\"load\", () => resolve(img), {once: true});\n        img.addEventListener(\"error\", reject, {once: true});\n        img.src = source;\n    };\n    // The server will return a placeholder image with the following src.\n    // grep: LOAD_IMAGE_404\n    const placeholderHref = \"/web/image/__odoo__unknown__src__/\";\n\n    return new Promise((resolve, reject) => {\n        fetch(src)\n            .then(response => {\n                if (!response.ok) {\n                    src = placeholderHref;\n                }\n                handleImage(src, resolve, reject);\n            })\n            .catch(error => {\n                src = placeholderHref;\n                handleImage(src, resolve, reject);\n            });\n    });\n}\n\n// Because cropperjs acquires images through XHRs on the image src and we don't\n// want to load big images over the network many times when adjusting quality\n// and filter, we create a local cache of the images using object URLs.\nconst imageCache = new Map();\n/**\n * Loads image object URL into cache if not already set and returns it.\n *\n * @param {String} src\n * @returns {Promise}\n */\nfunction _loadImageObjectURL(src) {\n    return _updateImageData(src);\n}\n/**\n * Gets image dataURL from cache in the same way as object URL.\n *\n * @param {String} src\n * @returns {Promise}\n */\nfunction _loadImageDataURL(src) {\n    return _updateImageData(src, 'dataURL');\n}\n/**\n * @param {String} src used as a key on the image cache map.\n * @param {String} [key='objectURL'] specifies the image data to update/return.\n * @returns {Promise<String>} resolves with either dataURL/objectURL value.\n */\nasync function _updateImageData(src, key = 'objectURL') {\n    const currentImageData = imageCache.get(src);\n    if (currentImageData && currentImageData[key]) {\n        return currentImageData[key];\n    }\n    let value = '';\n    const blob = await fetch(src).then(res => res.blob());\n    if (key === 'dataURL') {\n        value = await createDataURL(blob);\n    } else {\n        value = URL.createObjectURL(blob);\n    }\n    imageCache.set(src, Object.assign(currentImageData || {}, {[key]: value, size: blob.size}));\n    return value;\n}\n/**\n * Returns the size of a cached image.\n * Warning: this supposes that the image is already in the cache, i.e. that\n * _updateImageData was called before.\n *\n * @param {String} src used as a key on the image cache map.\n * @returns {Number} size of the image in bytes.\n */\nfunction _getImageSizeFromCache(src) {\n    return imageCache.get(src).size;\n}\n/**\n * Activates the cropper on a given image.\n *\n * @param {jQuery} $image the image on which to activate the cropper\n * @param {Number} aspectRatio the aspectRatio of the crop box\n * @param {DOMStringMap} dataset dataset containing the cropperDataFields\n */\nexport async function activateCropper(image, aspectRatio, dataset) {\n    const oldSrc = image.src;\n    const newSrc = await _loadImageObjectURL(image.getAttribute('src'));\n    image.src = newSrc;\n    $(image).cropper({\n        viewMode: 2,\n        dragMode: 'move',\n        autoCropArea: 1.0,\n        aspectRatio: aspectRatio,\n        data: Object.fromEntries(Object.entries(pick(dataset, ...cropperDataFields))\n            .map(([key, value]) => [key, parseFloat(value)])),\n        // Can't use 0 because it's falsy and cropperjs will then use its defaults (200x100)\n        minContainerWidth: 1,\n        minContainerHeight: 1,\n    });\n    if (oldSrc === newSrc && image.complete) {\n        return;\n    }\n    return new Promise(resolve => image.addEventListener('ready', resolve, {once: true}));\n}\n/**\n * Marks an <img> with its attachment data (originalId, originalSrc, mimetype)\n *\n * @param {HTMLImageElement} img the image whose attachment data should be found\n * @param {Function} rpc a function that can be used to make the RPC. Typically\n *   this would be passed as 'this._rpc.bind(this)' from widgets.\n * @param {string} [attachmentSrc=''] specifies the URL of the corresponding\n * attachment if it can't be found in the 'src' attribute.\n */\nexport async function loadImageInfo(img, rpc, attachmentSrc = '') {\n    const src = attachmentSrc || img.getAttribute('src');\n    // If there is a marked originalSrc, the data is already loaded.\n    // If the image does not have the \"mimetypeBeforeConversion\" attribute, it\n    // has to be added.\n    if ((img.dataset.originalSrc && img.dataset.mimetypeBeforeConversion) || !src) {\n        return;\n    }\n    // In order to be robust to absolute, relative and protocol relative URLs,\n    // the src of the img is first converted to an URL object. To do so, the URL\n    // of the document in which the img is located is used as a base to build\n    // the URL object if the src of the img is a relative or protocol relative\n    // URL. The original attachment linked to the img is then retrieved thanks\n    // to the path of the built URL object.\n    let docHref = img.ownerDocument.defaultView.location.href;\n    if (docHref === \"about:srcdoc\") {\n        docHref = window.location.href;\n    }\n\n    const srcUrl = new URL(src, docHref);\n    const relativeSrc = srcUrl.pathname;\n\n    const {original} = await rpc('/web_editor/get_image_info', {src: relativeSrc});\n    // If src was an absolute \"external\" URL, we consider unlikely that its\n    // relative part matches something from the DB and even if it does, nothing\n    // bad happens, besides using this random image as the original when using\n    // the options, instead of having no option. Note that we do not want to\n    // check if the image is local or not here as a previous bug converted some\n    // local (relative src) images to absolute URL... and that before users had\n    // setup their website domain. That means they can have an absolute URL that\n    // looks like \"https://mycompany.odoo.com/web/image/123\" that leads to a\n    // \"local\" image even if the domain name is now \"mycompany.be\".\n    //\n    // The \"redirect\" check is for when it is a redirect image attachment due to\n    // an external URL upload.\n    if (original && original.image_src && !/\\/web\\/image\\/\\d+-redirect\\//.test(original.image_src)) {\n        if (!img.dataset.mimetype) {\n            // The mimetype has to be added only if it is not already present as\n            // we want to avoid to reset a mimetype set by the user.\n            img.dataset.mimetype = original.mimetype;\n        }\n        img.dataset.originalId = original.id;\n        img.dataset.originalSrc = original.image_src;\n        img.dataset.mimetypeBeforeConversion = original.mimetype;\n    }\n}\n\n/**\n * @param {String} mimetype\n * @param {Boolean} [strict=false] if true, even partially supported images (GIFs)\n *     won't be accepted.\n * @returns {Boolean}\n */\nexport function isImageSupportedForProcessing(mimetype, strict = false) {\n    if (isGif(mimetype)) {\n        return !strict;\n    }\n    return ['image/jpeg', 'image/png', 'image/webp'].includes(mimetype);\n}\n/**\n * @param {HTMLImageElement} img\n * @returns {Boolean}\n */\nexport function isImageSupportedForStyle(img) {\n    if (!img.parentElement) {\n        return false;\n    }\n\n    // See also `[data-oe-type='image'] > img` added as data-exclude of some\n    // snippet options.\n    const isTFieldImg = ('oeType' in img.parentElement.dataset);\n\n    // Editable root elements are technically *potentially* supported here (if\n    // the edited attributes are not computed inside the related view, they\n    // could technically be saved... but as we cannot tell the computed ones\n    // apart from the \"static\" ones, we choose to not support edition at all in\n    // those \"root\" cases).\n    // See also `[data-oe-xpath]` added as data-exclude of some snippet options.\n    const isEditableRootElement = ('oeXpath' in img.dataset);\n\n    return !isTFieldImg && !isEditableRootElement;\n}\n/**\n * @param {HTMLImageElement} img\n * @returns {Promise<Boolean>}\n */\nexport async function isImageCorsProtected(img) {\n    const src = img.getAttribute('src');\n    if (!src) {\n        return false;\n    }\n    let isCorsProtected = false;\n    if (!src.startsWith(\"/\") || /\\/web\\/image\\/\\d+-redirect\\//.test(src)) {\n        // The `fetch()` used later in the code might fail if the image is\n        // CORS protected. We check upfront if it's the case.\n        // Two possible cases:\n        // 1. the `src` is an absolute URL from another domain.\n        //    For instance, abc.odoo.com vs abc.com which are actually the\n        //    same database behind.\n        // 2. A \"attachment-url\" which is just a redirect to the real image\n        //    which could be hosted on another website.\n        isCorsProtected = await fetch(src, {method: 'HEAD'})\n            .then(() => false)\n            .catch(() => true);\n    }\n    return isCorsProtected;\n}\n\n/**\n * @param {Blob} blob\n * @returns {Promise}\n */\nexport function createDataURL(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => resolve(reader.result));\n        reader.addEventListener('abort', reject);\n        reader.addEventListener('error', reject);\n        reader.readAsDataURL(blob);\n    });\n}\n\n/**\n * @param {String} dataURL\n * @returns {Number} number of bytes represented with base64\n */\nexport function getDataURLBinarySize(dataURL) {\n    // Every 4 bytes of base64 represent 3 bytes.\n    return dataURL.split(',')[1].length / 4 * 3;\n}\n\nexport const removeOnImageChangeAttrs = [...cropperDataFields, ...modifierFields];\n\nexport default {\n    applyModifications,\n    cropperDataFields,\n    activateCropper,\n    loadImageInfo,\n    loadImage,\n    removeOnImageChangeAttrs,\n    isImageSupportedForProcessing,\n    isImageSupportedForStyle,\n    createDataURL,\n    isGif,\n    getDataURLBinarySize,\n};\n", "\n/** @odoo-module **/\n\n// These colors are already normalized as per normalizeCSSColor in @web/legacy/js/widgets/colorpicker\nexport default [\n    ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],\n    ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],\n    ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],\n    ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],\n    ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],\n    ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],\n    ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],\n    ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']\n];\n", "/** @odoo-module **/\n\nimport { Component, useRef, onMounted } from \"@odoo/owl\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\n\nexport class AltDialog extends Component {\n    static components = { Dialog };\n    static props = {\n        confirm: Function,\n        close: Function,\n        alt: String,\n        tag_title: String,\n    };\n    static template = 'web_edior.AltDialog';\n    altRef = useRef(\"alt\");\n    tagTitleRef = useRef(\"tag_title\");\n\n    setup() {\n        this.isConfirmedOrCancelled = false; // ensures we do not confirm and/or cancel twice\n        onMounted(() => {\n            this.altRef.el.focus();\n        });\n    }\n    async _cancel() {\n        if (this.isConfirmedOrCancelled) {\n            return;\n        }\n        this.isConfirmedOrCancelled = true;\n        this.props.close();\n    }\n    async _confirm() {\n        if (this.isConfirmedOrCancelled) {\n            return;\n        }\n        this.isConfirmedOrCancelled = true;\n        try {\n            const allNonEscQuots = /\"/g;\n            const alt = this.altRef.el.value.replace(allNonEscQuots, \"&quot;\");\n            const title = this.tagTitleRef.el.value.replace(allNonEscQuots, \"&quot;\");\n            await this.props.confirm(alt, title);\n        } catch (e) {\n            this.props.close();\n            throw e;\n        }\n        this.props.close();\n    }\n}\n", "/** @odoo-module **/\n\nimport { ChatGPTDialog } from '@web_editor/js/wysiwyg/widgets/chatgpt_dialog';\nimport { useState, status } from \"@odoo/owl\";\n\nexport class ChatGPTAlternativesDialog extends ChatGPTDialog {\n    static template = 'web_edior.ChatGPTAlternativesDialog';\n    static props = {\n        ...super.props,\n        originalText: String,\n        alternativesModes: { type: Object, optional: true },\n        numberOfAlternatives: { type: Number, optional: true },\n    };\n    static defaultProps = {\n        alternativesModes: {\n            correct: 'Correct',\n            short: 'Shorten',\n            long: 'Lengthen',\n            friendly: 'Friendly',\n            professional: 'Professional',\n            persuasive: 'Persuasive',\n        },\n        numberOfAlternatives: 3,\n    };\n\n    setup() {\n        super.setup();\n        this.state = useState({\n            ...this.state,\n            conversationHistory: [{\n                role: 'system',\n                content: 'The user wrote the following text:\\n' +\n                    '<generated_text>' + this.props.originalText + '</generated_text>\\n' +\n                    'Your goal is to help the user write alternatives to that text.\\n' +\n                    'Conditions:\\n' +\n                    '- You must respect the format (wrapping the alternative between <generated_text> and </generated_text>)\\n' +\n                    '- You must detect the language of the text given to you and respond in that language\\n' +\n                    '- Do not write HTML\\n' +\n                    '- You must suggest one and only one alternative per answer\\n' +\n                    '- Your answer must be different every time, never repeat yourself\\n' +\n                    '- You must respect whatever extra conditions the user gives you\\n',\n            }],\n            messages: [],\n            alternativesMode: '',\n            messagesInProgress: 0,\n            currentBatchId: null,\n        });\n        this._generationIndex = 0;\n        this._generateAlternatives();\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    switchAlternativesMode(ev) {\n        this.state.alternativesMode = ev.currentTarget.getAttribute('data-mode');\n        this._generateAlternatives(1);\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    async _generateAlternatives(numberOfAlternatives = this.props.numberOfAlternatives) {\n        this.state.messagesInProgress = numberOfAlternatives;\n        const batchId = new Date().getTime();\n        this.state.currentBatchId = batchId;\n        let wasError = false;\n        let messageIndex = 0;\n        while (!wasError && messageIndex < numberOfAlternatives && this.state.currentBatchId === batchId) {\n            this._generationIndex += 1;\n            let query = messageIndex ? 'Write one alternative version of the original text.' : 'Try again another single version of the original text.';\n            if (this.state.alternativesMode && !messageIndex) {\n                query += ` Make it more ${this.state.alternativesMode} than your last answer.`;\n            }\n            if (this.state.alternativesMode === 'correct') {\n                query = 'Simply correct the text, without altering its meaning in any way. Preserve whatever language the user wrote their text in.';\n            }\n            await this._generate(query, (content, isError) => {\n                if (this.state.currentBatchId === batchId) {\n                    const alternative = content.replace(/^[\\s\\S]*<generated_text>/, '').replace(/<\\/generated_text>[\\s\\S]*$/, '');\n                    if (isError) {\n                        wasError = true;\n                    } else {\n                        this.state.conversationHistory.push({\n                            role: 'user',\n                            content: query,\n                        }, {\n                            role: 'assistant',\n                            content,\n                        });\n                    }\n                    this.state.messages.push({\n                        author: 'assistant',\n                        text: alternative,\n                        isError,\n                        batchId,\n                        mode: this.state.alternativesMode,\n                        id: new Date().getTime(),\n                    });\n                }\n            }).catch(() => {\n                if (this.state.currentBatchId === batchId) {\n                    wasError = true;\n                    this.state.messages = [];\n                }\n            });\n            if (status(this) === 'destroyed') {\n                return;\n            }\n            messageIndex += 1;\n            this.state.messagesInProgress -= 1;\n            if (wasError) {\n                break;\n            }\n        }\n        this.state.messagesInProgress = 0;\n    }\n}\n", "/** @odoo-module **/\n\nimport { Component, useState, markup, onWillDestroy, status } from \"@odoo/owl\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\nimport { escape } from \"@web/core/utils/strings\";\nimport { _t } from \"@web/core/l10n/translation\";\n\n/**\n * General component for common logic between different dialogs.\n */\nexport class ChatGPTDialog extends Component {\n    static components = { Dialog };\n    static props = {\n        close: Function,\n        insert: Function,\n    };\n\n    setup() {\n        this.rpc = useService('rpc');\n        this.state = useState({ selectedMessageId: null });\n        onWillDestroy(() => this.pendingRpcPromise?.abort());\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    selectMessage(ev) {\n        this.state.selectedMessageId = +ev.currentTarget.getAttribute('data-message-id');\n    }\n    insertMessage(ev) {\n        this.selectMessage(ev);\n        this._confirm();\n    }\n    formatContent(content) {\n        return markup([...this._postprocessGeneratedContent(content).childNodes].map(child => {\n            // Escape all text.\n            const nodes = new Set([...child.querySelectorAll('*')].flatMap(node => node.childNodes));\n            nodes.forEach(node => {\n                if (node.nodeType === Node.TEXT_NODE) {\n                    node.textContent = escape(node.textContent);\n                }\n            });\n            return child.outerHTML;\n        }).join(''));\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    _postprocessGeneratedContent(content) {\n        const lines = content.split('\\n').filter(line => line.trim().length);\n        const fragment = document.createDocumentFragment();\n        let parentUl, parentOl;\n        let lineIndex = 0;\n        for (const line of lines) {\n            if (line.trim().startsWith('- ')) {\n                // Create or continue an unordered list.\n                parentUl = parentUl || document.createElement('ul');\n                const li = document.createElement('li');\n                li.innerText = line.trim().slice(2);\n                parentUl.appendChild(li);\n            } else if (\n                (parentOl && line.startsWith(`${parentOl.children.length + 1}. `)) ||\n                (!parentOl && line.startsWith('1. ') && lines[lineIndex + 1]?.startsWith('2. '))\n            ) {\n                // Create or continue an ordered list (only if the line starts\n                // with the next number in the current ordered list (or 1 if no\n                // ordered list was in progress and it's followed by a 2).\n                parentOl = parentOl || document.createElement('ol');\n                const li = document.createElement('li');\n                li.innerText = line.slice(line.indexOf('.') + 2);\n                parentOl.appendChild(li);\n            } else {\n                // Insert any list in progress, and a new block for the current\n                // line.\n                [parentUl, parentOl].forEach(list => list && fragment.appendChild(list));\n                parentUl = parentOl = undefined;\n                const block = document.createElement(line.startsWith('Title: ') ? 'h2' : 'p');\n                block.innerText = line;\n                fragment.appendChild(block);\n            }\n            lineIndex += 1;\n        }\n        [parentUl, parentOl].forEach(list => list && fragment.appendChild(list));\n        return fragment;\n    }\n    _cancel() {\n        this.props.close();\n    }\n    _confirm() {\n        try {\n            this.props.close();\n            const text = this.state.messages.find(message => message.id === this.state.selectedMessageId)?.text;\n            this.props.insert(this._postprocessGeneratedContent(text || ''));\n        } catch (e) {\n            this.props.close();\n            throw e;\n        }\n    }\n    _generate(prompt, callback) {\n        const protectedCallback = (...args) => {\n            if (status(this) !== 'destroyed') {\n                delete this.pendingRpcPromise;\n                return callback(...args);\n            }\n        }\n        this.pendingRpcPromise = this.rpc('/web_editor/generate_text', {\n            prompt,\n            conversation_history: this.state.conversationHistory,\n        }, { shadow: true });\n        return this.pendingRpcPromise\n            .then(content => protectedCallback(content))\n            .catch(error => protectedCallback(_t(error.data?.message || error.message), true));\n    }\n}\n", "/** @odoo-module **/\n\nimport { ChatGPTDialog } from '@web_editor/js/wysiwyg/widgets/chatgpt_dialog';\nimport { useState, useEffect, useRef } from \"@odoo/owl\";\nimport { useAutofocus } from \"@web/core/utils/hooks\";\nimport { session } from \"@web/session\";\nimport { browser } from \"@web/core/browser/browser\";\n\nexport class ChatGPTPromptDialog extends ChatGPTDialog {\n    static template = 'web_edior.ChatGPTPromptDialog';\n    static props = {\n        ...super.props,\n        initialPrompt: { type: String, optional: true },\n    };\n    static defaultProps = {\n        initialPrompt: '',\n    };\n\n    setup() {\n        super.setup();\n        this.assistantAvatarUrl = `${browser.location.origin}/web_editor/static/src/img/odoobot_transparent.png`;\n        this.userAvatarUrl = `${browser.location.origin}/web/image?model=res.users&field=avatar_128&id=${encodeURIComponent(session.uid)}`;\n        this.state = useState({\n            ...this.state,\n            prompt: this.props.initialPrompt,\n            conversationHistory: [{\n                role: 'system',\n                content: 'You are a helpful assistant, your goal is to help the user write their document.',\n            },\n            {\n                role: 'assistant',\n                content: 'What do you need ?',\n            }],\n            messages: [],\n        });\n        this.promptInputRef = useRef('promptInput');\n        useAutofocus({ refName: 'promptInput' });\n        useEffect(() => {\n            // Resize the textarea to fit its content.\n            this.promptInputRef.el.style.height = 0;\n            this.promptInputRef.el.style.height = this.promptInputRef.el.scrollHeight + 'px';\n        }, () => [this.state.prompt]);\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    onTextareaKeydown(ev) {\n        if (ev.key === 'Enter' && !ev.shiftKey) {\n            this.submitPrompt(ev);\n        }\n    }\n    submitPrompt(ev) {\n        this._freezeInput();\n        ev.preventDefault();\n        const prompt = this.state.prompt;\n        this.state.messages.push({ author: 'user', text: prompt });\n        const messageId = new Date().getTime();\n        const conversation = { role: 'user', content: prompt };\n        this.state.conversationHistory.push(conversation);\n        this.state.messages.push({ author: 'assistant', id: messageId });\n        this.state.prompt = '';\n        this._generate(prompt, (content, isError) => {\n            if (isError) {\n                // There was an error, remove the prompt from the history.\n                this.state.conversationHistory = this.state.conversationHistory.filter(c => c !== conversation);\n            } else {\n                // There was no error, add the response to the history.\n                this.state.conversationHistory.push({ role: 'assistant', content });\n            }\n            const messageIndex = this.state.messages.findIndex(m => m.id === messageId);\n            this.state.messages[messageIndex] = {\n                author: 'assistant',\n                text: content,\n                isError,\n                id: messageId,\n            };\n            this._unfreezeInput();\n        });\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    _freezeInput() {\n        this.promptInputRef.el.setAttribute('disabled', '');\n    }\n    _unfreezeInput() {\n        this.promptInputRef.el.removeAttribute('disabled');\n        this.promptInputRef.el.focus();\n    }\n    /**\n     * @override\n     */\n    _cancel() {\n        this._freezeInput();\n        super._cancel();\n    }\n    /**\n     * @override\n     */\n     _confirm() {\n        this._freezeInput();\n        super._confirm();\n    }\n}\n", "/** @odoo-module **/\n\nimport { Colorpicker } from \"@web/core/colorpicker/colorpicker\";\nimport customColors from \"@web_editor/js/editor/custom_colors\";\nimport weUtils from \"@web_editor/js/common/utils\";\nimport {\n    isCSSColor,\n    normalizeCSSColor,\n    convertCSSColorToRgba,\n} from '@web/core/utils/colors';\nimport {\n    Component,\n    useRef,\n    useState,\n    onWillStart,\n    onMounted,\n    onWillUpdateProps,\n} from \"@odoo/owl\";\n\nexport class ColorPalette extends Component {\n    static template = 'web_editor.ColorPalette';\n    static props = {\n        document: { type: true, optional: true },\n        resetTabCount: { type: Number, optional: true },\n        selectedCC: { type: String, optional: true },\n        selectedColor: { type: String, optional: true },\n        resetButton: { type: Boolean, optional: true },\n        excluded: { type: Array, optional: true },\n        excludeSectionOf: { type: Array, optional: true },\n        withCombinations: { type: Boolean, optional: true },\n        noTransparency: { type: Boolean, optional: true },\n        opacity: { type: Number, optional: true },\n        selectedTab: { type: String, optional: true },\n        withGradients: { type: Boolean, optional: true },\n        getTemplate: { type: Function,  optional: true },\n        onSetColorNames: { type: Function, optional: true },\n        onColorHover: { type: Function, optional: true },\n        onColorPicked: { type: Function, optional: true },\n        onCustomColorPicked: { type: Function, optional: true },\n        onColorLeave: { type: Function, optional: true },\n        onInputEnter: { type: Function, optional: true },\n        getCustomColors: { type: Function, optional: true },\n        getEditableCustomColors: { type: Function, optional: true },\n        onColorpaletteTabChange: { type: Function, optional: true },\n    };\n    static defaultProps = {\n        document: window.document,\n        resetTabCount: 0,\n        resetButton: true,\n        excluded: [],\n        excludeSectionOf: null,\n        withCombinations: false,\n        noTransparency: false,\n        opacity: 1,\n        selectedTab: 'theme-colors',\n        withGradients: false,\n        onSetColorNames: () => {},\n        onColorHover: () => {},\n        onColorPicked: () => {},\n        onCustomColorPicked: () => {},\n        onColorLeave: () => {},\n        onInputEnter: () => {},\n        getCustomColors: () => [],\n        getEditableCustomColors: () => [],\n        onColorpaletteTabChange: () => {},\n    }\n    static components = { Colorpicker };\n    elRef = useRef('el');\n    state = useState({\n        showGradientPicker: false,\n    });\n    setup() {\n        this.init();\n        onWillStart(async () => {\n            if (this.props.getTemplate) {\n                this.colorpickerTemplate = await this.props.getTemplate();\n            }\n        });\n        onMounted(async () => {\n            if (!this.elRef.el) {\n                // There is legacy code that can trigger the instantiation of the\n                // link tool when one of it's parent component is not in the dom. If\n                // that parent element is not in the dom, owl will not return\n                // `this.linkComponentWrapperRef.el` because of a check (see\n                // `inOwnerDocument`).\n                // Todo: this workaround should be removed when the snippet menu is\n                // converted to owl.\n                await new Promise(resolve => {\n                    const observer = new MutationObserver(() => {\n                        if (this.elRef.el) {\n                            observer.disconnect();\n                            resolve();\n                        }\n                    });\n                    observer.observe(document.body, { childList: true, subtree: true });\n                });\n            }\n            this.el = this.elRef.el;\n            const $el = $(this.el);\n            this.$ = $el.find.bind($el);\n\n            $el.on('click', '.o_we_color_btn', this._onColorButtonClick.bind(this));\n            $el.on('mouseenter', '.o_we_color_btn', this._onColorButtonEnter.bind(this));\n            $el.on('mouseleave', '.o_we_color_btn', this._onColorButtonLeave.bind(this));\n\n            $el.on('click', '.o_custom_gradient_editor .o_custom_gradient_btn', this._onGradientCustomButtonClick.bind(this));\n            $el.on('click', '.o_custom_gradient_editor', this._onPanelClick.bind(this));\n            $el.on('change', '.o_custom_gradient_editor input[type=\"text\"]', this._onGradientInputChange.bind(this));\n            $el.on('keypress', '.o_custom_gradient_editor input[type=\"text\"]', this._onGradientInputKeyPress.bind(this));\n            $el.on('click', '.o_custom_gradient_editor we-button:not(.o_remove_color)', this._onGradientButtonClick.bind(this));\n            $el.on('mouseenter', '.o_custom_gradient_editor we-button:not(.o_remove_color)', this._onGradientButtonEnter.bind(this));\n            $el.on('mouseleave', '.o_custom_gradient_editor we-button:not(.o_remove_color)', this._onGradientButtonLeave.bind(this));\n\n            $el.on('click', '.o_custom_gradient_scale', this._onGradientPreviewClick.bind(this));\n            // Note: _onGradientSliderClick on slider is attached at slider creation.\n            $el.on('click', '.o_custom_gradient_editor .o_remove_color', this._onGradientDeleteClick.bind(this));\n\n            await this.start();\n        });\n        onWillUpdateProps((newProps) => {\n            this._updateColorToColornames();\n            if (this.props.resetTabCount !== newProps.resetTabCount) {\n                this._selectDefaultTab();\n            }\n            if (this.props.selectedCC !== newProps.selectedCC || this.props.selectedColor !== newProps.selectedColor) {\n                this._selectColor({\n                    ccValue: newProps.selectedCC,\n                    color: newProps.selectedColor,\n                });\n            }\n            this._buildCustomColors();\n            this._markSelectedColor();\n        });\n    }\n    init() {\n        const editableDocument = this.props.document;\n        this.style = editableDocument.defaultView.getComputedStyle(editableDocument.documentElement);\n        this.selectedColor = '';\n        this.resetButton = this.props.resetButton;\n        this.withCombinations = this.props.withCombinations;\n        this.selectedTab = this.props.selectedTab;\n\n        this.tabs = [{\n            id: 'theme-colors',\n            pickers: [\n                'theme',\n                'common',\n            ],\n        },\n        {\n            id: 'custom-colors',\n            pickers: [\n                'custom',\n                'transparent_grayscale',\n                'common_grays',\n            ],\n        },\n        {\n            id: 'gradients',\n            pickers: this.props.withGradients ? [\n                'predefined_gradients',\n                'custom_gradient',\n            ] : [],\n        }];\n\n        this.sections = {};\n        this.pickers = {};\n    }\n    /**\n     * @override\n     */\n    async start() {\n        const switchPaneButtons = this.el.querySelectorAll('.o_we_colorpicker_switch_pane_btn');\n\n        let colorpickerEl;\n        if (this.colorpickerTemplate) {\n            colorpickerEl = $(this.colorpickerTemplate)[0];\n        } else {\n            colorpickerEl = document.createElement(\"colorpicker\");\n            const sectionEl = document.createElement('DIV');\n            sectionEl.classList.add('o_colorpicker_section');\n            sectionEl.dataset.name = 'common';\n            colorpickerEl.appendChild(sectionEl);\n        }\n        colorpickerEl.querySelectorAll('button').forEach(el => el.classList.add('o_we_color_btn'));\n\n        // Populate tabs based on the tabs configuration indicated in this.tabs\n        this.tabs.forEach((tab, index) => {\n            // Append pickers to section\n            let sectionEl = this.el.querySelector(`.o_colorpicker_sections[data-color-tab=\"${tab.id}\"]`);\n            const container = sectionEl.querySelector('.o_colorpicker_section_container');\n            if (container) {\n                sectionEl = container;\n            }\n            let sectionIsEmpty = true;\n            tab.pickers.forEach((pickerId) => {\n                let pickerEl;\n                switch (pickerId) {\n                    case 'common_grays':\n                        pickerEl = colorpickerEl.querySelector('[data-name=\"common\"]').cloneNode(true);\n                        break;\n                    case 'custom':\n                        pickerEl = document.createElement('DIV');\n                        pickerEl.classList.add(\"o_colorpicker_section\");\n                        pickerEl.dataset.name = 'custom';\n                        break;\n                    default:\n                        pickerEl = colorpickerEl.querySelector(`[data-name=\"${pickerId}\"]`);\n                        pickerEl = pickerEl && pickerEl.cloneNode(true);\n                }\n                if (pickerEl) {\n                    sectionEl.appendChild(pickerEl);\n\n                    if (!this.props.excluded.includes(pickerId)) {\n                        sectionIsEmpty = false;\n                    }\n\n                    this.pickers[pickerId] = pickerEl;\n                }\n            });\n\n            // If the section is empty, hide it and\n            // select the next tab if none is given in the options\n            if (sectionIsEmpty) {\n                sectionEl.classList.add('d-none');\n                switchPaneButtons[index].classList.add('d-none');\n                if (this.selectedTab === tab.id) {\n                    this.selectedTab = this.tabs[(index + 1) % this.tabs.length].id;\n                }\n            }\n            this.sections[tab.id] = sectionEl;\n        });\n\n        // Predefined gradient opacity\n        if (this.props.withGradients && this.props.opacity !== 1) {\n            this.pickers['predefined_gradients'].querySelectorAll('button').forEach(elem => {\n                let gradient = elem.dataset.color;\n                gradient = gradient.replaceAll(/rgba?(\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+)(?:\\s*,.+?)?\\)/g,\n                    `rgba$1, ${this.props.opacity})`);\n                elem.dataset.color = gradient.replaceAll(/\\s+/g, '');\n            });\n        }\n\n        // Palette for gradient\n        if (this.pickers['custom_gradient']) {\n            const editor = this.pickers['custom_gradient'];\n            this.gradientEditorParts = {\n                'customButton': editor.querySelector('.o_custom_gradient_btn'),\n                'customContent': editor.querySelector('.o_color_picker_inputs'),\n                'linearButton': editor.querySelector('we-button[data-gradient-type=\"linear-gradient\"]'),\n                'angleRow': editor.querySelector('.o_angle_row'),\n                'angle': editor.querySelector('input[data-name=\"angle\"]'),\n                'radialButton': editor.querySelector('we-button[data-gradient-type=\"radial-gradient\"]'),\n                'positionRow': editor.querySelector('.o_position_row'),\n                'positionX': editor.querySelector('input[data-name=\"positionX\"]'),\n                'positionY': editor.querySelector('input[data-name=\"positionY\"]'),\n                'sizeRow': editor.querySelector('.o_size_row'),\n                'scale': editor.querySelector('.o_custom_gradient_scale div'),\n                'sliders': editor.querySelector('.o_slider_multi'),\n                'deleteButton': editor.querySelector('.o_remove_color'),\n            };\n            const gradient = weUtils.isColorGradient(this.props.selectedColor) && this.props.selectedColor;\n            this._selectGradient(gradient);\n            const resizeObserver = new window.ResizeObserver(() => {\n                this._adjustActiveSliderDelete();\n            });\n            resizeObserver.observe(this.gradientEditorParts.sliders);\n        }\n\n        // Switch to the correct tab\n        const selectedButtonIndex = this.tabs.map(tab => tab.id).indexOf(this.selectedTab);\n        this._selectTabFromButton(this.el.querySelectorAll('button')[selectedButtonIndex]);\n\n        // Remove the buttons display if there is only one\n        const visibleButtons = Array.from(switchPaneButtons).filter(button => !button.classList.contains('d-none'));\n        if (visibleButtons.length === 1) {\n            visibleButtons[0].classList.add('d-none');\n        }\n\n        // Remove excluded palettes (note: only hide them to still be able\n        // to remove their related colors on the DOM target)\n        this.props.excluded.forEach((exc) => {\n            this.$('[data-name=\"' + exc + '\"]').addClass('d-none');\n        });\n        if (this.props.excludeSectionOf) {\n            this.$('[data-name]:has([data-color=\"' + this.props.excludeSectionOf + '\"])').addClass('d-none');\n        }\n\n        this.el.querySelectorAll('.o_colorpicker_section').forEach(elem => {\n            $(elem).prepend('<div>' + (elem.dataset.display || '') + '</div>');\n        });\n\n        // Render common colors\n        if (!this.props.excluded.includes('common')) {\n            customColors.forEach((colorRow, i) => {\n                if (i === 0) {\n                    return; // Ignore the wysiwyg gray palette and use ours\n                }\n                const $div = $('<div/>', {class: 'clearfix'}).appendTo(this.pickers['common']);\n                colorRow.forEach(color => {\n                    $div.append(this._createColorButton(color, ['o_common_color']));\n                });\n            });\n        }\n\n        // Compute class colors\n\n        this.colorNames = [...weUtils.COLOR_PALETTE_COMPATIBILITY_COLOR_NAMES];\n        this._updateColorToColornames();\n        this.props.onSetColorNames([...this.colorNames]);\n\n        // Select selected Color and build customColors.\n        // If no color is selected selectedColor is an empty string (transparent is interpreted as no color)\n        if (this.props.selectedCC) {\n            this.selectedCC = this.props.selectedCC;\n        }\n        this._setSelectedColor(this.props.selectedColor);\n        this._buildCustomColors();\n        this._markSelectedColor();\n\n        // Colorpicker\n        if (!this.props.excluded.includes('custom')) {\n            let defaultColor = this.selectedColor;\n            if (defaultColor && !isCSSColor(defaultColor)) {\n                defaultColor = weUtils.getCSSVariableValue(defaultColor, this.style);\n            }\n            if (!defaultColor && this.props.opacity !== 1) {\n                defaultColor = 'rgba(0, 0, 0, ' + this.props.opacity + ')';\n            }\n            this.state.customDefaultColor = defaultColor;\n        }\n    }\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Gets the currently selected colors.\n     *\n     * @private\n     * @returns {Object} ccValue and color (plain color or gradient).\n     */\n    _getSelectedColors() {\n        return {\n            ccValue: this.selectedCC,\n            color: this.selectedColor,\n        };\n    }\n    /**\n     * @private\n     */\n    _setSelectedColor(color) {\n        if (color) {\n            if (color === 'rgba(0, 0, 0, 0)' && this.props.opacity !== 1) {\n                color = 'rgba(0, 0, 0, ' + this.props.opacity + ')';\n            }\n            let selectedColor = color;\n            if (weUtils.COLOR_PALETTE_COMPATIBILITY_COLOR_NAMES.includes(selectedColor)) {\n                selectedColor = weUtils.getCSSVariableValue(selectedColor, this.style) || selectedColor;\n            }\n            selectedColor = normalizeCSSColor(selectedColor);\n            if (selectedColor !== 'rgba(0, 0, 0, 0)') {\n                this.selectedColor = this.colorToColorNames[selectedColor] || selectedColor;\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    _buildCustomColors() {\n        if (this.props.excluded.includes('custom')) {\n            return;\n        }\n        this.el.querySelectorAll('.o_custom_color').forEach(el => el.remove());\n        const existingColors = new Set(Object.keys(this.colorToColorNames));\n        for (const color of this.props.getCustomColors()) {\n            this._addCustomColor(existingColors, color);\n        }\n        weUtils.getCSSVariableValue('custom-colors', this.style).split(' ').forEach(v => {\n            const color = weUtils.getCSSVariableValue(v.substring(1, v.length - 1), this.style);\n            if (isCSSColor(color)) {\n                this._addCustomColor(existingColors, color);\n            }\n        });\n        for (const color of this.props.getEditableCustomColors()) {\n            this._addCustomColor(existingColors, color);\n        }\n        if (this.selectedColor) {\n            this._addCustomColor(existingColors, this.selectedColor);\n        }\n    }\n    /**\n     * Add the color to the custom color section if it is not in the existingColors.\n     *\n     * @param {string[]} existingColors Colors currently in the colorpicker\n     * @param {string} color Color to add to the cuustom colors\n     */\n    _addCustomColor(existingColors, color) {\n        if (!color) {\n            return;\n        }\n        if (!isCSSColor(color)) {\n            color = weUtils.getCSSVariableValue(color, this.style);\n        }\n        const normColor = normalizeCSSColor(color);\n        if (!existingColors.has(normColor)) {\n            this._addCustomColorButton(normColor);\n            existingColors.add(normColor);\n        }\n    }\n    /**\n     * Add a custom button in the coresponding section.\n     *\n     * @private\n     * @param {string} color\n     * @param {string[]} classes - classes added to the button\n     * @returns {jQuery}\n     */\n    _addCustomColorButton(color, classes = []) {\n        classes.push('o_custom_color');\n        const $button = this._createColorButton(color, classes);\n        return $button.appendTo(this.pickers['custom']);\n    }\n    /**\n     * Return a color button.\n     *\n     * @param {string} color\n     * @param {string[]} classes - classes added to the button\n     * @returns {jQuery}\n     */\n    _createColorButton(color, classes) {\n        return $('<button/>', {\n            class: 'o_we_color_btn ' + classes.join(' '),\n            style: 'background-color:' + color + ';',\n        });\n    }\n    /**\n     * Gets normalized information about a color button.\n     *\n     * @private\n     * @param {HTMLElement} buttonEl\n     * @returns {Object}\n     */\n    _getButtonInfo(buttonEl) {\n        const bgColor = buttonEl.style.backgroundColor;\n        const value = buttonEl.dataset.color || (bgColor && bgColor !== 'initial' ? normalizeCSSColor(bgColor) : '') || '';\n        const info = {\n            target: buttonEl,\n        };\n        if (!value) {\n            info.ccValue = '';\n            info.color = '';\n        } else if (weUtils.isColorCombinationName(value)) {\n            info.ccValue = value;\n        } else {\n            info.color = value;\n        }\n        return info;\n    }\n    /**\n     * Set the selectedColor and trigger an event\n     *\n     * @param {Object} colorInfo\n     * @param {string} [colorInfo.ccValue]\n     * @param {string} [colorInfo.color]\n     * @param {Function} [eventCallback]\n     */\n    _selectColor(colorInfo, eventCallback) {\n        this.selectedCC = colorInfo.ccValue;\n        this.selectedColor = colorInfo.color = this.colorToColorNames[colorInfo.color] || colorInfo.color;\n        if (eventCallback) {\n            eventCallback(colorInfo);\n        }\n        this._buildCustomColors();\n        this.state.customSelectedColor = colorInfo.color;\n        const customGradient = weUtils.isColorGradient(colorInfo.color) ? colorInfo.color : false;\n        if (this.pickers['custom_gradient']) {\n            this._selectGradient(customGradient);\n        }\n        this._markSelectedColor();\n    }\n    /**\n     * Populates the gradient editor.\n     *\n     * @private\n     * @param {string} gradient CSS string\n     */\n    _selectGradient(gradient) {\n        const editor = this.gradientEditorParts;\n        this.state.showGradientPicker = false;\n        const colorSplits = [];\n        if (gradient) {\n            gradient = gradient.toLowerCase();\n            // Extract colors and their positions: colors can either be in the #rrggbb format or in the\n            // rgb/rgba(...) format, positions are expected to be expressed as percentages\n            // (lengths are not supported).\n            for (const entry of gradient.matchAll(/(#[0-9a-f]{6}|rgba?\\(\\s*[0-9]+\\s*,\\s*[0-9]+\\s*,\\s*[0-9]+\\s*[,\\s*[0-9.]*]?\\s*\\))\\s*([[0-9]+%]?)/g)) {\n                colorSplits.push([entry[1], entry[2].replace('%', '')]);\n            }\n        }\n        // Consider unsupported gradients as not gradients.\n        if (!gradient || colorSplits.length < 2) {\n            $(editor.customContent).addClass('d-none');\n            editor.customButton.style['background-image'] = '';\n            editor.customButton.dataset.color = false;\n            return;\n        }\n        $(editor.customContent).removeClass('d-none');\n        editor.customButton.style['background-image'] = gradient;\n        editor.customButton.dataset.color = gradient;\n        // The scale display shows the gradient colors horizontally by canceling the type and angle\n        // which are before the first comma.\n        const scaleGradient = gradient.replace(/[^,]+,/, 'linear-gradient(90deg,');\n        editor.scale.style['background-image'] = scaleGradient;\n\n        const isLinear = gradient.startsWith('linear-gradient(');\n        // Keep track of last selected slider's position.\n        let lastSliderPosition;\n        const activeSlider = editor.sliders.querySelector('input.active');\n        if (activeSlider) {\n            lastSliderPosition = activeSlider.value;\n        }\n        let $lastSlider;\n        // Rebuild sliders for each color milestone of the gradient.\n        editor.sliders.replaceChildren();\n        for (const index in colorSplits) {\n            const colorSplit = colorSplits[index];\n            let color = colorSplit[0];\n            const position = colorSplit[1] || 100 * index / colorSplits.length;\n            const $slider = this._createGradientSlider(position, color);\n            if (position === lastSliderPosition) {\n                $lastSlider = $slider;\n            }\n        }\n\n        editor.deleteButton.classList.add('d-none');\n        // Update form elements related to type.\n        if (isLinear) {\n            editor.linearButton.classList.add('active');\n            editor.radialButton.classList.remove('active');\n\n            let angle = gradient.match(/([0-9]+)deg/);\n            angle = angle ? angle[1] : 0;\n            editor.angle.value = angle;\n        } else {\n            editor.linearButton.classList.remove('active');\n            editor.radialButton.classList.add('active');\n\n            const sizeMatch = gradient.match(/(closest|farthest)-(side|corner)/);\n            const size = sizeMatch ? sizeMatch[0] : 'farthest-corner';\n            const $buttons = $(editor.sizeRow).find('we-button');\n            $buttons.removeClass('active');\n            $(editor.sizeRow).find(\"we-button[data-gradient-size='\" + size + \"']\").addClass('active');\n\n            const position = gradient.match(/ at ([0-9]+)% ([0-9]+)%/) || ['', '50', '50'];\n            editor.positionX.value = position[1];\n            editor.positionY.value = position[2];\n        }\n        this._updateGradientVisibility(isLinear);\n        this._activateGradientSlider($lastSlider || $(this.pickers['custom_gradient'].querySelector('.o_slider_multi input')));\n    }\n    /**\n     * Adjusts the visibility of the gradient editor elements.\n     *\n     * @private\n     * @param {boolean} isLinear\n     */\n    _updateGradientVisibility(isLinear) {\n        const editor = this.gradientEditorParts;\n        if (isLinear) {\n            editor.angleRow.classList.remove('d-none');\n            editor.angleRow.classList.add('d-flex');\n            editor.positionRow.classList.add('d-none');\n            editor.positionRow.classList.remove('d-flex');\n            editor.sizeRow.classList.add('d-none');\n            editor.sizeRow.classList.remove('d-flex');\n        } else {\n            editor.angleRow.classList.add('d-none');\n            editor.angleRow.classList.remove('d-flex');\n            editor.positionRow.classList.remove('d-none');\n            editor.positionRow.classList.add('d-flex');\n            editor.sizeRow.classList.remove('d-none');\n            editor.sizeRow.classList.add('d-flex');\n        }\n    }\n    /**\n     * Removes the transparency from an rgba color.\n     *\n     * @private\n     * @param {string} color rgba CSS color string\n     * @returns {string} rgb CSS color string\n     */\n    _opacifyColor(color) {\n        if (color.startsWith('rgba')) {\n            return color.replace('rgba', 'rgb').replace(/,\\s*[0-9.]+\\s*\\)/, ')');\n        }\n        return color;\n    }\n    /**\n     * Creates and adds a slider for the gradient color definition.\n     *\n     * @private\n     * @param {int} position between 0 and 100\n     * @param {string} color\n     * @returns {jQuery} created slider\n     */\n    _createGradientSlider(position, color) {\n        const $slider = $('<input class=\"w-100\" type=\"range\" min=\"0\" max=\"100\"/>');\n        $slider.attr('value', position);\n        $slider.attr('data-color', color);\n        $slider.css('color', this._opacifyColor(color));\n        $slider.on('click', this._onGradientSliderClick.bind(this));\n        $slider.appendTo(this.gradientEditorParts.sliders);\n        this._sortGradientSliders();\n        return $slider;\n    }\n    /**\n     * Activates a slider of the gradient color definition.\n     *\n     * @private\n     * @param {jQuery} $slider\n     */\n    _activateGradientSlider($slider) {\n        const $sliders = $(this.gradientEditorParts.sliders).find('input');\n        $sliders.removeClass('active');\n        $slider.addClass('active');\n\n        const color = $slider.data('color');\n        this.state.showGradientPicker = true;\n        this.state.gradientSelectedColor = color;\n        this._sortGradientSliders();\n        this._adjustActiveSliderDelete();\n    }\n    /**\n     * Adjusts the position of the slider delete button.\n     *\n     * @private\n     */\n    _adjustActiveSliderDelete() {\n        const $sliders = $(this.gradientEditorParts.sliders).find('input');\n        const $activeSlider = $(this.gradientEditorParts.sliders).find('input.active');\n        if ($sliders.length > 2 && $activeSlider.length) {\n            this.gradientEditorParts.deleteButton.classList.remove('d-none');\n            const sliderWidth = $activeSlider.width();\n            const thumbWidth = 12; // TODO find a way to access it in CSS\n            const deleteWidth = $(this.gradientEditorParts.deleteButton).width();\n            const pixelOffset = (sliderWidth - thumbWidth) * $activeSlider[0].value / 100 + (thumbWidth - deleteWidth) / 2;\n            this.gradientEditorParts.deleteButton.style['margin-left'] = `${pixelOffset}px`;\n            this.gradientEditorParts.deleteButton.style['margin-right'] = `-${deleteWidth / 2}px`;\n        } else {\n            this.gradientEditorParts.deleteButton.classList.add('d-none');\n        }\n    }\n    /**\n     * Reorders the sliders of the gradient color definition by their position.\n     *\n     * @private\n     */\n    _sortGradientSliders() {\n        const $sliderInputs = $(this.gradientEditorParts.sliders).find('input');\n        for (const slider of $sliderInputs.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10))) {\n            this.gradientEditorParts.sliders.appendChild(slider);\n        }\n    }\n    /**\n     * Computes the customized gradient from the custom gradient editor.\n     *\n     * @private\n     * @returns {string} gradient string corresponding to the currently selected options.\n     */\n    _computeGradient() {\n        const editor = this.gradientEditorParts;\n\n        const $picker = $(this.pickers['custom_gradient']);\n\n        const colors = [];\n        for (const slider of $(editor.sliders).find('input')) {\n            const color = convertCSSColorToRgba($(slider).data('color'));\n            const colorText = color.opacity !== 100 ? `rgba(${color.red}, ${color.green}, ${color.blue}, ${color.opacity / 100})`\n                : `rgb(${color.red}, ${color.green}, ${color.blue})`;\n            const position = slider.value;\n            colors.push(`${colorText} ${position}%`);\n        }\n\n        const type = $picker.find('.o_type_row we-button.active').data('gradientType');\n        const isLinear = type === 'linear-gradient';\n        let typeParam;\n        if (isLinear) {\n            const angle = editor.angle.value || 0;\n            typeParam = `${angle}deg`;\n        } else {\n            const positionX = editor.positionX.value || 50;\n            const positionY = editor.positionY.value || 50;\n            const size = $picker.find('.o_size_row we-button.active').data('gradientSize');\n            typeParam = `circle ${size} at ${positionX}% ${positionY}%`;\n        }\n\n        return `${type}(${typeParam}, ${colors.join(', ')})`;\n    }\n    /**\n     * Computes the customized gradient from the custom gradient editor and displays it.\n     *\n     * @private\n     * @param {boolean} isPreview\n     */\n    _updateGradient(isPreview) {\n        const gradient = this._computeGradient();\n        // Avoid updating an unchanged gradient.\n        if (weUtils.areCssValuesEqual(gradient, this.selectedColor) && !isPreview) {\n            return;\n        }\n        const params = {\n            ...this._getSelectedColors(),\n            color: gradient,\n        };\n        if (isPreview) {\n            this.props.onColorHover(params);\n        } else {\n            this.props.onColorPicked(params);\n        }\n    }\n    /**\n     * Marks the selected colors.\n     *\n     * @private\n     */\n    _markSelectedColor() {\n        for (const buttonEl of this.el.querySelectorAll('button')) {\n            // TODO buttons should only be search by data-color value\n            // instead of style but seems necessary for custom colors right\n            // now...\n            const value = buttonEl.dataset.color || buttonEl.style.backgroundColor;\n            // Buttons in the theme-colors tab of the palette have\n            // no opacity, hence they should be searched by removing\n            // opacity of 0.6 (which was applied by default) from\n            // the selected color.\n            const isCommonColor = buttonEl.classList.contains('o_common_color');\n            const selectedColor = isCommonColor ? this._opacifyColor(this.selectedColor) : this.selectedColor;\n            buttonEl.classList.toggle('selected', value\n                && (this.selectedCC === value || weUtils.areCssValuesEqual(selectedColor, value)));\n        }\n    }\n\n    /**\n     * Select the default tab.\n     *\n     * @private\n     */\n    _selectDefaultTab() {\n        const selectedButtonIndex = this.tabs.map(tab => tab.id).indexOf(this.selectedTab);\n        this._selectTabFromButton(this.el.querySelectorAll('button')[selectedButtonIndex]);\n    }\n    /**\n     * Display button element as selected\n     *\n     * @private\n     * @param {HTMLElement} buttonEl\n     */\n    _selectTabFromButton(buttonEl) {\n        this.el.querySelectorAll('.o_we_colorpicker_switch_pane_btn').forEach(el => {\n            el.classList.remove('active');\n        });\n        buttonEl.classList.add('active');\n        this.el.querySelectorAll('.o_colorpicker_sections').forEach(el => {\n            el.classList.toggle('d-none', el.dataset.colorTab !== buttonEl.dataset.target);\n        });\n        this.props.onColorpaletteTabChange(buttonEl.dataset.target);\n    }\n    /**\n     * Updates a gradient color from a selection in the color picker.\n     *\n     * @private\n     * @param {String} colorInfo.cssColor\n     * @param {Boolean} isPreview\n     */\n    _updateGradientColor(colorInfo, isPreview) {\n        const $slider = $(this.gradientEditorParts.sliders).find('input.active');\n        if (!weUtils.areCssValuesEqual(colorInfo.cssColor, $slider.data('color'))) {\n            const previousColor = $slider.data('color');\n            $slider.data('color', colorInfo.cssColor);\n            this._updateGradient(isPreview);\n            if (isPreview) {\n                $slider.data('color', previousColor);\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    _updateColorToColornames() {\n        this.colorToColorNames = {};\n        this.el.querySelectorAll('button[data-color]:not(.o_custom_gradient_btn)').forEach(elem => {\n            const colorName = elem.dataset.color;\n            if (weUtils.isColorGradient(colorName)) {\n                return;\n            }\n            const $color = $(elem);\n            const isCCName = weUtils.isColorCombinationName(colorName);\n            if (isCCName) {\n                $color.find('.o_we_cc_preview_wrapper').addClass(`o_cc o_cc${colorName}`);\n            } else if (weUtils.EDITOR_COLOR_CSS_VARIABLES.includes(colorName)) {\n                elem.style.backgroundColor = `var(--we-cp-${colorName})`;\n            } else {\n                elem.classList.add(`bg-${colorName}`);\n            }\n            this.colorNames.push(colorName);\n            if (!isCCName && !elem.classList.contains('d-none')) {\n                const color = weUtils.getCSSVariableValue(colorName, this.style);\n                this.colorToColorNames[color] = colorName;\n            }\n        });\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when a color button is clicked.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onColorButtonClick(ev) {\n        const buttonEl = ev.currentTarget;\n        const colorInfo = {\n            ...this._getSelectedColors(),\n            ...this._getButtonInfo(buttonEl)\n        };\n        this._selectColor(colorInfo, this.props.onColorPicked);\n    }\n    /**\n     * Called when a color button is entered.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onColorButtonEnter(ev) {\n        this.props.onColorHover({\n            ...this._getSelectedColors(),\n            ...this._getButtonInfo(ev.currentTarget)\n        });\n    }\n    /**\n     * Called when a color button is left the data color is the color currently selected.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onColorButtonLeave(ev) {\n        this.props.onColorLeave({\n            ...this._getSelectedColors(),\n            target: ev.target,\n        });\n    }\n    /**\n     * Called when an update is made on the colorpicker.\n     *\n     * @private\n     * @param {Object} colorInfo\n     */\n    _onColorPickerPreview(colorInfo) {\n        this.props.onColorHover({\n            ...this._getSelectedColors(),\n            color: colorInfo.cssColor,\n        });\n    }\n    /**\n     * Called when an update is made on the gradient colorpicker.\n     *\n     * @private\n     * @param {Object} colorInfo\n     */\n    _onColorPickerPreviewGradient(colorInfo) {\n        this._updateGradientColor(colorInfo, true);\n    }\n    /**\n     * Called when a color is selected on the colorpicker (mouseup).\n     *\n     * @private\n     * @param {Object} colorInfo\n     */\n    _onColorPickerSelect(colorInfo) {\n        this._selectColor({\n            ...this._getSelectedColors(),\n            color: colorInfo.cssColor,\n        }, this.props.onCustomColorPicked);\n    }\n    /**\n     * Called when a color is selected on the gradient colorpicker (mouseup).\n     *\n     * @private\n     * @param {Object} colorInfo\n     */\n    _onColorPickerSelectGradient(colorInfo) {\n        this._updateGradientColor(colorInfo);\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onSwitchPaneButtonClick(ev) {\n        ev.stopPropagation();\n        this._selectTabFromButton(ev.currentTarget);\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientSliderClick(ev) {\n        ev.stopPropagation();\n        this._activateGradientSlider($(ev.target));\n        this._updateGradient();\n    }\n    /**\n     * Adds a color inside the gradient based on the position clicked within the preview.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientPreviewClick(ev) {\n        ev.stopPropagation();\n        const offset = ev.offsetX;\n        const width = parseInt(window.getComputedStyle(ev.target).width, 10);\n        const position = 100 * offset / width;\n\n        let previousColor;\n        let nextColor;\n        let previousPosition;\n        let nextPosition;\n        for (const slider of $(this.gradientEditorParts.sliders).find('input')) {\n            if (slider.value < position) {\n                previousColor = slider.dataset.color;\n                previousPosition = slider.value;\n            } else {\n                nextColor = slider.dataset.color;\n                nextPosition = slider.value;\n                break;\n            }\n        }\n        let color;\n        if (previousColor && nextColor) {\n            previousColor = convertCSSColorToRgba(previousColor);\n            nextColor = convertCSSColorToRgba(nextColor);\n            const previousRatio = (nextPosition - position) / (nextPosition - previousPosition);\n            const nextRatio = 1 - previousRatio;\n            const red = Math.round(previousRatio * previousColor.red + nextRatio * nextColor.red);\n            const green = Math.round(previousRatio * previousColor.green + nextRatio * nextColor.green);\n            const blue = Math.round(previousRatio * previousColor.blue + nextRatio * nextColor.blue);\n            const opacity = Math.round(previousRatio * previousColor.opacity + nextRatio * nextColor.opacity);\n            color = `rgba(${red}, ${green}, ${blue}, ${opacity / 100})`;\n        } else {\n            color = nextColor || previousColor || 'rgba(128, 128, 128, 0.5)';\n        }\n\n        const $slider = this._createGradientSlider(position, color);\n        this._activateGradientSlider($slider);\n        this._updateGradient();\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onPanelClick(ev) {\n        // Ignore to avoid closing popup.\n        ev.stopPropagation();\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientInputChange(ev) {\n        this._updateGradient();\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientInputKeyPress(ev) {\n        if (ev.key === \"Enter\") {\n            ev.preventDefault();\n            this._onGradientInputChange();\n        }\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientButtonClick(ev) {\n        const $buttons = $(ev.target).closest('span').find('we-button');\n        $buttons.removeClass('active');\n        $(ev.target).closest('we-button').addClass('active');\n        this._updateGradient();\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientButtonEnter(ev) {\n        ev.stopPropagation();\n        const $activeButton = $(ev.target).closest('span').find('we-button.active');\n        const $buttons = $(ev.target).closest('span').find('we-button');\n        $buttons.removeClass('active');\n        $(ev.target).closest('we-button').addClass('active');\n        this._updateGradient(true);\n        $buttons.removeClass('active');\n        $activeButton.addClass('active');\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientButtonLeave(ev) {\n        ev.stopPropagation();\n        this.props.onColorLeave({\n            ...this._getSelectedColors(),\n            target: ev.target,\n        });\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientCustomButtonClick(ev) {\n        let gradient = this.gradientEditorParts.customButton.style['backgroundImage'];\n        if (!gradient) {\n            // default to first predefined\n            gradient = this.pickers['predefined_gradients'].querySelector('button').dataset.color;\n        }\n        this._selectColor({\n            ...this._getSelectedColors(),\n            color: gradient,\n            target: this.gradientEditorParts.customButton,\n        }, this.props.onCustomColorPicked);\n        this._updateGradient();\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onGradientDeleteClick(ev) {\n        ev.stopPropagation();\n        const $activeSlider = $(this.pickers['custom_gradient'].querySelector('.o_slider_multi input.active'));\n        $activeSlider.off();\n        $activeSlider.remove();\n        this.gradientEditorParts.deleteButton.classList.add('d-none');\n        this.gradientEditorParts.deleteButton.classList.remove('active');\n        this._updateGradient();\n        this._activateGradientSlider($(this.pickers['custom_gradient'].querySelector('.o_slider_multi input')));\n    }\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onColorpickerClick(ev) {\n        if (ev.target.matches(\".o_colorpicker_section, .o_colorpicker_sections\")) {\n            ev.stopPropagation();\n        }\n    }\n}\n", "/** @odoo-module **/\n\nimport {applyModifications, cropperDataFields, activateCropper, loadImage, loadImageInfo} from \"@web_editor/js/editor/image_processing\";\nimport { _t } from \"@web/core/l10n/translation\";\nimport {\n    Component,\n    useRef,\n    useState,\n    onMounted,\n    onWillDestroy,\n    onWillUpdateProps,\n    markup,\n} from \"@odoo/owl\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport dom from \"@web/legacy/js/core/dom\";\n\nexport class ImageCrop extends Component {\n    static template = 'web_editor.ImageCrop';\n    static props = {\n        rpc: Function,\n        showCount: { type: Number, optional: true },\n        activeOnStart: { type: Boolean, optional: true },\n        media: { optional: true },\n        mimetype: { type: String, optional: true },\n    };\n    static defaultProps = {\n        activeOnStart: false,\n        showCount: 0,\n    };\n    aspectRatios = {\n        \"0/0\": {label: _t(\"Flexible\"), value: 0},\n        \"16/9\": {label: \"16:9\", value: 16 / 9},\n        \"4/3\": {label: \"4:3\", value: 4 / 3},\n        \"1/1\": {label: \"1:1\", value: 1},\n        \"2/3\": {label: \"2:3\", value: 2 / 3},\n    };\n    state = useState({\n        active: false,\n    });\n\n    elRef = useRef('el');\n    _cropperClosed = true;\n\n    setup() {\n        // This promise is resolved when the component is mounted. It is\n        // required by a legacy mechanism to wait for the component to be\n        // mounted. See `ImageTools.resetCrop`.\n        this.mountedPromise = new Promise((resolve) => {\n            this.mountedResolve = resolve;\n        });\n        this.notification = useService(\"notification\");\n        onMounted(async () => {\n            const $el = $(this.elRef.el);\n            this.$ = $el.find.bind($el);\n            this.$('[data-action]').on('click', this._onCropOptionClick.bind(this));\n            $el.on('zoom', this._onCropZoom.bind(this));\n            if (this.props.activeOnStart) {\n                this.state.active = true;\n                await this._show(this.props);\n            }\n            this.mountedResolve();\n        });\n        onWillUpdateProps((newProps) => {\n            if (newProps.showCount !== this.props.showCount) {\n                this.state.active = true;\n            }\n            return this._show(newProps);\n        });\n        onWillDestroy(() => {\n            this._closeCropper();\n        });\n    }\n\n    _closeCropper() {\n        if (this._cropperClosed) return;\n        this._cropperClosed = true;\n        if (this.$cropperImage) {\n            this.$cropperImage.cropper('destroy');\n            this.elRef.el.ownerDocument.removeEventListener('mousedown', this._onDocumentMousedown, {capture: true});\n            this.elRef.el.ownerDocument.removeEventListener('keydown', this._onDocumentKeydown, {capture: true});\n        }\n        this.media.setAttribute('src', this.initialSrc);\n        this.$media.trigger('image_cropper_destroyed');\n        this.state.active = false;\n    }\n\n    /**\n     * Resets the crop\n     */\n    async reset() {\n        if (this.$cropperImage) {\n            this.$cropperImage.cropper('reset');\n            if (this.aspectRatio !== '0/0') {\n                this.aspectRatio = '0/0';\n                this.$cropperImage.cropper('setAspectRatio', this.aspectRatios[this.aspectRatio].value);\n            }\n            await this._save(false);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    async _show(props) {\n        if (!props.media || !this.state.active) {\n            return;\n        }\n        this._cropperClosed = false;\n        this.media = props.media;\n        this.$media = $(this.media);\n        // Needed for editors in iframes.\n        this.document = this.media.ownerDocument;\n        // key: ratio identifier, label: displayed to user, value: used by cropper lib\n        const src = this.media.getAttribute('src');\n        const data = {...this.media.dataset};\n        this.initialSrc = src;\n        this.aspectRatio = data.aspectRatio || \"0/0\";\n        const mimetype = data.mimetype ||\n                src.endsWith('.png') ? 'image/png' :\n                src.endsWith('.webp') ? 'image/webp' :\n                'image/jpeg';\n        this.mimetype = this.props.mimetype || mimetype;\n\n        await loadImageInfo(this.media, this.props.rpc);\n        const isIllustration = /^\\/web_editor\\/shape\\/illustration\\//.test(this.media.dataset.originalSrc);\n        this.uncroppable = false;\n        if (this.media.dataset.originalSrc && !isIllustration) {\n            this.originalSrc = this.media.dataset.originalSrc;\n            this.originalId = this.media.dataset.originalId;\n        } else {\n            // Couldn't find an attachment: not croppable.\n            this.uncroppable = true;\n        }\n\n        if (this.uncroppable) {\n            this.notification.add(\n                markup(_t(\"This type of image is not supported for cropping.<br/>If you want to crop it, please first download it from the original source and upload it in Odoo.\")),\n                {\n                    title: _t(\"This image is an external image\"),\n                    type: 'warning',\n                }\n            )\n            return this._closeCropper();\n        }\n        const $cropperWrapper = this.$('.o_we_cropper_wrapper');\n\n        await this._scrollToInvisibleImage();\n        // Replacing the src with the original's so that the layout is correct.\n        await loadImage(this.originalSrc, this.media);\n        this.$cropperImage = this.$('.o_we_cropper_img');\n        const cropperImage = this.$cropperImage[0];\n        [cropperImage.style.width, cropperImage.style.height] = [this.$media.width() + 'px', this.$media.height() + 'px'];\n        \n        const sel = this.document.getSelection();\n        sel && sel.removeAllRanges();\n\n        // Overlaying the cropper image over the real image\n        const offset = this.$media.offset();\n        offset.left += parseInt(this.$media.css('padding-left'));\n        offset.top += parseInt(this.$media.css('padding-right'));\n        $cropperWrapper[0].style.left = `${offset.left}px`;\n        $cropperWrapper[0].style.top = `${offset.top}px`;\n\n        await loadImage(this.originalSrc, cropperImage);\n\n        // We need to remove the d-none class for the cropper library to work.\n        this.elRef.el.classList.remove('d-none');\n        await activateCropper(cropperImage, this.aspectRatios[this.aspectRatio].value, this.media.dataset);\n\n        this._onDocumentMousedown = this._onDocumentMousedown.bind(this);\n        this._onDocumentKeydown = this._onDocumentKeydown.bind(this);\n        // We use capture so that the handler is called before other editor handlers\n        // like save, such that we can restore the src before a save.\n        // We need to add event listeners to the owner document of the widget.\n        this.elRef.el.ownerDocument.addEventListener('mousedown', this._onDocumentMousedown, {capture: true});\n        this.elRef.el.ownerDocument.addEventListener('keydown', this._onDocumentKeydown, {capture: true});\n    }\n    /**\n     * Updates the DOM image with cropped data and associates required\n     * information for a potential future save (where required cropped data\n     * attachments will be created).\n     *\n     * @private\n     * @param {boolean} [cropped=true]\n     */\n    async _save(cropped = true) {\n        // Mark the media for later creation of cropped attachment\n        this.media.classList.add('o_modified_image_to_save');\n\n        [...cropperDataFields, 'aspectRatio'].forEach(attr => {\n            delete this.media.dataset[attr];\n            const value = this._getAttributeValue(attr);\n            if (value) {\n                this.media.dataset[attr] = value;\n            }\n        });\n        delete this.media.dataset.resizeWidth;\n        this.initialSrc = await applyModifications(this.media, {forceModification: true, mimetype: this.mimetype});\n        this.media.classList.toggle('o_we_image_cropped', cropped);\n        this.$media.trigger('image_cropped');\n        this._closeCropper();\n    }\n    /**\n     * Returns an attribute's value for saving.\n     *\n     * @private\n     */\n    _getAttributeValue(attr) {\n        if (cropperDataFields.includes(attr)) {\n            return this.$cropperImage.cropper('getData')[attr];\n        }\n        return this[attr];\n    }\n    /**\n     * Resets the crop box to prevent it going outside the image.\n     *\n     * @private\n     */\n    _resetCropBox() {\n        this.$cropperImage.cropper('clear');\n        this.$cropperImage.cropper('crop');\n    }\n    /**\n     * Make sure the targeted image is in the visible viewport before crop.\n     *\n     * @private\n     */\n    async _scrollToInvisibleImage() {\n        const rect = this.media.getBoundingClientRect();\n        const viewportTop = this.document.documentElement.scrollTop || 0;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const closestScrollable = el => {\n            if (!el) {\n                return null;\n            }\n            if (el.scrollHeight > el.clientHeight) {\n                return $(el);\n            } else {\n                return closestScrollable(el.parentElement);\n            }\n        };\n        // Give priority to the closest scrollable element (e.g. for images in\n        // HTML fields, the element to scroll is different from the document's\n        // scrolling element).\n        const $scrollable = closestScrollable(this.media);\n\n        // The image must be in a position that allows access to it and its crop\n        // options buttons. Otherwise, the crop widget container can be scrolled\n        // to allow editing.\n        if (rect.top < viewportTop || viewportBottom - rect.bottom < 100) {\n            await dom.scrollTo(this.media, {\n                easing: \"linear\",\n                duration: 500,\n                ...($scrollable && { $scrollable }),\n            });\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when a crop option is clicked -> change the crop area accordingly.\n     *\n     * @private\n     * @param {MouseEvent} ev\n     */\n    _onCropOptionClick(ev) {\n        const {action, value, scaleDirection} = ev.currentTarget.dataset;\n        switch (action) {\n            case 'ratio':\n                this.$cropperImage.cropper('reset');\n                this.aspectRatio = value;\n                this.$cropperImage.cropper('setAspectRatio', this.aspectRatios[this.aspectRatio].value);\n                break;\n            case 'zoom':\n            case 'reset':\n                this.$cropperImage.cropper(action, value);\n                break;\n            case 'rotate':\n                this.$cropperImage.cropper(action, value);\n                this._resetCropBox();\n                break;\n            case 'flip': {\n                const amount = this.$cropperImage.cropper('getData')[scaleDirection] * -1;\n                return this.$cropperImage.cropper(scaleDirection, amount);\n            }\n            case 'apply':\n                return this._save();\n            case 'discard':\n                return this._closeCropper();\n        }\n    }\n    /**\n     * Discards crop if the user clicks outside of the widget.\n     *\n     * @private\n     * @param {MouseEvent} ev\n     */\n    _onDocumentMousedown(ev) {\n        if (this.elRef.el.ownerDocument.body.contains(ev.target) && this.$(ev.target).length === 0) {\n            return this._closeCropper();\n        }\n    }\n    /**\n     * Save crop if user hits enter,\n     * discard crop on escape.\n     *\n     * @private\n     * @param {KeyboardEvent} ev\n     */\n    _onDocumentKeydown(ev) {\n        if (ev.key === 'Enter') {\n            return this._save();\n        } else if (ev.key === 'Escape') {\n            ev.stopImmediatePropagation();\n            return this._closeCropper();\n        }\n    }\n    /**\n     * Resets the cropbox on zoom to prevent crop box overflowing.\n     *\n     * @private\n     */\n    async _onCropZoom() {\n        // Wait for the zoom event to be fully processed before reseting.\n        await new Promise(res => setTimeout(res, 0));\n        this._resetCropBox();\n    }\n}\n", "/** @odoo-module **/\n\nimport * as OdooEditorLib from \"@web_editor/js/editor/odoo-editor/src/OdooEditor\";\nimport { _t } from \"@web/core/l10n/translation\";\nimport { isVisible } from \"@web/core/utils/ui\";\nimport weUtils from \"@web_editor/js/common/utils\";\nimport {\n    Component,\n    onWillStart,\n    onMounted,\n    onWillUpdateProps,\n    onWillDestroy,\n    useState,\n    useRef,\n} from \"@odoo/owl\";\nimport { deduceURLfromText } from \"@web_editor/js/editor/odoo-editor/src/utils/sanitize\";\n\nconst { getDeepRange, getInSelection, EMAIL_REGEX, PHONE_REGEX } = OdooEditorLib;\n\n/**\n * Allows to customize link content and style.\n */\nexport class Link extends Component {\n    static props = {\n        editable: true,\n        link: true,\n        needLabel: { type: Boolean, optional: true },\n        forceNewWindow: { type: Boolean, optional: true },\n        initialIsNewWindow: { type: Boolean, optional: true },\n        shouldFocusUrl: { type: Boolean, optional: true },\n    };\n    static defaultProps = {\n        needLabel: true,\n        forceNewWindow: false,\n        initialIsNewWindow: false,\n        shouldFocusUrl: false,\n    }\n    linkComponentWrapperRef = useRef(\"linkComponentWrapper\");\n    colorsData = [\n        {type: '', label: _t(\"Link\"), btnPreview: 'link'},\n        {type: 'primary', label: _t(\"Primary\"), btnPreview: 'primary'},\n        {type: 'secondary', label: _t(\"Secondary\"), btnPreview: 'secondary'},\n        {type: 'custom', label: _t(\"Custom\"), btnPreview: 'custom'},\n        // Note: by compatibility the dialog should be able to remove old\n        // colors that were suggested like the BS status colors or the\n        // alpha -> epsilon classes. This is currently done by removing\n        // all btn-* classes anyway.\n    ];\n    setup() {\n        this.state = useState({});\n        // We need to wait for the `onMounted` changes to be done before\n        // accessing `this.$el`.\n        this.mountedPromise = new Promise(resolve => this.mountedResolve = resolve);\n\n        onWillStart(() => this._updateState(this.props));\n        let started = false;\n        onMounted(async () => {\n            if (started) {\n                return;\n            }\n            started = true;\n            if (!this.linkComponentWrapperRef.el) {\n                // There is legacy code that can trigger the instantiation of the\n                // link tool when it's parent component (the toolbar) is not in the\n                // dom. If the parent element is not in the dom, owl will not return\n                // `this.linkComponentWrapperRef.el` because of a check (see\n                // `inOwnerDocument`).\n                // Todo: this workaround should be removed when the snippet menu is\n                // converted to owl.\n                await new Promise(resolve => {\n                    const observer = new MutationObserver(() => {\n                        if (this.linkComponentWrapperRef.el) {\n                            observer.disconnect();\n                            resolve();\n                        }\n                    });\n                    observer.observe(document.body, { childList: true, subtree: true });\n                });\n            }\n            this.$el = $(this.linkComponentWrapperRef.el);\n\n            this.$el.find('input, select').on('input', this._onAnyChange.bind(this));\n            this.$el.find('input, select').on('change', this._onAnyChange.bind(this));\n            this.$el.find('[name=\"url\"]').on('input', this.__onURLInput.bind(this));\n            this.$el.find('[name=\"url\"]').on('change', this._onURLInputChange.bind(this));\n\n            await this.start();\n            this.mountedResolve();\n        });\n        onWillUpdateProps(async (newProps) => {\n            await this.mountedPromise;\n            this._updateState(newProps);\n            this.state.url = newProps.link.getAttribute('href') || '';\n            this._setUrl({ shouldFocus: newProps.shouldFocusUrl });\n        });\n        onWillDestroy(() => {\n            this.destroy();\n        });\n    }\n    /**\n     * @override\n     */\n    async start() {\n        this._setSelectOptionFromLink();\n\n        this._updateOptionsUI();\n\n        this.$el[0].querySelector('#o_link_dialog_label_input').value = this.state.originalText;\n        this._setUrl({ shouldFocus: this.props.shouldFocusUrl });\n    }\n    /**\n     * @override\n     */\n    destroy () {\n        if (this._savedURLInputOnDestroy) {\n            this._adaptPreview();\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Apply the new link to the DOM (via `this.$link`).\n     *\n     * @param {object} data\n     */\n    applyLinkToDom(data) {\n        // Some mass mailing template use <a class=\"btn btn-link\"> instead of just a simple <a>.\n        // And we need to keep the classes because the a.btn.btn-link have some special css rules.\n        // Same thing for the \"btn-success\" class, this class cannot be added\n        // by the options but we still have to ensure that it is not removed if\n        // it exists in a template (e.g. \"Newsletter Block\" snippet).\n        if (!data.classes.split(' ').includes('btn')) {\n            for (const linkClass of this.toleratedClasses) {\n                if (this.state.iniClassName && this.state.iniClassName.split(' ').includes(linkClass)) {\n                    data.classes += \" btn \" + linkClass;\n                }\n            }\n        }\n        // When multiple buttons follow each other, they may break on 2 lines\n        // or more on mobile, so they need a margin-bottom.\n        if (data.classes.split(\" \").includes(\"btn\")) {\n            const closestButtonSiblingEls = this._getDirectButtonSiblings(this.linkEl);\n            if (closestButtonSiblingEls.length) {\n                data.classes += \" mb-2\";\n                closestButtonSiblingEls.forEach(btnEl => btnEl.classList.add(\"mb-2\"));\n            }\n        }\n        if (['btn-custom', 'btn-outline-custom', 'btn-fill-custom'].some(className =>\n            data.classes.includes(className)\n        )) {\n            this.$link.css('color', data.classes.includes(data.customTextColor) ? '' : data.customTextColor);\n            this.$link.css('background-color', data.classes.includes(data.customFill) || weUtils.isColorGradient(data.customFill) ? '' : data.customFill);\n            this.$link.css('background-image', weUtils.isColorGradient(data.customFill) ? data.customFill : '');\n            this.$link.css('border-width', data.customBorderWidth);\n            this.$link.css('border-style', data.customBorderStyle);\n            this.$link.css('border-color', data.customBorder);\n        } else {\n            this.$link.css('color', '');\n            this.$link.css('background-color', '');\n            this.$link.css('background-image', '');\n            this.$link.css('border-width', '');\n            this.$link.css('border-style', '');\n            this.$link.css('border-color', '');\n        }\n        const attrs = Object.assign({}, this.state.oldAttributes, {\n            href: data.url,\n            target: data.isNewWindow ? '_blank' : '',\n        });\n        if (typeof data.classes === \"string\") {\n            data.classes = data.classes.replace(/o_default_snippet_text/, '');\n            attrs.class = `${data.classes}`;\n        }\n        if (data.rel) {\n            attrs.rel = `${data.rel}`;\n        }\n\n        this.$link.attr(attrs);\n        if (!this.$link.attr('target')) {\n            this.$link[0].removeAttribute('target');\n        }\n        this._updateLinkContent(this.$link, data);\n    }\n    /**\n     * Focuses the url input.\n     */\n    focusUrl() {\n        const urlInput = this.$el[0].querySelector('input[name=\"url\"]');\n        urlInput.focus();\n        urlInput.select();\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _setUrl({ shouldFocus } = {}) {\n        if (this.state.url) {\n            const protocolLessUrl = this.state.url.replace(/^(https?|mailto|tel):(\\/\\/)?/i, '');\n            this.$el.find('input[name=\"url\"]').val(protocolLessUrl);\n            this._onURLInput();\n            this._savedURLInputOnDestroy = false;\n        }\n        if (shouldFocus) {\n            this.focusUrl();\n        }\n    }\n    /**\n     * @private\n     */\n    _setSelectOptionFromLink() {\n        for (const option of this._getLinkOptions()) {\n            const $option = $(option);\n            const value = $option.is('input') ? $option.val() : $option.data('value') || option.getAttribute('value');\n            let active = false;\n            if (value) {\n                const subValues = value.split(',');\n                let subActive = true;\n                for (let subValue of subValues) {\n                    const classPrefix = new RegExp('(^|btn-| |btn-outline-|btn-fill-)' + subValue);\n                    subActive = subActive && classPrefix.test(this.state.iniClassName);\n                }\n                active = subActive;\n            } else {\n                active = !this.state.iniClassName\n                         || this.toleratedClasses.some(val => this.state.iniClassName.split(' ').includes(val))\n                         || !this.state.iniClassName.includes('btn-');\n            }\n            this._setSelectOption($option, active);\n        }\n    }\n    /**\n     * Abstract method: adapt the link to changes.\n     *\n     * @abstract\n     * @private\n     */\n    _adaptPreview() {}\n    /**\n     * @private\n     */\n    _correctLink(url) {\n        if (url.indexOf('tel:') === 0) {\n            url = url.replace(/^tel:([0-9]+)$/, 'tel://$1');\n        } else if (url && !url.startsWith('mailto:') && url.indexOf('://') === -1\n                    && url[0] !== '/' && url[0] !== '#' && url.slice(0, 2) !== '${') {\n            url = 'http://' + url;\n        }\n        return url;\n    }\n    _deduceUrl(text) {\n        text = text.trim();\n        if (/^(https?:|mailto:|tel:)/.test(text)) {\n            // Text begins with a known protocol, accept it as valid URL.\n            return text;\n        } else {\n            return deduceURLfromText(text, this.linkEl) || '';\n        }\n    }\n    /**\n     * Abstract method: return true if the URL should be stripped of its domain.\n     *\n     * @abstract\n     * @private\n     * @returns {boolean}\n     */\n    _doStripDomain() {}\n    /**\n     * Get the link's data (url, content and styles).\n     *\n     * @private\n     * @returns {Object} {content: String, url: String, classes: String, isNewWindow: Boolean}\n     */\n    _getData() {\n        var $url = this.$el.find('input[name=\"url\"]');\n        var url = $url.val();\n        var content = this.$el.find('input[name=\"label\"]').val() || url;\n\n        if (!this.state.isButton && $url.prop('required') && (!url || !$url[0].checkValidity())) {\n            return null;\n        }\n\n        const type = this._getLinkType();\n        const customTextColor = this._getLinkCustomTextColor();\n        const customFill = this._getLinkCustomFill();\n        const customBorder = this._getLinkCustomBorder();\n        const customBorderWidth = this._getLinkCustomBorderWidth();\n        const customBorderStyle = this._getLinkCustomBorderStyle();\n        const customClasses = this._getLinkCustomClasses();\n        const size = this._getLinkSize();\n        const shape = this._getLinkShape();\n        const shapes = shape ? shape.split(',') : [];\n        const style = ['outline', 'fill'].includes(shapes[0]) ? `${shapes[0]}-` : '';\n        const shapeClasses = shapes.slice(style ? 1 : 0).join(' ');\n        const classes = (this.state.className || '') +\n            (type ? (` btn btn-${style}${type}`) : '') +\n            (type === 'custom' ? customClasses : '') +\n            (type && shapeClasses ? (` ${shapeClasses}`) : '') +\n            (type && size ? (' btn-' + size) : '');\n        var isNewWindow = this._isNewWindow(url);\n        var doStripDomain = this._doStripDomain();\n        if (this.state.url.indexOf(location.origin) === 0 && doStripDomain) {\n            this.state.url = this.state.url.slice(location.origin.length);\n        }\n        var allWhitespace = /\\s+/gi;\n        var allStartAndEndSpace = /^\\s+|\\s+$/gi;\n        const isImage = this.props.link && this.props.link.querySelector('img');\n        return {\n            content: content,\n            url: this._correctLink(this.state.url),\n            classes: classes.replace(allWhitespace, ' ').replace(allStartAndEndSpace, ''),\n            customTextColor: customTextColor,\n            customFill: customFill,\n            customBorder: customBorder,\n            customBorderWidth: customBorderWidth,\n            customBorderStyle: customBorderStyle,\n            oldAttributes: this.state.oldAttributes,\n            isNewWindow: isNewWindow,\n            doStripDomain: doStripDomain,\n            isImage,\n        };\n    }\n    /**\n     * Return a list of all the descendants of a given element.\n     *\n     * @private\n     * @param {Node} rootNode\n     * @returns {Node[]}\n     */\n    _getDescendants(rootNode) {\n        const nodes = [];\n        for (const node of rootNode.childNodes) {\n            nodes.push(node);\n            nodes.push(...this._getDescendants(node));\n        }\n        return nodes;\n    }\n    /**\n     * Abstract method: return a JQuery object containing the UI elements\n     * holding the \"Open in new window\" option's row of the link.\n     *\n     * @abstract\n     * @private\n     * @returns {JQuery}\n     */\n    _getIsNewWindowFormRow() {}\n    /**\n     * Abstract method: return a JQuery object containing the UI elements\n     * holding the styling options of the link (eg: color, size, shape).\n     *\n     * @abstract\n     * @private\n     * @returns {JQuery}\n     */\n    _getLinkOptions() {}\n    /**\n     * Abstract method: return the shape(s) to apply to the link (eg:\n     * \"outline\", \"rounded-circle\", \"outline,rounded-circle\").\n     *\n     * @abstract\n     * @private\n     * @returns {string}\n     */\n    _getLinkShape() {}\n    /**\n     * Abstract method: return the size to apply to the link (eg:\n     * \"sm\", \"lg\").\n     *\n     * @private\n     * @returns {string}\n     */\n    _getLinkSize() {}\n    /**\n     * Abstract method: return the type to apply to the link (eg:\n     * \"primary\", \"secondary\").\n     *\n     * @private\n     * @returns {string}\n     */\n    _getLinkType() {}\n    /**\n     * Returns the custom text color for custom type.\n     *\n     * @abstract\n     * @private\n     * @returns {string}\n     */\n    _getLinkCustomTextColor() {}\n    /**\n     * Returns the custom border color for custom type.\n     *\n     * @abstract\n     * @private\n     * @returns {string}\n     */\n    _getLinkCustomBorder() {}\n    /**\n     * Returns the custom border width for custom type.\n     *\n     * @abstract\n     * @private\n     * @returns {string}\n     */\n    _getLinkCustomBorderWidth() {}\n    /**\n     * Returns the custom border style for custom type.\n     *\n     * @abstract\n     * @private\n     * @returns {string}\n     */\n    _getLinkCustomBorderStyle() {}\n    /**\n     * Returns the custom fill color for custom type.\n     *\n     * @abstract\n     * @private\n     * @returns {string}\n     */\n    _getLinkCustomFill() {}\n    /**\n     * Returns the custom text, fill and border color classes for custom type.\n     *\n     * @abstract\n     * @private\n     * @returns {string}\n     */\n    _getLinkCustomClasses() {}\n    /**\n     * @private\n     */\n    _isFromAnotherHostName(url) {\n        if (url.includes(window.location.hostname)) {\n            return false;\n        }\n        try {\n            const Url = URL || window.URL || window.webkitURL;\n            const urlObj = url.startsWith('/') ? new Url(url, window.location.origin) : new Url(url);\n            return (urlObj.origin !== window.location.origin);\n        } catch {\n            return true;\n        }\n    }\n    /**\n     * Abstract method: return true if the link should open in a new window.\n     *\n     * @abstract\n     * @private\n     * @returns {boolean}\n     */\n    _isNewWindow(url) {}\n    /**\n     * Abstract method: mark one or several options as active or inactive.\n     *\n     * @abstract\n     * @private\n     * @param {JQuery} $option\n     * @param {boolean} [active]\n     */\n    _setSelectOption($option, active) {}\n    /**\n     * Update the link content.\n     *\n     * @private\n     * @param {JQuery} $link\n     * @param {object} linkInfos\n     * @param {boolean} force\n     */\n    _updateLinkContent($link, linkInfos, { force = false } = {}) {\n        if (force || (this.props.needLabel && (linkInfos.content !== this.state.originalText || linkInfos.url !== this.state.url))) {\n            if (linkInfos.content === this.state.originalText || linkInfos.isImage) {\n                $link.html(this.state.originalHTML.replaceAll('\\u200B', '').replaceAll('\\uFEFF', ''));\n            } else if (linkInfos.content && linkInfos.content.length) {\n                let contentWrapperEl = $link[0];\n                const text = $link[0].innerText.replaceAll(\"\\u200B\", \"\").replaceAll(\"\\uFEFF\", \"\").trim();\n                // Update the first not ZWS child element that has the same inner text\n                // as the link with the new content while preserving child\n                // elements within the link. (e.g. the link is bold and italic)\n                let child;\n                do {\n                    contentWrapperEl = child || contentWrapperEl;\n                    child = [...contentWrapperEl.children].find(\n                        (element) => !element.hasAttribute(\"data-o-link-zws\")\n                    );\n                } while (child?.innerText.replaceAll('\\u200B', '').replaceAll('\\uFEFF', '').trim() === text);\n                contentWrapperEl.innerText = linkInfos.content;\n            } else {\n                $link.text(linkInfos.url);\n            }\n        }\n    }\n    /**\n     * @abstract\n     * @private\n     */\n    _updateOptionsUI() {}\n    /**\n     * Update the state.\n     *\n     * @private\n     */\n    async _updateState(props) {\n        this.initialNewWindow = props.initialIsNewWindow;\n\n        this.state.className = \"\";\n        this.state.iniClassName = \"\";\n\n        // The classes in the following array should not be in editable areas\n        // but as there are still some (e.g. in the \"newsletter block\" snippet)\n        // we make sure the options system works with them.\n        this.toleratedClasses = ['btn-link', 'btn-success'];\n\n        this.editable = props.editable;\n        this.$editable = $(this.editable);\n\n        if (props.link) {\n            const range = document.createRange();\n            range.selectNodeContents(props.link);\n            this.state.range = range;\n            this.$link = $(props.link);\n            this.linkEl = props.link;\n        }\n\n        if (this.state.range) {\n            this.$link = this.$link || $(OdooEditorLib.getInSelection(this.editable.ownerDocument, 'a'));\n            this.linkEl = this.$link[0];\n            this.state.iniClassName = this.$link.attr('class') || '';\n            this.colorCombinationClass = false;\n            let $node = this.$link;\n            while ($node.length && !$node.is('body')) {\n                const className = $node.attr('class') || '';\n                const m = className.match(/\\b(o_cc\\d+)\\b/g);\n                if (m) {\n                    this.colorCombinationClass = m[0];\n                    break;\n                }\n                $node = $node.parent();\n            }\n            const linkNode = this.$link[0] || this.state.range.cloneContents();\n            const linkText = weUtils.getLinkLabel(linkNode);\n            this.state.originalText = linkText.replace(/[ \\t\\r\\n]+/g, ' ');\n            if (linkNode instanceof DocumentFragment) {\n                this.state.originalHTML = $('<fakeEl>').append(linkNode).html();\n            } else {\n                this.state.originalHTML = linkNode.innerHTML;\n            }\n            this.state.url = this.$link.attr('href') || '';\n        } else {\n            this.state.originalText = this.state.originalText ? this.state.originalText.replace(/[ \\t\\r\\n]+/g, ' ') : '';\n        }\n\n        this.state.url ||= this._deduceUrl(this.state.originalText, this.linkEl);\n\n        if (this.linkEl) {\n            this.initialNewWindow = this.initialNewWindow || this.linkEl.target === '_blank';\n        }\n\n        const classesToKeep = [\n            'text-wrap', 'text-nowrap', 'text-start', 'text-center', 'text-end',\n            'text-truncate',\n        ];\n        const keptClasses = this.state.iniClassName.split(' ').filter(className => classesToKeep.includes(className));\n        const allBtnColorPrefixes = /(^|\\s+)(bg|text|border)((-[a-z0-9_-]*)|\\b)/gi;\n        const allBtnClassSuffixes = /(^|\\s+)btn((-[a-z0-9_-]*)|\\b)/gi;\n        const allBtnShapes = /\\s*(rounded-circle|flat)\\s*/gi;\n        const btnMarginBottom = /(^|\\s+)mb-2(\\s+|$)/i;\n        this.state.className = this.state.iniClassName\n            .replace(allBtnColorPrefixes, ' ')\n            .replace(allBtnClassSuffixes, ' ')\n            .replace(allBtnShapes, \" \")\n            .replace(btnMarginBottom, \" \");\n        this.state.className += ' ' + keptClasses.join(' ');\n        // 'o_submit' class will force anchor to be handled as a button in linkdialog.\n        if (/(?:s_website_form_send|o_submit)/.test(this.state.className)) {\n            this.state.isButton = true;\n        }\n    }\n    /**\n     * Returns an array of the buttons which are the closest non empty\n     * previousSibling and/or nextSibling.\n     *\n     * @param {HTMLElement} el\n     * @returns {HTMLElement[]}\n     */\n    _getDirectButtonSiblings(el) {\n        return [\"previous\", \"next\"].reduce((buttonSiblingsEls, side) => {\n            let siblingNode = el[`${side}Sibling`];\n            while (siblingNode) {\n                // If the node is an empty text node, or if it is a <br> tag or\n                // an invisible element, it is not taken into account.\n                if ((siblingNode.nodeType === 3 && !!siblingNode.textContent.match(/^\\s*$/)) ||\n                        (siblingNode.nodeType === 1 &&\n                        (siblingNode.nodeName === \"BR\" || !isVisible(siblingNode)))) {\n                    siblingNode = siblingNode[`${side}Sibling`];\n                    continue;\n                }\n                if (siblingNode.nodeType === 1 && siblingNode.classList.contains(\"btn\")) {\n                    buttonSiblingsEls.push(siblingNode);\n                }\n                break;\n            }\n            return buttonSiblingsEls;\n        }, []);\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onAnyChange(e) {\n        if (!e.target.closest('input[type=\"text\"]')) {\n            this._adaptPreview();\n        }\n    }\n    /**\n     * @todo Adapt in master: in stable _onURLInput was both used as an event\n     * handler responding to url input events + a private method called at the\n     * widget lifecycle start. Originally both points were to update the link\n     * tools/dialog UI. It was later wanted to actually update the DOM... but\n     * should only be done in event handler part.\n     *\n     * This allows to differentiate the event handler part. In master, we should\n     * take the opportunity to also update the `_updatePreview` concept which\n     * updates the \"preview\" of the original link dialog but actually updates\n     * the real DOM for the \"new\" link tools.\n     *\n     * @private\n     */\n    __onURLInput() {\n        const inputValue = this.$el[0].querySelector('#o_link_dialog_url_input').value;\n        this.state.url = this._deduceUrl(inputValue, this.linkEl) || inputValue;\n        this._onURLInput(...arguments);\n    }\n    /**\n     * @private\n     */\n    _onURLInput() {\n        this._savedURLInputOnDestroy = true;\n        var $linkUrlInput = this.$el.find('#o_link_dialog_url_input');\n        let value = $linkUrlInput.val();\n        let isLink = !EMAIL_REGEX.test(value) && !PHONE_REGEX.test(value);\n        this._getIsNewWindowFormRow().toggleClass('d-none', !isLink);\n        this.$el.find('.o_strip_domain').toggleClass('d-none', value.indexOf(window.location.origin) !== 0);\n    }\n    /**\n     * @private\n     */\n    _onURLInputChange() {\n        this._adaptPreview();\n        this._savedURLInputOnDestroy = false;\n    }\n}\n\n/**\n * Return the link element to edit. Create one from selection if none was\n * present in selection.\n *\n * @param {Node} [options.containerNode]\n * @param {Node} [options.startNode]\n * @returns {Object}\n */\nexport function getOrCreateLink({ containerNode, startNode } = {}) {\n    if (startNode) {\n        if ($(startNode).is('a')) {\n            return { link: startNode, needLabel: false };\n        } else {\n            $(startNode).wrap('<a href=\"#\"/>');\n            return { link: startNode.parentElement, needLabel: false };\n        }\n    }\n\n    const doc = containerNode && containerNode.ownerDocument || document;\n    let needLabel = false;\n    let link = getInSelection(doc, 'a');\n    const $link = $(link);\n    const range = getDeepRange(containerNode, {splitText: true, select: true, correctTripleClick: true});\n    if (!range) {\n        return {};\n    }\n    const isContained = containerNode.contains(range.startContainer) && containerNode.contains(range.endContainer);\n    if (link && (!$link.has(range.startContainer).length || !$link.has(range.endContainer).length)) {\n        // Expand the current link to include the whole selection.\n        let before = link.previousSibling;\n        while (before !== null && range.intersectsNode(before)) {\n            link.insertBefore(before, link.firstChild);\n            before = link.previousSibling;\n        }\n        let after = link.nextSibling;\n        while (after !== null && range.intersectsNode(after)) {\n            link.appendChild(after);\n            after = link.nextSibling;\n        }\n    } else if (!link && isContained) {\n        link = document.createElement('a');\n        if (range.collapsed) {\n            range.insertNode(link);\n            needLabel = true;\n        } else {\n            link.appendChild(range.extractContents());\n            range.insertNode(link);\n        }\n    }\n    return { link, needLabel };\n};\n", "/** @odoo-module **/\n\nimport { onMounted, useRef } from \"@odoo/owl\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\nimport { Link } from \"./link\";\n\nexport class LinkDialog extends Link {\n    static components = { Dialog };\n    static template = 'web_editor.LinkDialog';\n    static props = {\n        ...Link.props,\n        focusField: { type: String, optional: true },\n        close: { type: Function },\n        onClose: { type: Function },\n        onSave: { type: Function },\n    };\n    inputTextRef = useRef('inputText');\n    inputUrlRef = useRef('inputUrl');\n\n    setup() {\n        super.setup();\n        onMounted(() => {\n            this.$el.find('[name=\"link_style_color\"]').on('change', this._onTypeChange.bind(this));\n            this.$el.find('input[name=\"label\"]').on('input', this._adaptPreview.bind(this));\n            const el = this.props.focusField === 'url' ? this.inputUrlRef.el : this.inputTextRef.el;\n            el.focus();\n        });\n        this.env.dialogData.close = () => this.onDiscard();\n    }\n\n    /**\n     * @override\n     */\n    start() {\n        super.start();\n        this.buttonOptsCollapseEl = this.linkComponentWrapperRef.el.querySelector('#o_link_dialog_button_opts_collapse');\n        this.$styleInputs = this.$el.find('input.link-style');\n        this.$styleInputs.prop('checked', false).filter('[value=\"\"]').prop('checked', true);\n        if (this.initialNewWindow) {\n            this.$el.find('we-button.o_we_checkbox_wrapper').toggleClass('active', true);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    onSave() {\n        var data = this._getData();\n        if (data === null) {\n            var $url = this.$el.find('input[name=\"url\"]');\n            $url.closest('.o_url_input').addClass('o_has_error').find('.form-control, .form-select').addClass('is-invalid');\n            $url.focus();\n            return;\n        }\n        var allWhitespace = /\\s+/gi;\n        var allStartAndEndSpace = /^\\s+|\\s+$/gi;\n        var allBtnTypes = /(^|[ ])(btn-secondary|btn-success|btn-primary|btn-info|btn-warning|btn-danger)([ ]|$)/gi;\n        data.classes = data.classes.replace(allWhitespace, ' ').replace(allStartAndEndSpace, '');\n        if (data.classes.replace(allBtnTypes, ' ')) {\n            data.style = {\n                'background-color': '',\n                'color': '',\n            };\n        }\n        data.linkDialog = this;\n        this.props.close();\n        this.props.onSave(data);\n    }\n\n    onDiscard() {\n        this.props.onClose();\n        this.props.close();\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _adaptPreview() {\n        var data = this._getData();\n        if (data === null) {\n            return;\n        }\n        const attrs = {\n            target: '_blank',\n            href: data.url && data.url.length ? data.url : '#',\n            class: `${data.classes.replace(/float-\\w+/, '')} o_btn_preview`,\n        };\n\n        const $linkPreview = this.$el.find(\"#link-preview\");\n        $linkPreview.attr(attrs);\n        this._updateLinkContent($linkPreview, data, { force: true });\n    }\n    /**\n     * @override\n     */\n    _doStripDomain() {\n        return this.$el.find('#o_link_dialog_url_strip_domain').prop('checked');\n    }\n    /**\n     * @override\n     */\n    _getIsNewWindowFormRow() {\n        return this.$el.find('input[name=\"is_new_window\"]').closest('.row');\n    }\n    /**\n     * @override\n     */\n    _getLinkOptions() {\n        const options = [\n            'input[name=\"link_style_color\"]',\n            'select[name=\"link_style_size\"] > option',\n            'select[name=\"link_style_shape\"] > option',\n        ];\n        return this.$el.find(options.join(','));\n    }\n    /**\n     * @override\n     */\n    _getLinkShape() {\n        return this.$el.find('select[name=\"link_style_shape\"]').val() || '';\n    }\n    /**\n     * @override\n     */\n    _getLinkSize() {\n        return this.$el.find('select[name=\"link_style_size\"]').val() || '';\n    }\n    /**\n     * @override\n     */\n    _getLinkType() {\n        return this.$el.find('input[name=\"link_style_color\"]:checked').val() || '';\n    }\n    /**\n     * @override\n     */\n    _isNewWindow(url) {\n        if (this.props.forceNewWindow) {\n            return this._isFromAnotherHostName(url);\n        } else {\n            return this.$el.find('input[name=\"is_new_window\"]').prop('checked');\n        }\n    }\n    /**\n     * @override\n     */\n    _setSelectOption($option, active) {\n        if ($option.is(\"input\")) {\n            $option.prop(\"checked\", active);\n        } else if (active) {\n            $option.parent().find('option').removeAttr('selected').removeProp('selected');\n            $option.parent().val($option.val());\n            $option.attr('selected', 'selected').prop('selected', 'selected');\n        }\n    }\n    /**\n     * @override\n     */\n    _updateOptionsUI() {\n        const el = this.linkComponentWrapperRef.el.querySelector('[name=\"link_style_color\"]:checked');\n        $(this.buttonOptsCollapseEl).collapse(el && el.value ? 'show' : 'hide');\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onTypeChange() {\n        this._updateOptionsUI();\n    }\n    /**\n     * @override\n     */\n    _onURLInput() {\n        this.$el.find('#o_link_dialog_url_input').closest('.o_url_input').removeClass('o_has_error').find('.form-control, .form-select').removeClass('is-invalid');\n        this._adaptPreview();\n    }\n}\n", "/** @odoo-module **/\n\nimport { _t } from \"@web/core/l10n/translation\";\nimport { ancestors } from '@web_editor/js/common/wysiwyg_utils';\nimport { KeepLast } from '@web/core/utils/concurrency';\nimport { browser } from \"@web/core/browser/browser\";\n\nexport class LinkPopoverWidget {\n    static createFor(params) {\n        const noLinkPopoverClass = \".o_no_link_popover, .carousel-control-prev, .carousel-control-next, .dropdown-toggle\";\n        // Target might already have a popover, eg cart icon in navbar\n        const alreadyPopover = $(params.target).data('bs.popover');\n        if (alreadyPopover || $(params.target).is(noLinkPopoverClass) || !!$(params.target).parents(noLinkPopoverClass).length) {\n            return null;\n        }\n        const popoverWidget = new this(params);\n        params.wysiwyg?.odooEditor.observerUnactive('LinkPopoverWidget');\n        popoverWidget.start(); // This is not async\n        params.wysiwyg?.odooEditor.observerActive('LinkPopoverWidget');\n        return popoverWidget;\n    };\n\n    template = `\n        <div class=\"d-flex\">\n            <span class=\"me-2 o_we_preview_favicon\"><i class=\"fa fa-globe\"></i><img class=\"align-baseline d-none\"></img></span>\n            <div class=\"w-100\">\n                <div class=\"d-flex\">\n                    <a href=\"#\" target=\"_blank\" class=\"o_we_url_link fw-bold flex-grow-1 text-truncate\" title=\"${_t('Open in a new tab')}\"></a>\n                    <a href=\"#\" class=\"mx-1 o_we_copy_link text-dark\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"${_t('Copy Link')}\">\n                        <i class=\"fa fa-clone\"></i>\n                    </a>\n                    <a href=\"#\" class=\"mx-1 o_we_edit_link text-dark\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"${_t('Edit Link')}\">\n                        <i class=\"fa fa-edit\"></i>\n                    </a>\n                    <a href=\"#\" class=\"ms-1 o_we_remove_link text-dark\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"${_t('Remove Link')}\">\n                        <i class=\"fa fa-chain-broken\"></i>\n                    </a>\n                </div>\n                <a href=\"#\" target=\"_blank\" class=\"o_we_full_url mt-1 text-muted d-none\" title=\"${_t('Open in a new tab')}\"></a>\n            </div>\n        </div>\n    `;\n\n    constructor(params) {\n        const template = document.createElement('template');\n        template.innerHTML = this.template;\n        this.el = template.content.firstElementChild;\n        this.$el = $(this.el);\n\n        this.wysiwyg = params.wysiwyg;\n        this.target = params.target;\n        this.notify = params.notify;\n        this.$target = $(params.target);\n        this.container = params.container || this.target.ownerDocument.body;\n        this.href = this.$target.attr('href'); // for template\n        this._keepLastPromise = new KeepLast();\n    }\n\n    /**\n     *\n     * @override\n     */\n    start() {\n        this.$urlLink = this.$el.find('.o_we_url_link');\n        this.$previewFaviconImg = this.$el.find('.o_we_preview_favicon img');\n        this.$previewFaviconFa = this.$el.find('.o_we_preview_favicon .fa');\n        this.$copyLink = this.$el.find('.o_we_copy_link');\n        this.$fullUrl = this.$el.find('.o_we_full_url');\n\n        this.$urlLink.attr('href', this.href);\n        this.$fullUrl.attr('href', this.href);\n        this.$el.find(`.o_we_edit_link`).on('click', this._onEditLinkClick.bind(this));\n        this.$el.find(`.o_we_remove_link`).on('click', this._onRemoveLinkClick.bind(this));\n\n        this.$copyLink.on(\"click\", this._onCopyLinkClick.bind(this));\n\n        // init tooltips & popovers\n        this.$el.find('[data-bs-toggle=\"tooltip\"]').tooltip({\n            delay: 0,\n            placement: 'bottom',\n            container: this.container,\n        });\n        const tooltips = [];\n        for (const el of this.$el.find('[data-bs-toggle=\"tooltip\"]').toArray()) {\n            tooltips.push(Tooltip.getOrCreateInstance(el));\n        }\n        let popoverShown = true;\n        this.$target.popover({\n            html: true,\n            content: this.$el,\n            placement: 'bottom',\n            // We need the popover to:\n            // 1. Open when the link is clicked or double clicked\n            // 2. Remain open when the link is clicked again (which `trigger: 'click'` is not doing)\n            // 3. Remain open when the popover content is clicked..\n            // 4. ..except if it the click was on a button of the popover content\n            // 5. Close when the user click somewhere on the page (not being the link or the popover content)\n            trigger: 'manual',\n            boundary: 'viewport',\n            container: this.container,\n        })\n        .on('show.bs.popover.link_popover', () => {\n            this._loadAsyncLinkPreview();\n            popoverShown = true;\n        })\n        .on('hide.bs.popover.link_popover', () => {\n            popoverShown = false;\n        })\n        .on('hidden.bs.popover.link_popover', () => {\n            for (const tooltip of tooltips) {\n                tooltip.hide();\n            }\n        })\n        .on('inserted.bs.popover.link_popover', () => {\n            const popover = Popover.getInstance(this.target);\n            popover.tip.classList.add('o_edit_menu_popover');\n        })\n        .popover('show');\n\n        this.popover = Popover.getInstance(this.target);\n        this.$target.on('mousedown.link_popover', (e) => {\n            if (!popoverShown) {\n                this.$target.popover('show');\n            }\n        });\n        this.$target.on('href_changed.link_popover', (e) => {\n            // Do not change shown/hidden state.\n            if (popoverShown) {\n                this._loadAsyncLinkPreview();\n            }\n        });\n        const onClickDocument = (e) => {\n            if (popoverShown) {\n                const hierarchy = [e.target, ...ancestors(e.target)];\n                if (\n                    !(\n                        hierarchy.includes(this.$target[0]) ||\n                        (hierarchy.includes(this.$el[0]) &&\n                            !hierarchy.some(x => x.tagName && x.tagName === 'A' && (x === this.$urlLink[0] || x === this.$fullUrl[0])))\n                    )\n                ) {\n                    // Note: For buttons of the popover, their listeners should\n                    // handle the hide themselves to avoid race conditions.\n                    this.popover.hide();\n                }\n            }\n        };\n        $(document).on('mouseup.link_popover', onClickDocument);\n        if (document !== this.wysiwyg.odooEditor.document) {\n            $(this.wysiwyg.odooEditor.document).on('mouseup.link_popover', onClickDocument);\n        }\n\n        // Update popover's content and position upon changes\n        // on the link's label or href.\n        this._observer = new MutationObserver(records => {\n            if (!popoverShown) {\n                return;\n            }\n            if (records.some(record => record.type === 'attributes')) {\n                this._loadAsyncLinkPreview();\n            }\n            this.$target.popover('update');\n        });\n        this._observer.observe(this.target, {\n            subtree: true,\n            characterData: true,\n            attributes: true,\n            attributeFilter: ['href'],\n        });\n    }\n    /**\n     *\n     * @override\n     */\n    destroy() {\n        // FIXME those are never destroyed, so this could be a cause of memory\n        // leak. However, it is only one leak per click on a link during edit\n        // mode so this should not be a huge problem.\n        this.$target.off('.link_popover');\n        $(document).off('.link_popover');\n        $(this.wysiwyg.odooEditor.document).off('.link_popover');\n        this.$target.popover('dispose');\n        this._observer.disconnect();\n    }\n\n    /**\n     *  Hide the popover.\n     */\n    hide() {\n        this.$target.popover('hide');\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Fetches and gets the link preview data (title, description..).\n     * For external URL, only the favicon will be loaded.\n     *\n     * @private\n     */\n    async _loadAsyncLinkPreview() {\n        let url;\n        if (this.target.href === '') {\n            this._resetPreview('');\n            this.$previewFaviconFa.removeClass('fa-globe').addClass('fa-question-circle-o');\n            return;\n        }\n        try {\n            url = new URL(this.target.href); // relative to absolute\n        } catch {\n            // Invalid URL, might happen with editor unsuported protocol. eg type\n            // `geo:37.786971,-122.399677`, become `http://geo:37.786971,-122.399677`\n            this.notify(_t(\"This URL is invalid. Preview couldn't be updated.\"), {\n                type: 'danger',\n            });\n            return;\n        }\n\n        this._resetPreview(url);\n        const protocol = url.protocol;\n        if (!protocol.startsWith('http')) {\n            const faMap = {'mailto:': 'fa-envelope-o', 'tel:': 'fa-phone'};\n            const icon = faMap[protocol];\n            if (icon) {\n                this.$previewFaviconFa.toggleClass(`fa-globe ${icon}`);\n            }\n        } else if (window.location.hostname !== url.hostname) {\n            // Preview pages from current website only. External website will\n            // most of the time raise a CORS error. To avoid that error, we\n            // would need to fetch the page through the server (s2s), involving\n            // enduser fetching problematic pages such as illicit content.\n            this.$previewFaviconImg.attr({\n                'src': `https://www.google.com/s2/favicons?sz=16&domain=${encodeURIComponent(url)}`\n            }).removeClass('d-none');\n            this.$previewFaviconFa.addClass('d-none');\n        } else {\n            await this._keepLastPromise.add($.get(this.target.href)).then(content => {\n                const parser = new window.DOMParser();\n                const doc = parser.parseFromString(content, \"text/html\");\n\n                // Get\n                const favicon = doc.querySelector(\"link[rel~='icon']\");\n                const ogTitle = doc.querySelector(\"[property='og:title']\");\n                const title = doc.querySelector(\"title\");\n\n                // Set\n                if (favicon) {\n                    this.$previewFaviconImg.attr({'src': favicon.href}).removeClass('d-none');\n                    this.$previewFaviconFa.addClass('d-none');\n                }\n                if (ogTitle || title) {\n                    this.$urlLink.text(ogTitle ? ogTitle.getAttribute('content') : title.text.trim());\n                }\n                this.$fullUrl.removeClass('d-none').addClass('o_we_webkit_box');\n            }).catch(error => {\n                // HTML error codes should not prevent to edit the links, so we\n                // only check for proper instances of Error.\n                if (error instanceof Error) {\n                    return Promise.reject(error);\n                }\n            }).finally(() => {\n                this.$target.popover('update');\n            });\n        }\n    }\n    /**\n     * Resets the preview elements visibility. Particularly useful when changing\n     * the link url from an internal to an external one and vice versa.\n     *\n     * @private\n     * @param {string} url\n     */\n    _resetPreview(url) {\n        this.$previewFaviconImg.addClass('d-none');\n        this.$previewFaviconFa.removeClass('d-none fa-question-circle-o fa-envelope-o fa-phone').addClass('fa-globe');\n        this.$urlLink.add(this.$fullUrl).text(url || _t('No URL specified')).attr('href', url || null);\n        this.$fullUrl.addClass('d-none').removeClass('o_we_webkit_box');\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Opens the Link Dialog.\n     *\n     * TODO The editor instance should be reached a proper way\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onEditLinkClick(ev) {\n        ev.preventDefault();\n        this.wysiwyg.toggleLinkTools({\n            forceOpen: true,\n            link: this.$target[0],\n        });\n        ev.stopImmediatePropagation();\n        this.popover.hide();\n    }\n    /**\n     * Removes the link/anchor.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onRemoveLinkClick(ev) {\n        ev.preventDefault();\n        this.wysiwyg.removeLink();\n        ev.stopImmediatePropagation();\n        this.popover.hide();\n    }\n    /**\n     * Copy the link/anchor\n     * \n     * @private\n     * @param {Event} ev\n     */\n    async _onCopyLinkClick(ev) {\n        ev.preventDefault();\n        await browser.navigator.clipboard.writeText(this.target.href);\n        this.$copyLink.tooltip('hide');\n        this.notify(_t(\"Link copied to clipboard.\"), {\n            type: 'success',\n        });\n        this.popover.hide();\n    }\n}\n", "/** @odoo-module **/\n\nimport { Link } from \"./link\";\nimport { ColorPalette } from '@web_editor/js/wysiwyg/widgets/color_palette';\nimport weUtils from \"@web_editor/js/common/utils\";\nimport {\n    onWillUpdateProps,\n    onMounted,\n    onWillUnmount,\n    useState,\n} from \"@odoo/owl\";\nimport { normalizeCSSColor } from '@web/core/utils/colors';\n\n/**\n * Allows to customize link content and style.\n */\nexport class LinkTools extends Link {\n    static template = 'web_editor.LinkTools';\n    static props = {\n        ...Link.props,\n        wysiwyg: { type: Object },\n        $button: { type: Object },\n        onColorCombinationClassChange: { type: Function, optional: true },\n        onPreApplyLink: { type: Function, optional: true },\n        onPostApplyLink: { type: Function, optional: true },\n        onDestroy: { type: Function, optional: true },\n        getColorpickerTemplate: { type: Function, optional: true },\n    };\n    static defaultProps = {\n        ...Link.defaultProps,\n        onColorCombinationClassChange: () => {},\n        onPreApplyLink: () => {},\n        onPostApplyLink: () => {},\n        onDestroy: () => {},\n    };\n    static components = { ColorPalette };\n    colorpickerProps = useState({\n        'color': { selectedColor: undefined },\n        'background-color': { selectedColor: undefined },\n        'border-color': { selectedColor: undefined },\n    });\n    colorpickers = {\n        'color': { colorNames: null },\n        'background-color': { colorNames: null },\n        'border-color': { colorNames: null },\n    };\n    state = useState({\n        showLinkSizeRow: true,\n        showLinkCustomColor: true,\n        showLinkShapeRow: true,\n    });\n\n    setup() {\n        super.setup(...arguments);\n        onWillUpdateProps(async (newProps) => {\n            await this.mountedPromise;\n            this.$link = newProps.link ? $(newProps.link) : this.link;\n            this._setSelectOptionFromLink();\n            this._updateOptionsUI();\n            this._updateLabelInput();\n        });\n        onMounted(() => {\n            this._observer = new MutationObserver(records => {\n                if (records.some(record => record.type === 'attributes')) {\n                    this.state.url = this.props.link.getAttribute('href') || '';\n                    this._setUrl();\n                }\n                this._updateLabelInput();\n            });\n            this._observerOptions = {\n                subtree: true,\n                childList: true,\n                characterData: true,\n                attributes: true,\n                attributeFilter: ['href'],\n            };\n            this._observer.observe(this.props.link, this._observerOptions);\n        });\n        onWillUnmount(() => {\n            this._observer.disconnect();\n        });\n    }\n    /**\n     * @override\n     */\n    async _updateState() {\n        await super._updateState(...arguments);\n        // Keep track of each selected custom color and colorpicker.\n        this.customColors = {};\n        this.PREFIXES = {\n            'color': 'text-',\n            'background-color': 'bg-',\n        };\n    }\n    /**\n     * @override\n     */\n    async start() {\n        const ret = await super.start(...arguments);\n        this.$el.on('click', 'we-select we-button', this._onPickSelectOption.bind(this));\n        this.$el.on('click', 'we-checkbox', this._onClickCheckbox.bind(this));\n        this.$el.on('change', '.link-custom-color-border input', this._onChangeCustomBorderWidth.bind(this));\n        this.$el.on('keypress', '.link-custom-color-border input', this._onKeyPressCustomBorderWidth.bind(this));\n        this.$el.on('click', 'we-select [name=\"link_border_style\"] we-button', this._onBorderStyleSelectOption.bind(this));\n        this.$el.on('input', 'input[name=\"label\"]', this._onLabelInput.bind(this));\n\n        this._setSelectOptionFromLink();\n        this._updateOptionsUI();\n\n        if (!this.linkEl.href && this.state.url) {\n            // Link URL was deduced from label. Apply changes to DOM.\n            this.__onURLInput();\n        }\n\n        return ret;\n    }\n    destroy() {\n        if (!this.$el?.[0]) {\n            return super.destroy(...arguments);\n        }\n        const $contents = this.$link.contents();\n        if (shouldUnlink(this.$link[0], this.colorCombinationClass)) {\n            $contents.unwrap();\n        }\n        super.destroy(...arguments);\n        this.props.onDestroy();\n    }\n    applyLinkToDom() {\n        this._observer.disconnect();\n        this.props.onPreApplyLink();\n        super.applyLinkToDom(...arguments);\n        this.props.wysiwyg.odooEditor.historyStep();\n        this.props.onPostApplyLink();\n        this._observer.observe(this.props.link, this._observerOptions);\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    focusUrl() {\n        this.$el[0].scrollIntoView();\n        super.focusUrl(...arguments);\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n    _setSelectOptionFromLink() {\n        super._setSelectOptionFromLink(...arguments);\n        const link = this.$link[0];\n        const customStyleProps = ['color', 'background-color', 'background-image', 'border-width', 'border-style', 'border-color'];\n        const shapeClasses = ['btn-outline-primary', 'btn-outline-secondary', 'btn-fill-primary', 'btn-fill-secondary', 'rounded-circle', 'flat'];\n        if (customStyleProps.some(s => link.style[s]) || shapeClasses.some(c => link.classList.contains(c))) {\n            // Force custom style if style or shape exists on the link.\n            const customOption = this.$el[0].querySelector('[name=\"link_style_color\"] we-button[data-value=\"custom\"]');\n            this._setSelectOption($(customOption), true);\n        }\n    }\n    /**\n     * @override\n     */\n    _adaptPreview() {\n        var data = this._getData();\n        if (data === null) {\n            return;\n        }\n        this.applyLinkToDom(data);\n    }\n    /**\n     * @override\n     */\n    _doStripDomain() {\n        return this.$el.find('we-checkbox[name=\"do_strip_domain\"]').closest('we-button.o_we_checkbox_wrapper').hasClass('active');\n    }\n    /**\n     * @override\n     */\n    _getIsNewWindowFormRow() {\n        return this.$el.find('we-checkbox[name=\"is_new_window\"]').closest('we-row');\n    }\n    /**\n     * @override\n     */\n    _getLinkOptions() {\n        const options = [\n            'we-selection-items[name=\"link_style_color\"] > we-button',\n            'we-selection-items[name=\"link_style_size\"] > we-button',\n            'we-selection-items[name=\"link_style_shape\"] > we-button',\n        ];\n        return this.$el.find(options.join(','));\n    }\n    /**\n     * @override\n     */\n    _getLinkShape() {\n        return this.$el.find('we-selection-items[name=\"link_style_shape\"] we-button.active').data('value') || '';\n    }\n    /**\n     * @override\n     */\n    _getLinkSize() {\n        return this.$el.find('we-selection-items[name=\"link_style_size\"] we-button.active').data('value') || '';\n    }\n    /**\n     * @override\n     */\n    _getLinkType() {\n        return this.$el.find('we-selection-items[name=\"link_style_color\"] we-button.active').data('value') || '';\n    }\n    /**\n     * @override\n     */\n    _getLinkCustomTextColor() {\n        return this.customColors['color'];\n    }\n    /**\n     * @override\n     */\n    _getLinkCustomBorder() {\n        return this.customColors['border-color'];\n    }\n    /**\n     * @override\n     */\n    _getLinkCustomBorderWidth() {\n        return this.$el.find('.link-custom-color-border input').val() || '';\n    }\n    /**\n     * @override\n     */\n    _getLinkCustomBorderStyle() {\n        return this.$el.find('.link-custom-color-border we-button.active').data('value') || '';\n    }\n    /**\n     * @override\n     */\n    _getLinkCustomFill() {\n        return this.customColors['background-color'];\n    }\n    /**\n     * @override\n     */\n    _getLinkCustomClasses() {\n        let textClass = this.customColors['color'];\n        const colorPickerFg = this.colorpickers['color'].colorNames;\n        if (\n            !textClass ||\n            !colorPickerFg ||\n            !weUtils.computeColorClasses(colorPickerFg, 'text-').includes(textClass)\n        ) {\n            textClass = '';\n        }\n        let fillClass = this.customColors['background-color'];\n        const colorPickerBg = this.colorpickers['background-color'].colorNames;\n        if (\n            !fillClass ||\n            !colorPickerBg ||\n            !weUtils.computeColorClasses(colorPickerBg, 'bg-').includes(fillClass)\n        ) {\n            fillClass = '';\n        }\n        return ` ${textClass} ${fillClass}`;\n    }\n    /**\n     * @override\n     */\n    _isNewWindow(url) {\n        if (this.props.forceNewWindow) {\n            return this._isFromAnotherHostName(url);\n        } else {\n            return this.$el.find('we-checkbox[name=\"is_new_window\"]').closest('we-button.o_we_checkbox_wrapper').hasClass('active');\n        }\n    }\n    /**\n     * @override\n     */\n    _setSelectOption($option, active) {\n        $option.toggleClass('active', active);\n        if (active) {\n            $option.closest('we-select').find('we-toggler').text($option.text());\n            // ensure only one option is active in the dropdown\n            $option.siblings('we-button').removeClass(\"active\");\n        }\n    }\n    /**\n     * @override\n     */\n    _updateOptionsUI() {\n        const el = this.$el[0].querySelector('[name=\"link_style_color\"] we-button.active');\n        if (el) {\n            this.colorCombinationClass = el.dataset.value;\n            // Hide the size option if the link is an unstyled anchor.\n            this.state.showLinkSizeRow = Boolean(this.colorCombinationClass);\n\n            // // Show custom colors and shape only for Custom style.\n            this.state.showLinkCustomColor = el.dataset.value === 'custom';\n            this.state.showLinkShapeRow = el.dataset.value === 'custom';\n\n            this.props.onColorCombinationClassChange(this.colorCombinationClass);\n\n            this._updateColorpicker('color');\n            this._updateColorpicker('background-color');\n            this._updateColorpicker('border-color');\n\n            const borderWidth = this.linkEl.style['border-width'];\n            const numberAndUnit = weUtils.getNumericAndUnit(borderWidth);\n            this.$el.find('.link-custom-color-border input').val(numberAndUnit ? numberAndUnit[0] : \"1\");\n            let borderStyle = this.linkEl.style['border-style'];\n            if (!borderStyle || borderStyle === 'none') {\n                borderStyle = 'solid';\n            }\n            const $activeBorderStyleButton = this.$el.find(`.link-custom-color-border [name=\"link_border_style\"] we-button[data-value=\"${borderStyle}\"]`);\n            $activeBorderStyleButton.addClass('active');\n            $activeBorderStyleButton.siblings('we-button').removeClass(\"active\");\n            const $activeBorderStyleToggler = $activeBorderStyleButton.closest('we-select').find('we-toggler');\n            $activeBorderStyleToggler.empty();\n            $activeBorderStyleButton.find('div').clone().appendTo($activeBorderStyleToggler);\n        }\n    }\n    /**\n     * Updates the colorpicker associated to a given property - updated with its selected color.\n     *\n     * @private\n     * @param {string} cssProperty\n     */\n    _updateColorpicker(cssProperty) {\n        const prefix = this.PREFIXES[cssProperty];\n\n        // Update selected color.\n        const colorNames = this.colorpickers[cssProperty].colorNames;\n        let color = this.linkEl.style[cssProperty];\n        const colorClasses = prefix ? weUtils.computeColorClasses(colorNames, prefix) : [];\n        const colorClass = prefix && weUtils.getColorClass(this.linkEl, colorNames, prefix);\n        const isColorClass = colorClasses.includes(colorClass);\n        if (isColorClass) {\n            color = colorClass;\n        } else if (cssProperty === 'background-color') {\n            const gradientColor = this.linkEl.style['background-image'];\n            if (weUtils.isColorGradient(gradientColor)) {\n                color = gradientColor;\n            }\n        }\n        this.customColors[cssProperty] = color;\n        if (cssProperty === 'border-color') {\n            // Highlight matching named color if any.\n            const colorName = colorNames[normalizeCSSColor(color)];\n            this.colorpickerProps[cssProperty].selectedColor = colorName || color;\n        } else {\n            this.colorpickerProps[cssProperty].selectedColor = isColorClass ? color.replace(prefix, '') : color;\n        }\n\n        // Update preview.\n        const $colorPreview = this.$el.find('.link-custom-color-' + (cssProperty === 'border-color' ? 'border' : cssProperty === 'color' ? 'text' : 'fill') + ' .o_we_color_preview');\n        const previewClasses = weUtils.computeColorClasses(colorNames, 'bg-');\n        $colorPreview[0].classList.remove(...previewClasses);\n        if (isColorClass) {\n            $colorPreview.css('background-color', `var(--we-cp-${color.replace(prefix, '')}`);\n            $colorPreview.css('background-image', '');\n        } else {\n            $colorPreview.css('background-color', weUtils.isColorGradient(color) ? 'rgba(0, 0, 0, 0)' : color);\n            $colorPreview.css('background-image', weUtils.isColorGradient(color) ? color : '');\n        }\n    }\n\n    /**\n     * @private\n     */\n    _onColorpaletteSetColorNames(cssProperty, colorNames) {\n        this.colorpickers[cssProperty].colorNames = colorNames;\n    }\n    /**\n     * @private\n     */\n    _onColorpaletteColorPicked(cssProperty, params) {\n        // Reset color styles in link content to make sure new color is not hidden.\n        // Only done when applied to avoid losing state during preview.\n        const selection = window.getSelection();\n        const range = document.createRange();\n        range.selectNodeContents(this.linkEl);\n        selection.removeAllRanges();\n        selection.addRange(range);\n        this.props.wysiwyg.odooEditor.execCommand('applyColor', '', 'color');\n        this.props.wysiwyg.odooEditor.execCommand('applyColor', '', 'backgroundColor');\n\n        this._colorpaletteApply(cssProperty, params);\n\n        this.props.wysiwyg.odooEditor.historyStep();\n        this._updateOptionsUI();\n    }\n    /**\n     * @private\n     */\n    _colorpaletteApply(cssProperty, params) {\n        const prefix = this.PREFIXES[cssProperty];\n        let color = params.color;\n        const colorNames = this.colorpickers[cssProperty].colorNames;\n        const colorClasses = prefix ? weUtils.computeColorClasses(colorNames, prefix) : [];\n        const colorClass = `${prefix}${color}`;\n        if (colorClasses.includes(colorClass)) {\n            color = colorClass;\n        } else if (colorNames.includes(color)) {\n            // Store as color value.\n            color = weUtils.getCSSVariableValue(color);\n        }\n        this.customColors[cssProperty] = color;\n        this.applyLinkToDom(this._getData());\n    }\n    /**\n     * Updates the label input with the DOM content of the link.\n     *\n     * @private\n     */\n    _updateLabelInput() {\n        if (this.$el) {\n            this.$el[0].querySelector('#o_link_dialog_label_input').value =\n                weUtils.getLinkLabel(this.linkEl);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    _onClickCheckbox(ev) {\n        const $target = $(ev.target);\n        $target.closest('we-button.o_we_checkbox_wrapper').toggleClass('active');\n        this._adaptPreview();\n    }\n    _onPickSelectOption(ev) {\n        const $target = $(ev.target);\n        if ($target.closest('[name=\"link_border_style\"]').length) {\n            return;\n        }\n        const $select = $target.closest('we-select');\n        $select.find('we-selection-items we-button').toggleClass('active', false);\n        this._setSelectOption($target, true);\n        this._updateOptionsUI();\n        this._adaptPreview();\n    }\n    /**\n     * Sets the border width on the link.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onChangeCustomBorderWidth(ev) {\n        const value = ev.target.value;\n        if (parseInt(value) >= 0) {\n            this.$link.css('border-width', value + 'px');\n        }\n    }\n    /**\n     * Sets the border width on the link when enter is pressed.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onKeyPressCustomBorderWidth(ev) {\n        if (ev.key === \"Enter\") {\n            this._onChangeCustomBorderWidth(ev);\n        }\n    }\n    /**\n     * Sets the border style on the link.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onBorderStyleSelectOption(ev) {\n        const value = ev.currentTarget.dataset.value;\n        if (value) {\n            this.$link.css('border-style', value);\n            const $target = $(ev.currentTarget);\n            const $activeBorderStyleToggler = $target.closest('we-select').find('we-toggler');\n            $activeBorderStyleToggler.empty();\n            $target.find('div').clone().appendTo($activeBorderStyleToggler);\n            // Ensure only one option is active in the dropdown.\n            $target.addClass('active');\n            $target.siblings('we-button').removeClass(\"active\");\n            this.props.wysiwyg.odooEditor.historyStep();\n        }\n    }\n    /**\n     * @override\n     */\n    __onURLInput() {\n        super.__onURLInput(...arguments);\n        this.props.wysiwyg.odooEditor.historyPauseSteps('_onURLInput');\n        this._syncContent();\n        this._adaptPreview();\n        this.props.wysiwyg.odooEditor.historyUnpauseSteps('_onURLInput');\n    }\n    /**\n     * Updates the DOM content of the link with the input value.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onLabelInput(ev) {\n        const data = this._getData();\n        if (!data) {\n            return;\n        }\n        this._observer.disconnect();\n        // Force update of link's content with new data using 'force: true'.\n        // Without this, no update if input is same as original text.\n        this._updateLinkContent(this.$link, data, {force: true});\n        this._observer.observe(this.props.link, this._observerOptions);\n    }\n    /* If content is equal to previous URL, update it to match current URL.\n     *\n     * @private\n     */\n    _syncContent() {\n        const previousUrl = this.linkEl.getAttribute('href');\n        if (!previousUrl) {\n            return;\n        }\n        const protocolLessPrevUrl = previousUrl.replace(/^https?:\\/\\/|^mailto:/i, '');\n        const content = weUtils.getLinkLabel(this.linkEl);\n        if (content === previousUrl || content === protocolLessPrevUrl) {\n            const newUrl = this.linkComponentWrapperRef.el.querySelector('input[name=\"url\"]').value;\n            const protocolLessNewUrl = newUrl.replace(/^https?:\\/\\/|^mailto:/i, '')\n            const newContent = content.replace(protocolLessPrevUrl, protocolLessNewUrl);\n            this.linkComponentWrapperRef.el.querySelector('#o_link_dialog_label_input').value = newContent;\n            this._onLabelInput();\n        }\n    }\n}\n\nexport function shouldUnlink(link, colorCombinationClass) {\n    return !link.getAttribute('href') && !colorCombinationClass;\n}\n", "/** @odoo-module **/\n\nimport { useActiveElement, utils as uiUtils } from \"@web/core/ui/ui_service\";\nimport { ColorPalette } from \"@web_editor/js/wysiwyg/widgets/color_palette\";\n\nimport {\n    Component,\n    onMounted,\n    useRef,\n} from \"@odoo/owl\";\n\nexport class Toolbar extends Component {\n    static template = 'web_editor.toolbar';\n    static components = { ColorPalette };\n    static props = {\n        dropDirection: { type: String, optional: true },\n\n        showChecklist: { type: Boolean, optional: true },\n        showColors: { type: Boolean, optional: true },\n        showFontSize: { type: Boolean, optional: true },\n        useFontSizeInput: { type: Boolean, optional: true },\n        showHistory: { type: Boolean, optional: true },\n\n        showStyle: { type: Boolean, optional: true },\n        showJustify: { type: Boolean, optional: true },\n        showList: { type: Boolean, optional: true },\n        showLink: { type: Boolean, optional: true },\n\n        showImageShape: { type: Boolean, optional: true },\n        showImagePadding: { type: Boolean, optional: true },\n        showImageWidth: { type: Boolean, optional: true },\n        showImageEdit: { type: Boolean, optional: true },\n\n        showHeading1: { type: Boolean, optional: true },\n        showHeading2: { type: Boolean, optional: true },\n        showHeading3: { type: Boolean, optional: true },\n        showHeading4: { type: Boolean, optional: true },\n        showHeading5: { type: Boolean, optional: true },\n        showHeading6: { type: Boolean, optional: true },\n\n        onColorpaletteDropdownShow: { type: Function, optional: true },\n        onColorpaletteDropdownHide: { type: Function, optional: true },\n        textColorPaletteProps: { type: Object },\n        backgroundColorPaletteProps: { type: Object },\n\n        slots: { type: Object, optional: true },\n    };\n    static defaultProps = {\n        dropDirection: 'dropdown',\n\n        showChecklist: true,\n        showColors: true,\n        showFontSize: true,\n        useFontSizeInput: false,\n        showHistory: false,\n\n        showStyle: true,\n        showJustify: true,\n        showList: true,\n        showLink: true,\n\n        showImageShape: true,\n        showImagePadding: true,\n        showImageWidth: true,\n        showImageEdit: true,\n\n        showHeading1: true,\n        showHeading2: true,\n        showHeading3: true,\n        showHeading4: true,\n        showHeading5: true,\n        showHeading6: true,\n\n        onColorpaletteDropdownShow: () => {},\n        onColorpaletteDropdownHide: () => {},\n    };\n\n    colorDropdownRef = {\n        text: useRef(\"textColorpickerDropdown\"),\n        background: useRef(\"backgroundColorpaletteDropdown\"),\n    }\n\n    setup() {\n        useActiveElement(\"toolbarRef\");\n        onMounted(() => {\n            for (const [colorType, ref] of Object.entries(this.colorDropdownRef)) {\n                const dropdown = ref.el;\n                if (!dropdown) continue;\n                // If the element is within an iframe, access the jquery loaded in\n                // the iframe because it is the one who will trigger the dropdown\n                // events (i.e hide.bs.dropdown and show.bs.dropdown).\n                const $ = dropdown.ownerDocument.defaultView.$;\n                const $dropdown = $(dropdown);\n                $dropdown.on('show.bs.dropdown', () => {\n                    this.props.onColorpaletteDropdownShow(colorType);\n                });\n                $dropdown.on('hide.bs.dropdown', (ev) => this.props.onColorpaletteDropdownHide(ev));\n            }\n        });\n    }\n\n    isMobile() {\n        return uiUtils.isSmall();\n    }\n}\n", "/** @odoo-module **/\n\n// jQuery extensions\n$.extend($.expr[':'], {\n    o_editable: function (node, i, m) {\n        while (node) {\n            if (node.className && typeof node.className === \"string\") {\n                if (node.className.indexOf('o_not_editable') !== -1) {\n                    return false;\n                }\n                if (node.className.indexOf('o_editable') !== -1) {\n                    return true;\n                }\n            }\n            node = node.parentNode;\n        }\n        return false;\n    },\n});\n\nfunction firstChild(node) {\n    while (node.firstChild) {\n        node = node.firstChild;\n    }\n    return node;\n}\nfunction lastChild(node) {\n    while (node.lastChild) {\n        node = node.lastChild;\n    }\n    return node;\n}\nfunction nodeLength(node) {\n    if (node.nodeType === Node.TEXT_NODE) {\n        return node.nodeValue.length;\n    } else {\n        return node.childNodes.length;\n    }\n}\n\n$.fn.extend({\n    focusIn: function () {\n        if (this.length) {\n            const selection = this[0].ownerDocument.getSelection();\n            selection.removeAllRanges();\n\n            const range = new Range();\n            const node = firstChild(this[0]);\n            range.setStart(node, 0);\n            range.setEnd(node, 0);\n            selection.addRange(range);\n        }\n        return this;\n    },\n    focusInEnd: function () {\n        if (this.length) {\n            const selection = this[0].ownerDocument.getSelection();\n            selection.removeAllRanges();\n\n            const range = new Range();\n            const node = lastChild(this[0]);\n            const length = nodeLength(node);\n\n            range.setStart(node, length);\n            range.setEnd(node, length);\n            selection.addRange(range);\n        }\n        return this;\n    },\n    selectContent: function () {\n        if (this.length && !this[0].hasChildNodes()) {\n            return this.selectElement();\n        }\n        if (this.length) {\n            const selection = this[0].ownerDocument.getSelection();\n            selection.removeAllRanges();\n\n            const range = new Range();\n            range.setStart(this[0].firstChild, 0);\n            range.setEnd(this[0].lastChild, this[0].lastChild.length);\n            selection.addRange(range);\n        }\n        return this;\n    },\n    selectElement: function () {\n        if (this.length) {\n            const selection = this[0].ownerDocument.getSelection();\n            selection.removeAllRanges();\n\n            const element = this[0];\n            const parent = element.parentNode;\n            const offsetStart = Array.from(parent.childNodes).indexOf(element);\n\n            const range = new Range();\n            range.setStart(parent, offsetStart);\n            range.setEnd(parent, offsetStart + 1);\n            selection.addRange(range);\n        }\n        return this;\n    },\n});\n", "/** @odoo-module **/\n\nimport { session } from \"@web/session\";\nimport { MediaDialog } from \"@web_editor/components/media_dialog/media_dialog\";\nimport { VideoSelector } from \"@web_editor/components/media_dialog/video_selector\";\nimport { browser } from \"@web/core/browser/browser\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport customColors from \"@web_editor/js/editor/custom_colors\";\nimport { localization } from \"@web/core/l10n/localization\";\nimport * as OdooEditorLib from \"@web_editor/js/editor/odoo-editor/src/OdooEditor\";\nimport { Toolbar } from \"@web_editor/js/editor/toolbar\";\nimport { LinkPopoverWidget } from '@web_editor/js/wysiwyg/widgets/link_popover_widget';\nimport { AltDialog } from '@web_editor/js/wysiwyg/widgets/alt_dialog';\nimport { ChatGPTPromptDialog } from '@web_editor/js/wysiwyg/widgets/chatgpt_prompt_dialog';\nimport { ChatGPTAlternativesDialog } from '@web_editor/js/wysiwyg/widgets/chatgpt_alternatives_dialog';\nimport { ImageCrop } from '@web_editor/js/wysiwyg/widgets/image_crop';\n\nimport * as wysiwygUtils from \"@web_editor/js/common/wysiwyg_utils\";\nimport weUtils from \"@web_editor/js/common/utils\";\nimport { isSelectionInSelectors, peek } from '@web_editor/js/editor/odoo-editor/src/utils/utils';\nimport { PeerToPeer, RequestError } from \"@web_editor/js/wysiwyg/PeerToPeer\";\nimport { uniqueId } from \"@web/core/utils/functions\";\nimport { groupBy } from \"@web/core/utils/arrays\";\nimport { debounce } from \"@web/core/utils/timing\";\nimport { registry } from \"@web/core/registry\";\nimport { FileViewer } from \"@web/core/file_viewer/file_viewer\";\nimport { isMobileOS } from \"@web/core/browser/feature_detection\";\nimport { Mutex } from \"@web/core/utils/concurrency\";\nimport { AlertDialog, ConfirmationDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\nimport { _t } from \"@web/core/l10n/translation\";\nimport { ConflictDialog } from \"./conflict_dialog\";\nimport { getOrCreateLink } from \"./widgets/link\";\nimport { shouldUnlink } from '@web_editor/js/wysiwyg/widgets/link_tools';\nimport { LinkDialog } from \"./widgets/link_dialog\";\nimport {\n    Component,\n    useRef,\n    useState,\n    onWillStart,\n    onMounted,\n    onWillDestroy,\n    onWillUpdateProps,\n    markup,\n    status,\n} from \"@odoo/owl\";\nimport { isCSSColor } from '@web/core/utils/colors';\nimport { EmojiPicker } from '@web/core/emoji_picker/emoji_picker';\nimport { Tooltip } from \"@web/core/tooltip/tooltip\";\n\nconst OdooEditor = OdooEditorLib.OdooEditor;\nconst getDeepRange = OdooEditorLib.getDeepRange;\nconst getInSelection = OdooEditorLib.getInSelection;\nconst isProtected = OdooEditorLib.isProtected;\nconst rgbToHex = OdooEditorLib.rgbToHex;\nconst preserveCursor = OdooEditorLib.preserveCursor;\nconst closestElement = OdooEditorLib.closestElement;\nconst setSelection = OdooEditorLib.setSelection;\nconst endPos = OdooEditorLib.endPos;\nconst hasValidSelection = OdooEditorLib.hasValidSelection;\nconst parseHTML = OdooEditorLib.parseHTML;\nconst closestBlock = OdooEditorLib.closestBlock;\nconst getRangePosition = OdooEditorLib.getRangePosition;\nconst fillEmpty = OdooEditorLib.fillEmpty;\nconst isVisible = OdooEditorLib.isVisible;\n\nfunction getJqueryFromDocument(doc) {\n    if (doc.defaultView && doc.defaultView.$) {\n        return doc.defaultView.$;\n    } else {\n        const _jquery = window.$;\n        return (...args) => {\n            if (args.length <= 2 && typeof args[0] === \"string\") {\n                return _jquery(args[0], args[1] || doc);\n            } else {\n                return _jquery(...args)\n            }\n        }\n    }\n}\n\nvar id = 0;\nconst basicMediaSelector = 'img, .fa, .o_image, .media_iframe_video';\n// (see isImageSupportedForStyle).\nconst mediaSelector = basicMediaSelector.split(',').map(s => `${s}:not([data-oe-xpath])`).join(',');\n\n// Time to consider a user offline in ms. This fixes the problem of the\n// navigator closing rtc connection when the mac laptop screen is closed.\nconst CONSIDER_OFFLINE_TIME = 1000;\n// Check wether the computer could be offline. This fixes the problem of the\n// navigator closing rtc connection when the mac laptop screen is closed.\n// This case happens on Mac OS on every browser when the user close it's laptop\n// screen. At first, the os/navigator closes all rtc connection, and after some\n// times, the os/navigator internet goes offline without triggering an\n// offline/online event.\n// However, if the laptop screen is open and the connection is properly remove\n// (e.g. disconnect wifi), the event is properly triggered.\nconst CHECK_OFFLINE_TIME = 1000;\nconst PTP_CLIENT_DISCONNECTED_STATES = [\n    'failed',\n    'closed',\n    'disconnected',\n];\n\n// Time in ms to wait when trying to aggregate snapshots from other peers and\n// potentially recover from a missing step before trying to apply those\n// snapshots or recover from the server.\nconst PTP_MAX_RECOVERY_TIME = 500;\n\nconst REQUEST_ERROR = Symbol('REQUEST_ERROR');\n\n// this is a local cache for ice server descriptions\nlet ICE_SERVERS = null;\n\nlet fileViewerId = 0;\n\nexport class Wysiwyg extends Component {\n    static template = 'web_editor.Wysiwyg';\n    static components = { MediaDialog, VideoSelector, Toolbar, ImageCrop };\n    static props = {\n        options: Object,\n        startWysiwyg: { type: Function, optional: true },\n        editingValue: { type: String, optional: true },\n    };\n    elRef = useRef(\"el\");\n    toolbarRef = useRef(\"toolbar\");\n    imageCropRef = useRef(\"imageCrop\");\n    colorPalettesProps = {\n        text: useState({\n            resetTabCount: 0,\n        }),\n        background: useState({\n            resetTabCount: 0,\n        }),\n    }\n    imageCropProps = useState({\n        rpc: this._serviceRpc.bind(this),\n        showCount: 0,\n        media: undefined,\n        mimetype: undefined,\n    });\n    state = useState({\n        linkToolProps: false,\n        showToolbar: true,\n        toolbarProps: {},\n    });\n\n    setup() {\n        this.orm = useService('orm');\n        this.rpc = useService('rpc');\n        this.getColorPickerTemplateService = useService('get_color_picker_template');\n        this.notification = useService(\"notification\");\n        this.popover = useService(\"popover\");\n        this.busService = this.env.services.bus_service;\n\n        const getColorPickedHandler = (colorType) => {\n            return (params) => {\n                if (this.hadNonCollapsedSelectionBeforeColorpicker) {\n                    this.odooEditor.historyResetLatestComputedSelection(true);\n                }\n                // Unstash the mutations now that the color is picked.\n                this.odooEditor.historyUnstash();\n                this._processAndApplyColor(colorType, params.color);\n                // Deselect tables so the applied color can be seen\n                // without using `!important` (otherwise the selection\n                // hides it).\n                if (this.odooEditor.deselectTable() && hasValidSelection(this.odooEditor.editable)) {\n                    this.odooEditor.document.getSelection().collapseToStart();\n                }\n                this._updateEditorUI(this.lastMediaClicked && { target: this.lastMediaClicked });\n            };\n        }\n\n        const getColorHoverHandler = (colorType) => {\n            return (props) => {\n                if (this.hadNonCollapsedSelectionBeforeColorpicker) {\n                    this.odooEditor.historyResetLatestComputedSelection(true);\n                }\n                this.odooEditor.historyPauseSteps();\n                try {\n                    this._processAndApplyColor(colorType, props.color, true);\n                    this.odooEditor._computeHistorySelection();\n                } finally {\n                    this.odooEditor.historyUnpauseSteps();\n                }\n            }\n        };\n\n        const colorPaletteCommonOptions = {\n            excluded: ['transparent_grayscale'],\n            document: this.props.options.document,\n            selectedTab: 'theme-colors',\n            withGradients: true,\n            onColorLeave: () => {\n                // We need to prevent rollback in case the seclection is in unremovable\n                this.odooEditor.withoutRollback(() => this.odooEditor.historyRevertCurrentStep());\n                // Compute the selection to ensure it's preserved between\n                // selectionchange events in case this gets triggered multiple\n                // times quickly.\n                this.odooEditor._computeHistorySelection();\n            },\n            onInputEnter: (ev) => {\n                const pickergroup = ev.target.closest('.colorpicker-group');\n                $(pickergroup.querySelector('.dropdown-toggle')).dropdown('hide');\n            },\n\n            getTemplate: this.getColorpickerTemplate.bind(this),\n            getEditableCustomColors: () => {\n                if (!this.$editable) {\n                    return [];\n                }\n                return [...this.$editable[0].querySelectorAll('[style*=\"color\"]')].map(el => {\n                    return [el.style.color, el.style.backgroundColor];\n                }).flat();\n            },\n        };\n        onWillStart(() => {\n            this.init();\n\n            Object.assign(this.colorPalettesProps.text, colorPaletteCommonOptions, {\n                document: this.options.document,\n                onColorPicked: getColorPickedHandler('text'),\n                onCustomColorPicked: getColorPickedHandler('text'),\n                onColorHover: getColorHoverHandler('text'),\n                onColorpaletteTabChange: this.getColorPaletteTabChangeHandler('text').bind(this),\n            });\n            Object.assign(this.colorPalettesProps.background, colorPaletteCommonOptions, {\n                document: this.options.document,\n                onColorPicked: getColorPickedHandler('background'),\n                onCustomColorPicked: getColorPickedHandler('background'),\n                onColorHover: getColorHoverHandler('background'),\n                onColorpaletteTabChange: this.getColorPaletteTabChangeHandler('background').bind(this),\n            });\n\n            this._setToolbarProps();\n        });\n        onMounted(async () => {\n            this.el = this.elRef.el\n            this.$el = $(this.elRef.el);\n            this._renderElement();\n            if (this.props.startWysiwyg) {\n                await this.props.startWysiwyg(this);\n            } else {\n                await this.startEdition();\n            }\n        });\n        onWillDestroy(() => {\n            this.destroy();\n        });\n        onWillUpdateProps((newProps) => {\n            this.options = this._getEditorOptions(newProps.options);\n            this._setToolbarProps();\n\n            const lastValue = String(this.props.options.value || '');\n            const lastRecordInfo = this.props.options.recordInfo;\n            const lastCollaborationChannel = this.props.options.collaborationChannel;\n            const newValue = String(newProps.options.value || '');\n            const newRecordInfo = newProps.options.recordInfo;\n            const newCollaborationChannel = newProps.options.collaborationChannel;\n\n            const isDifferentRecord =\n                JSON.stringify(lastRecordInfo) !== JSON.stringify(newRecordInfo) ||\n                JSON.stringify(lastCollaborationChannel) !== JSON.stringify(newCollaborationChannel);\n            const isDiscardedRecord = !isDifferentRecord && newProps.options.record && !newProps.options.record.dirty;\n\n            if (\n                (\n                    stripHistoryIds(newValue) !== stripHistoryIds(newProps.editingValue) &&\n                    stripHistoryIds(lastValue) !== stripHistoryIds(newValue)\n                ) ||\n                    isDifferentRecord\n                )\n            {\n                if (isDifferentRecord || isDiscardedRecord) {\n                    this.resetEditor(newValue, newProps.options);\n                } else {\n                    this.setValue(newValue);\n                }\n                this.env.onWysiwygReset && this.env.onWysiwygReset();\n            }\n        });\n    }\n\n    defaultOptions = {\n        lang: 'odoo',\n        colors: customColors,\n        recordInfo: {context: {}},\n        document: document,\n        allowCommandVideo: true,\n        allowCommandImage: true,\n        allowCommandLink: true,\n        insertParagraphAfterColumns: true,\n        onHistoryResetFromSteps: () => {},\n        autostart: true,\n        dropImageAsAttachment: true,\n        editorPlugins: [],\n        useResponsiveFontSizes: true,\n        showResponsiveFontSizesBadges: false,\n        showExtendedTextStylesOptions: false,\n        getCSSVariableValue: weUtils.getCSSVariableValue,\n        convertNumericToUnit: weUtils.convertNumericToUnit,\n    };\n    init() {\n        this.id = ++id;\n        this.options = this._getEditorOptions(this.props.options);\n        this.saving_mutex = new Mutex();\n        // Keeps track of color palettes per event name.\n        this.colorpickers = {};\n        this._onDocumentMousedown = this._onDocumentMousedown.bind(this);\n        this._onBlur = this._onBlur.bind(this);\n        this._onScroll = this._onScroll.bind(this);\n        this.customizableLinksSelector = 'a'\n            + ':not([data-bs-toggle=\"tab\"])'\n            + ':not([data-bs-toggle=\"collapse\"])'\n            + ':not([data-bs-toggle=\"dropdown\"])'\n            + ':not(.dropdown-item)';\n        // navigator.onLine is sometimes a false positive, this._isOnline use\n        // more heuristics to bypass the limitation.\n        this._isOnline = true;\n        this._signalOnline = this._signalOnline.bind(this);\n        this.tooltipTimeouts = [];\n        Wysiwyg.activeWysiwygs.add(this);\n        this._joinPeerToPeer = this._joinPeerToPeer.bind(this);\n    }\n    /**\n     *\n     * @override\n     */\n    async start() {\n        // If this widget is started from the OWL legacy component, at the time\n        // of start, the $el is not in the document yet. Some instruction in the\n        // start rely on the $el being in the document at that time, including\n        // code for the collaboration (for adding cursors) or the iframe loading\n        // in mass_mailing.\n        if (this.options.autostart) {\n            return this.startEdition();\n        }\n    }\n    async startEdition() {\n        const self = this;\n\n        const options = this.options;\n\n        this.$editable ??= this.$el;\n        if (options.value) {\n            this.$editable.html(options.value);\n        }\n\n        this._isDocumentStale = false;\n\n        // Each time a reset of the document is triggered, it is assigned a\n        // unique identifier. Since resetting the editor involves asynchronous\n        // requests, it is possible that subsequent resets are triggered before\n        // the previous one is complete. This property identifies the latest\n        // reset and can be compared against to cancel the processing of late\n        // responses from previous resets.\n        this._lastCollaborationResetId = 0;\n        // This ID correspond to the peer that initiated the document and set\n        // the initial oid for all nodes in the tree. It is not the same as\n        // document that had a step id at some point. If a step comes from a\n        // different history, we should not apply it.\n        this._historyShareId = Math.floor(Math.random() * Math.pow(2,52)).toString();\n\n        // The ID is the latest step ID that the server knows through\n        // `data-last-history-steps`. We cannot save to the server if we do not\n        // have that ID in our history ids as it means that our version is\n        // stale.\n        this._serverLastStepId = options.value && this._getLastHistoryStepId(options.value);\n\n        this.$editable.data('wysiwyg', this);\n        this.$editable.data('oe-model', options.recordInfo.res_model);\n        this.$editable.data('oe-id', options.recordInfo.res_id);\n        document.addEventListener('mousedown', this._onDocumentMousedown, true);\n        this._bindOnBlur();\n\n        this.toolbarEl = this.toolbarRef.el.firstChild;\n\n        this.imageCropEL = this.imageCropRef.el.firstChild;\n        options.document.body.append(this.imageCropEL);\n\n        const powerboxOptions = this._getPowerboxOptions();\n\n        let editorCollaborationOptions;\n        if (this._isCollaborationEnabled(options)) {\n            this._currentClientId = this._generateClientId();\n            editorCollaborationOptions = this.setupCollaboration(options.collaborationChannel);\n            if (this.options.collaborativeTrigger === 'start') {\n                this._joinPeerToPeer();\n            } else if (this.options.collaborativeTrigger === 'focus') {\n                // Wait until editor is focused to join the peer to peer network.\n                this.$editable[0].addEventListener('focus', this._joinPeerToPeer);\n            }\n        }\n\n        const getYoutubeVideoElement = async (url) => {\n            const { embed_url: src } = await this._serviceRpc(\n                '/web_editor/video_url/data',\n                { video_url: url },\n            );\n            const [savedVideo] = VideoSelector.createElements([{src}]);\n            savedVideo.classList.add(...VideoSelector.mediaSpecificClasses);\n            return savedVideo;\n        };\n\n        weUtils.setEditableDocument(this.options.document);\n\n        const _getContentEditableAreas = this.options.getContentEditableAreas;\n        this.odooEditor = new OdooEditor(this.$editable[0], Object.assign({\n            _t: _t,\n            toolbar: this.toolbarEl,\n            document: this.options.document,\n            autohideToolbar: !!this.options.autohideToolbar,\n            isRootEditable: this.options.isRootEditable,\n            onPostSanitize: this._onPostSanitize.bind(this),\n            placeholder: this.options.placeholder,\n            powerboxFilters: this.options.powerboxFilters || [],\n            showEmptyElementHint: this.options.showEmptyElementHint,\n            controlHistoryFromDocument: this.options.controlHistoryFromDocument,\n            initialHistoryId: this._serverLastStepId,\n            // TODO other places in this file call this.options.getContentEditableAreas\n            // without the extension here. It does not seem to be a problem (it\n            // was like that before o_editor_banner elements were considered\n            // here), but we might want to review that.\n            getContentEditableAreas: (...args) => {\n                const areaEls = _getContentEditableAreas?.(...args) || [];\n                const bannerEls = this.$editable[0].querySelectorAll('.o_editor_banner > div');\n                return [...areaEls, ...bannerEls];\n            },\n            getReadOnlyAreas: this.options.getReadOnlyAreas,\n            getUnremovableElements: this.options.getUnremovableElements,\n            defaultLinkAttributes: this.options.userGeneratedContent ? {rel: 'ugc' } : {},\n            allowCommandVideo: this.options.allowCommandVideo,\n            allowInlineAtRoot: this.options.allowInlineAtRoot,\n            getYoutubeVideoElement: getYoutubeVideoElement,\n            getContextFromParentRect: options.getContextFromParentRect,\n            getScrollContainerRect: () => {\n                if (!this.scrollContainer || !this.scrollContainer.getBoundingClientRect) {\n                    this.scrollContainer = document.querySelector('.o_action_manager') || document.body;\n                }\n                return this.scrollContainer.getBoundingClientRect();\n            },\n            getPowerboxElement: () => {\n                const selection = (this.options.document || document).getSelection();\n                if (selection.isCollapsed && selection.rangeCount) {\n                    const baseNode = closestElement(selection.anchorNode, 'P:not([t-field]), DIV:not([t-field])');\n                    const fieldContainer = closestElement(selection.anchorNode, '[data-oe-field]');\n                    if (!baseNode ||\n                        (\n                            fieldContainer &&\n                            !(\n                                fieldContainer.getAttribute('data-oe-field') === 'arch' ||\n                                fieldContainer.getAttribute('data-oe-type') === 'html'\n                            )\n                        )) {\n                        return false;\n                    }\n                    return baseNode;\n                }\n            },\n            isHintBlacklisted: node => {\n                return (node.classList && node.classList.contains('nav-item')) || (\n                    node.hasAttribute && (\n                        node.hasAttribute('data-target') ||\n                        node.hasAttribute('data-oe-model')\n                    )\n                );\n            },\n            filterMutationRecords: (records) => {\n                return records.filter((record) => {\n                    if (record.type === 'attributes'\n                            && record.attributeName === 'aria-describedby') {\n                        const value = (record.oldValue || record.target.getAttribute(record.attributeName));\n                        if (value && value.startsWith('popover')) {\n                            // TODO maybe we should just always return false at\n                            // this point: never considering the\n                            // aria-describedby attribute for any tooltip?\n                            const popoverData = Popover.getInstance(record.target);\n                            return !popoverData\n                                || popoverData.tip.id !== value\n                                || !popoverData.tip.classList.contains('o_edit_menu_popover');\n                        }\n                    }\n                    return !(\n                        // TODO should probably not check o_header_standard\n                        // here, since it is a website class ?\n                        (record.target.classList && record.target.classList.contains('o_header_standard')) ||\n                        (record.type === 'attributes' && record.attributeName === 'data-last-history-steps')\n                    );\n                });\n            },\n            preHistoryUndo: () => {\n                this.destroyLinkTools();\n            },\n            beforeAnyCommand: this._beforeAnyCommand.bind(this),\n            commands: powerboxOptions.commands,\n            categories: powerboxOptions.categories,\n            plugins: options.editorPlugins,\n            direction: options.direction || localization.direction || 'ltr',\n            collaborationClientAvatarUrl: this._getCollaborationClientAvatarUrl(),\n            renderingClasses: [\"o_dirty\", \"o_transform_removal\", \"oe_edited_link\", \"o_menu_loading\", \"o_draggable\", \"o_link_in_selection\"],\n            dropImageAsAttachment: options.dropImageAsAttachment,\n            foldSnippets: !!options.foldSnippets,\n            useResponsiveFontSizes: options.useResponsiveFontSizes,\n            showResponsiveFontSizesBadges: options.showResponsiveFontSizesBadges,\n            showExtendedTextStylesOptions: options.showExtendedTextStylesOptions,\n            getCSSVariableValue: options.getCSSVariableValue,\n            convertNumericToUnit: options.convertNumericToUnit,\n            autoActivateContentEditable: this.options.autoActivateContentEditable,\n        }, editorCollaborationOptions));\n\n        this.odooEditor.addEventListener('contentChanged', function () {\n            self.$editable.trigger('content_changed');\n        });\n        document.addEventListener(\"mousemove\", this._signalOnline, true);\n        document.addEventListener(\"keydown\", this._signalOnline, true);\n        document.addEventListener(\"keyup\", this._signalOnline, true);\n        if (this.odooEditor.document !== document) {\n            this.odooEditor.document.addEventListener(\"mousemove\", this._signalOnline, true);\n            this.odooEditor.document.addEventListener(\"keydown\", this._signalOnline, true);\n            this.odooEditor.document.addEventListener(\"keyup\", this._signalOnline, true);\n        }\n\n        this._initialValue = this.getValue();\n        const $wrapwrap = $('#wrapwrap');\n        if ($wrapwrap.length) {\n            $wrapwrap[0].addEventListener('scroll', this.odooEditor.multiselectionRefresh, { passive: true });\n            this.$root = this.$root || $wrapwrap;\n        }\n\n        this.$editable.on('click', '[data-oe-field][data-oe-sanitize-prevent-edition]', () => {\n            this.env.services.dialog.add(AlertDialog, {\n                body: _t(\"Someone with escalated rights previously modified this area, you are therefore not able to modify it yourself.\"),\n            });\n        });\n\n        for (const field of this.$editable[0].querySelectorAll('[data-oe-type=\"text\"], [data-oe-type=\"char\"]')) {\n            if (!isVisible(field)) {\n                fillEmpty(field);\n            }\n        }\n\n        this._observeOdooFieldChanges();\n        this.$editable.on(\n            'mousedown touchstart',\n            '[data-oe-field]',\n            function () {\n                self.odooEditor.observerUnactive();\n                const $field = $(this);\n                if (($field.data('oe-type') === \"datetime\" || $field.data('oe-type') === \"date\")) {\n                    let selector = '[data-oe-id=\"' + $field.data('oe-id') + '\"]';\n                    selector += '[data-oe-field=\"' + $field.data('oe-field') + '\"]';\n                    selector += '[data-oe-model=\"' + $field.data('oe-model') + '\"]';\n                    const $linkedFieldNodes = self.$editable.find(selector).addBack(selector);\n                    $linkedFieldNodes.addClass('o_editable_date_field_linked');\n                    if (!$field.hasClass('o_editable_date_field_format_changed')) {\n                        $linkedFieldNodes.text($field.data('oe-original-with-format'));\n                        $linkedFieldNodes.addClass('o_editable_date_field_format_changed');\n                        $linkedFieldNodes.filter('.oe_hide_on_date_edit').addClass('d-none');\n                        setTimeout(() => {\n                            // we might hide the clicked date, focus the one\n                            // supposed to be editable\n                            Wysiwyg.setRange($linkedFieldNodes.filter(':not(.oe_hide_on_date_edit)')[0]);\n                        }, 0);\n                    }\n                }\n                if ($field.attr('contenteditable') !== 'false') {\n                    if ($field.data('oe-type') === \"monetary\") {\n                        $field.attr('contenteditable', false);\n                        const $currencyValue = $field.find('.oe_currency_value');\n                        $currencyValue.attr('contenteditable', true);\n                        $currencyValue.one('mouseup touchend', (e) => {\n                            $currencyValue.selectContent();\n                        });\n                    }\n                    if ($field.data('oe-type') === \"image\") {\n                        $field.attr('contenteditable', false);\n                        $field.find('img').attr('contenteditable', $field.data('oe-readonly') !== 1);\n                    }\n                    if ($field.is('[data-oe-many2one-id]')) {\n                        $field.attr('contenteditable', false);\n                    }\n                }\n                self.odooEditor.observerActive();\n            }\n        );\n\n        this.$editable.on('click', '.o_image, .media_iframe_video', e => e.preventDefault());\n        this.showTooltip = true;\n        this.$editable.on('dblclick', mediaSelector, ev => {\n            const targetEl = ev.currentTarget;\n            let isEditable =\n                // TODO that first check is probably useless/wrong: checking if\n                // the media itself has editable content should not be relevant.\n                // In fact the content of all media should be marked as non\n                // editable anyway.\n                targetEl.isContentEditable ||\n                // For a media to be editable, the base case is to be in a\n                // container whose content is editable.\n                (targetEl.parentElement && targetEl.parentElement.isContentEditable);\n\n            if (!isEditable && targetEl.classList.contains('o_editable_media')) {\n                isEditable = weUtils.shouldEditableMediaBeEditable(targetEl);\n            }\n\n            if (isEditable) {\n                this.showTooltip = false;\n\n                if (!isProtected(this.odooEditor.document.getSelection().anchorNode)) {\n                    if (this.options.onDblClickEditableMedia && targetEl.nodeName === 'IMG' && targetEl.src) {\n                        this.options.onDblClickEditableMedia(ev);\n                    } else {\n                        this._onDblClickEditableMedia(ev);\n                    }\n                }\n            }\n        });\n\n        if (options.snippets) {\n            $(this.odooEditor.document.body).addClass('editor_enable');\n            this.snippetsMenu = await this._createSnippetsMenuInstance(options);\n            await this._insertSnippetMenu();\n\n            this._onBeforeUnload = (event) => {\n                if (this.isDirty()) {\n                    event.returnValue = _t('This document is not saved!');\n                }\n            };\n            window.addEventListener('beforeunload', this._onBeforeUnload);\n        }\n        if (this.options.getContentEditableAreas) {\n            $(this.options.getContentEditableAreas(this.odooEditor)).find('*').off('mousedown mouseup click');\n        }\n\n        // The toolbar must be configured after the snippetMenu is loaded\n        // because if snippetMenu is loaded in an iframe, binding of the color\n        // buttons must use the jquery loaded in that iframe.\n        this._configureToolbar(options);\n\n        $(this.odooEditor.editable).on('mouseup', this._updateEditorUI.bind(this));\n        $(this.odooEditor.editable).on('keydown', this._updateEditorUI.bind(this));\n        $(this.odooEditor.editable).on('keydown', this._handleShortcuts.bind(this));\n        // Ensure the Toolbar always have the correct layout in note.\n        this._updateEditorUI();\n\n        this.$root.on('click', (ev) => {\n            const $target = $(ev.target).closest('a');\n\n            // Keep popover open if clicked inside it, but not on a button\n            if ($(ev.target).parents('.o_edit_menu_popover').length && !$target.length) {\n                ev.preventDefault();\n            }\n\n            if ($target.is(this.customizableLinksSelector)\n                    && $target.is('a')\n                    && $target[0].isContentEditable\n                    && !$target.attr('data-oe-model')\n                    && !$target.find('> [data-oe-model]').length\n                    && !$target[0].closest('.o_extra_menu_items')\n                    && $target[0].isContentEditable) {\n                if (ev.ctrlKey || ev.metaKey) {\n                    window.open($target[0].href, '_blank');\n                }\n                this.linkPopover = $target.data('popover-widget-initialized');\n                if (!this.linkPopover) {\n                    // TODO this code is ugly maybe the mutex should be in the\n                    // editor root widget / the popover should not depend on\n                    // editor panel (like originally intended but...) / ...\n                    (async () => {\n                        let container;\n                        if (this.snippetsMenu) {\n                            // Await for the editor panel to be fully updated\n                            // as some buttons of the link popover we create\n                            // here relies on clicking in that editor panel...\n                            await this.snippetsMenu._mutex.exec(() => null);\n                            container = this.options.document.getElementById('oe_manipulators');\n                        }\n                        this.linkPopover = LinkPopoverWidget.createFor({\n                            target: $target[0],\n                            wysiwyg: this,\n                            container,\n                            notify: (message, params) => {\n                                this.notification.add(message, { type: params.type });\n                            },\n                        });;\n                        $target.data('popover-widget-initialized', this.linkPopover);\n                    })();\n                }\n                // Setting the focus on the closest contenteditable element\n                // resets the selection inside that element if no selection\n                // exists.\n                $target.closest('[contenteditable=true]').focus();\n                if ($target.closest('#wrapwrap').length && this.snippetsMenu) {\n                    this.toggleLinkTools({\n                        forceOpen: true,\n                        link: $target[0],\n                        shouldFocusUrl: ev.detail !== 1,\n                    });\n                }\n            }\n        });\n\n        this._onSelectionChange = this._onSelectionChange.bind(this);\n        this.odooEditor.document.addEventListener('selectionchange', this._onSelectionChange);\n        this.setCSSVariables(this.snippetsMenu ? this.snippetsMenu.el : this.toolbarEl);\n\n        this.odooEditor.addEventListener('preObserverActive', () => {\n            // The onPostSanitize will be called right after the\n            // editor sanitization (to be right before the historyStep).\n            // If any `.o_not_editable` is created while the observer is\n            // unactive, now is the time to call `onPostSanitize` before the\n            // editor could register a mutation.\n            this._onPostSanitize(this.odooEditor.editable);\n        });\n\n        if (this.options.autohideToolbar) {\n            if (this.odooEditor.isMobile) {\n                this.odooEditor.editable.before(this.toolbarEl);\n            } else {\n                document.body.append(this.toolbarEl);\n            }\n        }\n    }\n    setupCollaboration(collaborationChannel) {\n        const modelName = collaborationChannel.collaborationModelName;\n        const fieldName = collaborationChannel.collaborationFieldName;\n        const resId = collaborationChannel.collaborationResId;\n        const channelName = `editor_collaboration:${modelName}:${fieldName}:${resId}`;\n\n        if (\n            !(modelName && fieldName && resId) ||\n            Wysiwyg.activeCollaborationChannelNames.has(channelName)\n        ) {\n            return;\n        }\n\n        this._collaborationChannelName = channelName;\n        this._historyStepsBuffer = [];\n        Wysiwyg.activeCollaborationChannelNames.add(channelName);\n\n        const collaborationBusListener = ({ detail: notifications}) => {\n            for (const { payload, type } of notifications) {\n                if (\n                    type === 'editor_collaboration' &&\n                    payload.model_name === modelName &&\n                    payload.field_name === fieldName &&\n                    payload.res_id === resId\n                ) {\n                    if (payload.notificationName === 'html_field_write') {\n                        this._onServerLastIdUpdate(payload.notificationPayload.last_step_id);\n                    } else if (this._ptpJoined) {\n                        this._peerToPeerLoading.then(() => this.ptp.handleNotification(payload));\n                    }\n                }\n            }\n        }\n        this.busService.addEventListener('notification', collaborationBusListener);\n        this.busService.addChannel(this._collaborationChannelName);\n        this._collaborationStopBus = () => {\n            Wysiwyg.activeCollaborationChannelNames.delete(this._collaborationChannelName);\n            this.busService.removeEventListener('notification', collaborationBusListener);\n            this.busService.deleteChannel(this._collaborationChannelName);\n        }\n\n        this._startCollaborationTime = new Date().getTime();\n\n        this._checkConnectionChange = () => {\n            if (!this.ptp) {\n                return;\n            }\n            if (!navigator.onLine) {\n                this._signalOffline();\n            } else {\n                this._signalOnline();\n            }\n        };\n\n        window.addEventListener('online', this._checkConnectionChange);\n        window.addEventListener('offline', this._checkConnectionChange);\n\n        this._collaborationInterval = setInterval(async () => {\n            if (this._offlineTimeout || this.preSavePromise || !this.ptp) {\n                return;\n            }\n\n            const clientsInfos = Object.values(this.ptp.clientsInfos);\n            const couldBeDisconnected =\n                Boolean(clientsInfos.length) &&\n                clientsInfos.every((x) => PTP_CLIENT_DISCONNECTED_STATES.includes(x.peerConnection && x.peerConnection.connectionState));\n\n            if (couldBeDisconnected) {\n                this._offlineTimeout = setTimeout(() => {\n                    this._signalOffline();\n                }, CONSIDER_OFFLINE_TIME);\n            }\n        }, CHECK_OFFLINE_TIME);\n\n        this._peerToPeerLoading = new Promise(async (resolve) => {\n            if (!ICE_SERVERS) {\n                ICE_SERVERS = await this._serviceRpc('/web_editor/get_ice_servers');\n            }\n            let iceServers = ICE_SERVERS;\n            if (!iceServers.length) {\n                iceServers = [\n                    {\n                        urls: [\n                            'stun:stun1.l.google.com:19302',\n                            'stun:stun2.l.google.com:19302',\n                        ],\n                    }\n                ];\n            }\n            this._iceServers = iceServers;\n\n            this.ptp = this._getNewPtp();\n\n            resolve();\n        });\n\n        const editorCollaborationOptions = {\n            collaborationClientId: this._currentClientId,\n            onHistoryStep: (historyStep) => {\n                if (!this.ptp) return;\n                this.ptp.notifyAllClients('oe_history_step', historyStep, { transport: 'rtc' });\n            },\n            onCollaborativeSelectionChange: debounce((collaborativeSelection) => {\n                if (!this.ptp) return;\n                this.ptp.notifyAllClients('oe_history_set_selection', collaborativeSelection, { transport: 'rtc' });\n            }, 50),\n            onHistoryMissingParentSteps: async ({ step, fromStepId }) => {\n                if (!this.ptp) return;\n                const missingSteps = await this.requestClient(\n                    step.clientId,\n                    'get_missing_steps', {\n                        fromStepId: fromStepId,\n                        toStepId: step.id\n                    },\n                    { transport: 'rtc' }\n                );\n                if (missingSteps === REQUEST_ERROR) return;\n                this._processMissingSteps(Array.isArray(missingSteps) ? missingSteps.concat(step) : missingSteps);\n            },\n        };\n        if (this.options.postProcessExternalSteps) {\n            editorCollaborationOptions.postProcessExternalSteps = this.options.postProcessExternalSteps;\n        }\n        return editorCollaborationOptions;\n    }\n    setupToolbar(toolbarEl) {\n        this.toolbarEl = toolbarEl;\n        this.odooEditor.setupToolbar(toolbarEl);\n        this._configureToolbar(this.options)\n        this._updateEditorUI();\n    }\n    /**\n     * @override\n     */\n    destroy() {\n        // Sometimes, the component is started and destroyed so quickly that\n        // external calls to `wysiwyg.getColorPickerTemplateService()` fail by\n        // the time it's done, even though `wysiwyg` was properly instantiated.\n        // As it's not needed once the component is destroyed, we return null.\n        this.getColorPickerTemplateService = () => null;\n        Wysiwyg.activeWysiwygs.delete(this);\n\n        this._stopPeerToPeer();\n        document.removeEventListener(\"mousemove\", this._signalOnline, true);\n        document.removeEventListener(\"keydown\", this._signalOnline, true);\n        document.removeEventListener(\"keyup\", this._signalOnline, true);\n        this._collaborationStopBus && this._collaborationStopBus();\n        if (this.odooEditor) {\n            this.odooEditor.document.removeEventListener(\"mousemove\", this._signalOnline, true);\n            this.odooEditor.document.removeEventListener(\"keydown\", this._signalOnline, true);\n            this.odooEditor.document.removeEventListener(\"keyup\", this._signalOnline, true);\n            this.odooEditor.document.removeEventListener('selectionchange', this._onSelectionChange);\n            this.odooEditor.destroy();\n        }\n        if (this.snippetsMenu) {\n            this.snippetsMenu.destroy();\n        }\n        // If peer to peer is initializing, wait for properly closing it.\n        if (this._peerToPeerLoading) {\n            this._peerToPeerLoading.then(()=> {\n                this._stopPeerToPeer();\n                this._collaborationStopBus && this._collaborationStopBus();\n            });\n        }\n        clearInterval(this._collaborationInterval);\n        this.$editable && this.$editable.off('blur', this._onBlur);\n        document.removeEventListener('mousedown', this._onDocumentMousedown, true);\n        const $body = $(document.body);\n        $body.off('mousemove', this.resizerMousemove);\n        $body.off('mouseup', this.resizerMouseup);\n        const $wrapwrap = $('#wrapwrap');\n        if ($wrapwrap.length && this.odooEditor) {\n            $('#wrapwrap')[0].removeEventListener('scroll', this.odooEditor.multiselectionRefresh, { passive: true });\n        }\n        $(this.$root).off('click');\n        this.toolbarEl?.remove();\n        this.imageCropEL?.remove();\n        if (this.linkPopover) {\n            this.linkPopover.hide();\n        }\n        if (this._checkConnectionChange) {\n            window.removeEventListener('online', this._checkConnectionChange);\n            window.removeEventListener('offline', this._checkConnectionChange);\n        }\n        window.removeEventListener('beforeunload', this._onBeforeUnload);\n        for (const timeout of this.tooltipTimeouts) {\n            clearTimeout(timeout);\n        }\n        document.removeEventListener('scroll', this._onScroll, true);\n    }\n    /**\n     * @override\n     */\n    _renderElement() {\n        this.$editable = this.options.editable || $('<div class=\"note-editable\">');\n\n        // We add the field's name as id so default_focus will target it if\n        // needed. For that to work, it has to already be editable but note that\n        // the editor is at this point not yet instantiated.\n        if (typeof this.options.fieldId !== 'undefined' && !this.options.inIframe) {\n            this.$editable.attr('id', this.options.fieldId);\n            this.$editable.attr('contenteditable', true);\n        }\n\n        this.$root = this.$editable;\n        if (this.options.height) {\n            this.$editable.height(this.options.height);\n        }\n        if (this.options.minHeight) {\n            this.$editable.css('min-height', this.options.minHeight);\n        }\n        if (this.options.maxHeight && this.options.maxHeight > 10) {\n            this.$editable.css('max-height', this.options.maxHeight);\n        }\n        if (this.options.resizable && !isMobileOS()) {\n            const $wrapper = $('<div class=\"o_wysiwyg_wrapper odoo-editor\">');\n            this.$root = $wrapper;\n            $wrapper.append(this.$editable);\n            this.$resizer = $(`<div class=\"o_wysiwyg_resizer\">\n                <div class=\"o_wysiwyg_resizer_hook\"></div>\n                <div class=\"o_wysiwyg_resizer_hook\"></div>\n                <div class=\"o_wysiwyg_resizer_hook\"></div>\n            </div>`);\n            $wrapper.append(this.$resizer);\n            this._replaceElement($wrapper);\n\n            const minHeight = this.options.minHeight || 100;\n            this.$editable.height(this.options.height || minHeight);\n\n            // resizer hooks\n            let startOffsetTop;\n            let startHeight;\n            const $body = $(document.body);\n            const resizerMousedown = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                $body.on('mousemove', this.resizerMousemove);\n                $body.on('mouseup', this.resizerMouseup);\n                startHeight = this.$editable.height();\n                startOffsetTop = e.pageY;\n            };\n            this.resizerMousemove = (e) => {\n                const offsetTop = e.pageY - startOffsetTop;\n                let height = startHeight + offsetTop;\n                if (height < minHeight) {\n                    height = minHeight;\n                }\n                this.$editable.height(height);\n            };\n            this.resizerMouseup = () => {\n                $body.off('mousemove', this.resizerMousemove);\n                $body.off('mouseup', this.resizerMouseup);\n            };\n            this.$resizer.on('mousedown', resizerMousedown);\n        } else {\n            if (!this.options.sideAttach) {\n                this._replaceElement(this.$editable);\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    _replaceElement($el) {\n        this.el.replaceWith($el[0]);\n        this.el = $el[0];\n        this.$el = $el;\n    }\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n    /**\n     * Return the editable area.\n     *\n     * @returns {jQuery}\n     */\n    getEditable() {\n        return this.$editable;\n    }\n    /**\n     * Return true if the content has changed.\n     *\n     * @returns {Boolean}\n     */\n    isDirty() {\n        // TODO review... o_dirty is not even a set up system in web_editor,\n        // only in website... although some other code checks that class in\n        // web_editor for no apparent reason either. Also, why comparing HTML\n        // values if already confirmed dirty with the first check?\n        const isDocumentDirty = this.$editable[0].ownerDocument.defaultView.$(\".o_dirty\").length;\n        return this._initialValue !== (this.getValue() || this.$editable.val()) && isDocumentDirty;\n    }\n    /**\n     * Get the value of the editable element.\n     *\n     * @param {object} [options]\n     * @param {jQuery} [options.$layout]\n     * @returns {String}\n     */\n    getValue(options) {\n        var $editable = options && options.$layout || this.$editable.clone();\n        $editable.find('[contenteditable]').removeAttr('contenteditable');\n        $editable.find('[class=\"\"]').removeAttr('class');\n        $editable.find('[style=\"\"]').removeAttr('style');\n        $editable.find('[title=\"\"]').removeAttr('title');\n        $editable.find('[alt=\"\"]').removeAttr('alt');\n        $editable.find('[data-bs-original-title=\"\"]').removeAttr('data-bs-original-title');\n        $editable.find('[data-editor-message]').removeAttr('data-editor-message');\n        $editable.find('a.o_image, span.fa, i.fa').html('');\n        $editable.find('[aria-describedby]').removeAttr('aria-describedby').removeAttr('data-bs-original-title');\n        if (this.odooEditor) {\n            this.odooEditor.cleanForSave($editable[0]);\n            this._attachHistoryIds($editable[0]);\n        }\n        return $editable.html();\n    }\n    /**\n     * Save the content in the target\n     *      - in init option beforeSave\n     *      - receive editable jQuery DOM as attribute\n     *      - called after deactivate codeview if needed\n     * @returns {Promise}\n     *      - resolve with true if the content was dirty\n     */\n    save() {\n        const isDirty = this.isDirty();\n        const html = this.getValue();\n        if (this.$editable.is('textarea')) {\n            this.$editable.val(html);\n        } else {\n            this.$editable.html(html);\n        }\n        return Promise.resolve({isDirty: isDirty, html: html});\n    }\n    /**\n     * Reset the history.\n     */\n    historyReset() {\n        this.odooEditor.historyReset();\n    }\n    /**\n     * Saves the content or the given editable.\n     *\n     * @param {boolean} [reload=true]\n     * @param {Object} [editable=false] Specific editable to save\n     * @returns {Promise}\n     */\n    async saveContent(reload = true, editable = false) {\n        this.savingContent = true;\n        if (!editable) {\n            await this.cleanForSave();\n            const editables = \"getContentEditableAreas\" in this.options ? this.options.getContentEditableAreas(this.odooEditor) : [];\n            await this.savePendingImages(editables.length ? $(editables) : this.$editable);\n            await this._saveViewBlocks();\n        } else {\n            await this.cleanForSave(editable);\n            await this.savePendingImages(editable);\n            await this._saveViewBlocks(false, editable);\n        }\n\n        this.savingContent = false;\n\n        window.removeEventListener('beforeunload', this._onBeforeUnload);\n        if (reload) {\n            window.location.reload();\n        }\n    }\n    /**\n     * Checks if the Wysiwyg is currently saving content. It can be used to\n     * prevent some unwanted actions during save.\n     *\n     * @returns {Boolean}\n     */\n    isSaving() {\n        return !!this.savingContent;\n    }\n    /**\n     * Asks the user if he really wants to discard its changes (if there are\n     * some of them), then simply reload the page if he wants to.\n     *\n     * @param {boolean} [reload=true]\n     *        true if the page has to be reloaded when the user answers yes\n     *        (do nothing otherwise but add this to allow class extension)\n     * @returns {Promise}\n     */\n    cancel(reload) {\n        var self = this;\n        return new Promise((resolve, reject) => {\n            this.env.services.dialog.add(ConfirmationDialog, {\n                body: _t(\"If you discard the current edits, all unsaved changes will be lost. You can cancel to return to edit mode.\"),\n                confirm: () => resolve(),\n                cancel: () => reject()\n            });\n        }).then(function () {\n            if (reload !== false) {\n                window.onbeforeunload = null;\n                return self._reload();\n            }\n        });\n    }\n    /**\n     * Create/Update attachments for unsaved images.\n     * (e.g. modified/cropped images, drag & dropped images, pasted images..)\n     *\n     * @param {jQuery} $editable\n     * @returns {Promise}\n     */\n    savePendingImages($editable = this.$editable) {\n        const defs = Array.from($editable).map(async (editableEl) => {\n            const { resModel, resId } = this._getRecordInfo(editableEl);\n            // When saving a webp, o_b64_image_to_save is turned into\n            // o_modified_image_to_save by _saveB64Image to request the saving\n            // of the pre-converted webp resizes and all the equivalent jpgs.\n            const b64Proms = [...editableEl.querySelectorAll('.o_b64_image_to_save')].map(async el => {\n                const dirtyEditable = el.closest(\".o_dirty\");\n                if (dirtyEditable && dirtyEditable !== editableEl) {\n                    // Do nothing as there is an editable element closer to the\n                    // image that will perform the `_saveB64Image()` call with\n                    // the correct \"resModel\" and \"resId\" parameters.\n                    return;\n                }\n                await this._saveB64Image(el, resModel, resId);\n            });\n            const modifiedProms = [...editableEl.querySelectorAll('.o_modified_image_to_save')].map(async el => {\n                const dirtyEditable = el.closest(\".o_dirty\");\n                if (dirtyEditable && dirtyEditable !== editableEl) {\n                    // Do nothing as there is an editable element closer to the\n                    // image that will perform the `_saveModifiedImage()` call\n                    // with the correct \"resModel\" and \"resId\" parameters.\n                    return;\n                }\n                await this._saveModifiedImage(el, resModel, resId);\n            });\n            return Promise.all([...b64Proms, ...modifiedProms]);\n        });\n        return Promise.all(defs);\n    }\n    /**\n     * @param {String} value\n     * @returns {String}\n     */\n    setValue(value) {\n        this.odooEditor.resetContent(value);\n    }\n    /**\n     * Undo one step of change in the editor.\n     */\n    undo() {\n        this.odooEditor.historyUndo();\n    }\n    /**\n     * Redo one step of change in the editor.\n     */\n    redo() {\n        this.odooEditor.historyRedo();\n    }\n    /**\n     * Focus inside the editor.\n     *\n     * Set cursor to the editor latest position before blur or to the last editable node, ready to type.\n     */\n    focus() {\n        if (this.odooEditor && !this.odooEditor.historyResetLatestComputedSelection(true)) {\n            // If the editor don't have an history step to focus to,\n            // We place the cursor after the end of the editor exiting content.\n            const range = document.createRange();\n            const elementToTarget = this.$editable[0].lastElementChild ? this.$editable[0].lastElementChild : this.$editable[0];\n            range.selectNodeContents(elementToTarget);\n            range.collapse();\n\n            const selection = this.odooEditor.document.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n        }\n    }\n    getDeepRange() {\n        return getDeepRange(this.odooEditor.editable);\n    }\n    closestElement(...args) {\n        return closestElement(...args);\n    }\n    async cleanForSave(editable = this.odooEditor.editable) {\n        if (this.odooEditor) {\n            this.odooEditor.cleanForSave(editable);\n            this._attachHistoryIds(editable);\n        }\n\n        if (this.snippetsMenu) {\n            await this.snippetsMenu.cleanForSave();\n        }\n    }\n    isSelectionInEditable() {\n        return this.odooEditor.isSelectionInEditable();\n    }\n    /**\n     * Start or resume the Odoo field changes muation observers.\n     *\n     * Necessary to keep all copies of a given field at the same value throughout the page.\n     */\n    _observeOdooFieldChanges() {\n        const observerOptions = {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            characterData: true,\n            attributeOldValue: true,\n        };\n        if (this.odooFieldObservers) {\n            for (let observerData of this.odooFieldObservers) {\n                observerData.observer.observe(observerData.field, observerOptions);\n            }\n        } else {\n            const odooFieldSelector = '[data-oe-model], [data-oe-translation-initial-sha]';\n            const $odooFields = this.$editable.find(odooFieldSelector);\n            const renderingClassesSelector = this.odooEditor.options.renderingClasses\n                .map(className => `.${className}`).join(\", \");\n            this.odooFieldObservers = [];\n\n            $odooFields.each((i, field) => {\n                const observer = new MutationObserver((mutations) => {\n                    mutations = this.odooEditor.filterMutationRecords(mutations);\n                    mutations = mutations.filter(rec =>\n                        !(rec.type === \"attributes\" && (rec.attributeName.startsWith(\"data-oe-t\")))\n                    );\n                    if (!mutations.length) {\n                        return;\n                    }\n\n                    let $node = $(field);\n                    // Do not forward \"unstyled\" copies to other nodes.\n                    if ($node.hasClass('o_translation_without_style')) {\n                        return;\n                    }\n                    let $nodes = $odooFields.filter(function () {\n                        return this !== field;\n                    });\n                    if ($node.data('oe-model')) {\n                        $nodes = $nodes.filter('[data-oe-model=\"' + $node.data('oe-model') + '\"]')\n                            .filter('[data-oe-id=\"' + $node.data('oe-id') + '\"]')\n                            .filter('[data-oe-field=\"' + $node.data('oe-field') + '\"]');\n                    }\n\n                    if ($node.data('oe-translation-initial-sha')) {\n                        $nodes = $nodes.filter('[data-oe-translation-initial-sha=\"' + $node.data('oe-translation-initial-sha') + '\"]');\n                    }\n                    if ($node.data('oe-type')) {\n                        $nodes = $nodes.filter('[data-oe-type=\"' + $node.data('oe-type') + '\"]');\n                    }\n                    if ($node.data('oe-expression')) {\n                        $nodes = $nodes.filter('[data-oe-expression=\"' + $node.data('oe-expression') + '\"]');\n                    } else if ($node.data('oe-xpath')) {\n                        $nodes = $nodes.filter('[data-oe-xpath=\"' + $node.data('oe-xpath') + '\"]');\n                    }\n                    if ($node.data('oe-contact-options')) {\n                        $nodes = $nodes.filter(\"[data-oe-contact-options='\" + $node[0].dataset.oeContactOptions + \"']\");\n                    }\n\n                    let nodes = $node.get();\n\n                    if ($node.data('oe-type') === \"many2one\") {\n                        $nodes = $nodes.add($('[data-oe-model]')\n                            .filter(function () {\n                                return this !== $node[0] && nodes.indexOf(this) === -1;\n                            })\n                            .filter('[data-oe-many2one-model=\"' + $node.data('oe-many2one-model') + '\"]')\n                            .filter('[data-oe-many2one-id=\"' + $node.data('oe-many2one-id') + '\"]')\n                            .filter('[data-oe-type=\"many2one\"]'));\n\n                        $nodes = $nodes.add($('[data-oe-model]')\n                            .filter(function () {\n                                return this !== $node[0] && nodes.indexOf(this) === -1;\n                            })\n                            .filter('[data-oe-model=\"' + $node.data('oe-many2one-model') + '\"]')\n                            .filter('[data-oe-id=\"' + $node.data('oe-many2one-id') + '\"]')\n                            .filter('[data-oe-field=\"name\"]'));\n                    }\n\n                    // TODO adapt in master: remove this and only use the\n                    //  `_pauseOdooFieldObservers(field)` call.\n                    this.__odooFieldObserversToPause = this.odooFieldObservers.filter(\n                        // Exclude inner translation fields observers. They\n                        // still handle translation synchronization inside the\n                        // targeted field.\n                        observerData => !observerData.field.dataset.oeTranslationInitialSha ||\n                            !field.contains(observerData.field)\n                    );\n                    this._pauseOdooFieldObservers();\n                    // Tag the date fields to only replace the value\n                    // with the original date value once (see mouseDown event)\n                    if ($node.hasClass('o_editable_date_field_format_changed')) {\n                        $nodes.addClass('o_editable_date_field_format_changed');\n                    }\n                    // Ignore the editor's rendering classes when copying field\n                    // content.\n                    const fieldNodeClone = $node[0].cloneNode(true);\n                    for (const node of fieldNodeClone.querySelectorAll(renderingClassesSelector)) {\n                        node.classList.remove(...this.odooEditor.options.renderingClasses);\n                    }\n                    const html = $(fieldNodeClone).html();\n                    this.odooEditor.withoutRollback(() => {\n                        for (const node of $nodes) {\n                            if (node.classList.contains('o_translation_without_style')) {\n                                // For generated elements such as the navigation\n                                // labels of website's table of content, only the\n                                // text of the referenced translation must be used.\n                                const text = $node.text();\n                                if (node.innerText !== text) {\n                                    node.innerText = text;\n                                }\n                                continue;\n                            }\n                            if (node.innerHTML !== html) {\n                                node.innerHTML = html;\n                            }\n                        }\n                    });\n                    this._observeOdooFieldChanges();\n                });\n                observer.observe(field, observerOptions);\n                this.odooFieldObservers.push({field: field, observer: observer});\n            });\n        }\n    }\n    /**\n     * Stop the field changes mutation observers.\n     */\n    _pauseOdooFieldObservers() {\n        // TODO adapt in master: remove this and directly exclude observers with\n        // targets inside the current field (we use `this.odooFieldObservers`\n        // as fallback for compatibility here).\n        const fieldObserversData = this.__odooFieldObserversToPause || this.odooFieldObservers;\n        for (let observerData of fieldObserversData) {\n            observerData.observer.disconnect();\n        }\n    }\n    /**\n     * Open the link tools or the image link tool depending on the selection.\n     */\n    openLinkToolsFromSelection() {\n        const targetEl = this.odooEditor.document.getSelection().getRangeAt(0).startContainer;\n        // Link tool is different if the selection is an image or a text.\n        if (targetEl.nodeType === Node.ELEMENT_NODE\n                && (targetEl.tagName === 'IMG' || targetEl.querySelectorAll('img').length === 1)) {\n            this.odooEditor.dispatchEvent(new Event('activate_image_link_tool'));\n            return;\n        }\n        this.toggleLinkTools();\n    }\n    /**\n     * Toggle the Link tools/dialog to edit links. If a snippet menu is present,\n     * use the link tools, otherwise use the dialog.\n     *\n     * @param {boolean} [options.forceOpen] default: false\n     * @param {boolean} [options.forceDialog] force to open the dialog\n     * @param {boolean} [options.link] The anchor element to edit if it is known.\n     * @param {boolean} [options.shoudFocusUrl=true] Disable the automatic focusing of the URL field.\n     */\n    async toggleLinkTools(options = {}) {\n        const shouldFocusUrl = options.shouldFocusUrl === undefined ? true : options.shouldFocusUrl;\n\n        const linkEl = getInSelection(this.odooEditor.document, 'a');\n        if (linkEl && (!linkEl.matches(this.customizableLinksSelector) || !linkEl.isContentEditable)) {\n            return;\n        }\n        if (this.snippetsMenu && !options.forceDialog) {\n            if (options.link && options.link.querySelector(mediaSelector) &&\n                    !options.link.textContent.trim() && wysiwygUtils.isImg(this.lastElement)) {\n                // If the link contains a media without text, the link is\n                // editable in the media options instead.\n                if (options.shoudFocusUrl) {\n                    // Wait for the editor panel to be fully updated.\n                    this.snippetsMenu._mutex.exec(() => {\n                        // This is needed to focus the URL input when clicking\n                        // on the \"Edit link\" of the popover.\n                        this.odooEditor.dispatchEvent(new Event('activate_image_link_tool'));\n                    });\n                }\n                return;\n            }\n            if (options.forceOpen || !this.state.linkToolProps) {\n                const $button = $(this.toolbarEl.querySelector('#create-link'));\n                if (!this.state.linkToolProps || ![options.link, ...wysiwygUtils.ancestors(options.link)].includes(this.linkToolsInfos.link)) {\n                    const { link } = getOrCreateLink({\n                        containerNode: this.odooEditor.editable,\n                        startNode: options.link || this.lastMediaClicked,\n                    });\n                    if (!link) {\n                        return;\n                    }\n                    const addHintClasses = () => {\n                        this.odooEditor.observerUnactive(\"hint_classes\");\n                        link.classList.add('oe_edited_link');\n                        $button.addClass('active');\n                        this.odooEditor.observerActive(\"hint_classes\");\n                    };\n                    const removeHintClasses = () => {\n                        this.odooEditor.observerUnactive(\"hint_classes\");\n                        link.classList.remove('oe_edited_link');\n                        $button.removeClass('active');\n                        this.odooEditor.observerActive(\"hint_classes\");\n                    };\n                    this.linkToolsInfos = {\n                        onDestroy: () => {},\n                        link,\n                        removeHintClasses,\n                    };\n\n                    addHintClasses();\n                    this.state.linkToolProps = {\n                        ...this.options.linkOptions,\n                        wysiwyg: this,\n                        editable: this.odooEditor.editable,\n                        link,\n                        // If the link contains an image or an icon do not\n                        // display the label input (e.g. some mega menu links).\n                        needLabel: !link.querySelector('.fa, img'),\n                        shouldFocusUrl,\n                        $button,\n                        onColorCombinationClassChange: (colorCombinationClass) => {\n                            this.linkToolsInfos.colorCombinationClass = colorCombinationClass;\n                        },\n                        onPreApplyLink: removeHintClasses,\n                        onPostApplyLink: addHintClasses,\n                        onDestroy: () => {\n                            removeHintClasses();\n                            this.linkToolsInfos.onDestroy();\n                        },\n                        getColorpickerTemplate: this.getColorpickerTemplate.bind(this),\n                    };\n                }\n                // update the shouldFocusUrl prop to focus on url when double click and click edit link\n                this.state.linkToolProps.shouldFocusUrl = shouldFocusUrl;\n                const _onClick = ev => {\n                    if (\n                        !ev.target.closest('#create-link') &&\n                        (!ev.target.closest('.oe-toolbar') || !ev.target.closest('we-customizeblock-option')) &&\n                        !ev.target.closest('.ui-autocomplete') &&\n                        (!this.state.linkToolProps || ![ev.target, ...wysiwygUtils.ancestors(ev.target)].includes(this.linkToolsInfos.link))\n                    ) {\n                        // Destroy the link tools on click anywhere outside the\n                        // toolbar if the target is the orgiginal target not in the original target.\n                        this.destroyLinkTools();\n                        this.odooEditor.document.removeEventListener('click', _onClick, true);\n                        document.removeEventListener('click', _onClick, true);\n                    }\n                };\n                this.odooEditor.document.addEventListener('click', _onClick, true);\n                document.addEventListener('click', _onClick, true);\n            } else {\n                this.destroyLinkTools();\n            }\n        } else {\n            const historyStepIndex = this.odooEditor.historySize() - 1;\n            this.odooEditor.historyPauseSteps();\n            let { link } = getOrCreateLink({\n                containerNode: this.odooEditor.editable,\n                startNode: options.link,\n            });\n            if (!link) {\n                this.odooEditor.historyUnpauseSteps();\n                return\n            }\n            this._shouldDelayBlur = true;\n            this.env.services.dialog.add(LinkDialog, {\n                ...this.options.linkOptions,\n                editable: this.odooEditor.editable,\n                link,\n                needLabel: true && !link.querySelector('img'),\n                focusField: link.innerHTML ? 'url' : '',\n                onSave: (data) => {\n                    if (!data) {\n                        return;\n                    }\n                    getDeepRange(this.$editable[0], {range: data.range, select: true});\n                    if (this.options.userGeneratedContent) {\n                        data.rel = 'ugc';\n                    }\n                    data.linkDialog.applyLinkToDom(data);\n                    this.odooEditor.historyUnpauseSteps();\n                    this.odooEditor.historyStep();\n                    const link = data.linkDialog.$link[0];\n                    setSelection(link, 0, link, link.childNodes.length, false);\n                    link.focus();\n                },\n                onClose: () => {\n                    this.odooEditor.historyUnpauseSteps();\n                    this.odooEditor.historyRevertUntil(historyStepIndex)\n                }\n            });\n        }\n    }\n    /**\n     * Open one of the ChatGPTDialogs to generate or modify content.\n     *\n     * @param {'prompt'|'alternatives'} [mode='prompt']\n     */\n    openChatGPTDialog(mode = 'prompt') {\n        const restore = preserveCursor(this.odooEditor.document);\n        const params = {\n            insert: content => {\n                this.odooEditor.historyPauseSteps();\n                const insertedNodes = this.odooEditor.execCommand('insert', content);\n                this.odooEditor.historyUnpauseSteps();\n                this.notification.add(_t('Your content was successfully generated.'), {\n                    title: _t('Content generated'),\n                    type: 'success',\n                });\n                this.odooEditor.historyStep();\n                // Add a frame around the inserted content to highlight it for 2\n                // seconds.\n                const start = insertedNodes?.length && closestElement(insertedNodes[0]);\n                const end = insertedNodes?.length && closestElement(insertedNodes[insertedNodes.length - 1]);\n                if (start && end) {\n                    const divContainer = this.odooEditor.editable.parentElement;\n                    let [parent, left, top] = [start.offsetParent, start.offsetLeft, start.offsetTop - start.scrollTop];\n                    while (parent && !parent.contains(divContainer)) {\n                        left += parent.offsetLeft;\n                        top += parent.offsetTop - parent.scrollTop;\n                        parent = parent.offsetParent;\n                    }\n                    let [endParent, endTop] = [end.offsetParent, end.offsetTop - end.scrollTop];\n                    while (endParent && !endParent.contains(divContainer)) {\n                        endTop += endParent.offsetTop - endParent.scrollTop;\n                        endParent = endParent.offsetParent;\n                    }\n                    const div = document.createElement('div');\n                    div.classList.add('o-chatgpt-content');\n                    const FRAME_PADDING = 3;\n                    div.style.left = `${left - FRAME_PADDING}px`;\n                    div.style.top = `${top - FRAME_PADDING}px`;\n                    div.style.width = `${Math.max(start.offsetWidth, end.offsetWidth) + (FRAME_PADDING * 2)}px`;\n                    div.style.height = `${endTop + end.offsetHeight - top + (FRAME_PADDING * 2)}px`;\n                    divContainer.prepend(div);\n                    setTimeout(() => div.remove(), 2000);\n                }\n            },\n        };\n        if (mode === 'alternatives') {\n            params.originalText = this.odooEditor.document.getSelection().toString() || '';\n        }\n        this.odooEditor.document.getSelection().collapseToEnd();\n        this.env.services.dialog.add(\n            mode === 'prompt' ? ChatGPTPromptDialog : ChatGPTAlternativesDialog,\n            params,\n            { onClose: restore },\n        );\n    }\n    /**\n     * Removes the current Link.\n     */\n    removeLink() {\n        if (this.snippetsMenu && wysiwygUtils.isImg(this.lastElement)) {\n            this.snippetsMenu._mutex.exec(() => {\n                // Wait for the editor panel to be fully updated.\n                this.odooEditor.dispatchEvent(new Event('deactivate_image_link_tool'));\n            });\n        } else {\n            this.odooEditor.execCommand('unlink');\n        }\n    }\n    /**\n     * Destroy the Link tools/dialog and restore the selection.\n     */\n    // todo: review me\n    async destroyLinkTools() {\n        if (this.state.linkToolProps) {\n            const selection = this.odooEditor.document.getSelection();\n            const link = this.linkToolsInfos.link;\n            let anchorNode\n            let focusNode;\n            let anchorOffset = 0;\n            let focusOffset;\n            if (selection && link.parentElement) {\n                // Focus the link after the dialog element is removed.\n                if (shouldUnlink(this.linkToolsInfos.link, this.linkToolsInfos.colorCombinationClass)) {\n                    if (link.childNodes.length) {\n                        anchorNode = link.childNodes[0];\n                        focusNode = link.childNodes[link.childNodes.length - 1];\n                    } else {\n                        const parent = link.parentElement;\n                        const index = Array.from(parent.childNodes).indexOf(link);\n                        anchorNode = focusNode = parent;\n                        anchorOffset = focusOffset = index;\n                    }\n                } else {\n                    const commonBlock = selection.rangeCount && closestBlock(selection.getRangeAt(0).commonAncestorContainer);\n                    [anchorNode, focusNode] = commonBlock && link.contains(commonBlock) ? [commonBlock, commonBlock] : [link, link];\n                }\n                if (!focusOffset) {\n                    focusOffset = focusNode.childNodes.length || focusNode.length;\n                }\n            }\n            this.linkToolsInfos.removeHintClasses();\n            if (anchorNode) {\n                setSelection(anchorNode, anchorOffset, focusNode, focusOffset, false);\n            }\n            this.state.linkToolProps = undefined;\n        }\n    }\n    /**\n     * Take an image's URL and display it in a fullscreen viewer.\n     *\n     * @todo should use `useFileViewer` instead once Wysiwyg becomes an Owl Component.\n     * @param {string} url\n     */\n    showImageFullscreen(url) {\n        const viewerId = `web.file_viewer${fileViewerId++}`;\n        registry.category(\"main_components\").add(viewerId, {\n            Component: FileViewer,\n            props: {\n                files: [{\n                        isImage: true,\n                        isViewable: true,\n                        displayName: url,\n                        defaultSource: url,\n                        downloadUrl: url,\n                }],\n                startIndex: 0,\n                close: () => {\n                    registry.category('main_components').remove(viewerId);\n                },\n            },\n        });\n        this.odooEditor.document.getSelection()?.collapseToEnd();\n        this.odooEditor.editable.blur();\n    }\n    /**\n     * Open the media dialog.\n     *\n     * Used to insert or change image, icon, document and video.\n     *\n     * @param {object} params\n     * @param {Node} [params.node] Optionnal\n     * @param {Node} [params.htmlClass] Optionnal\n     * @param {Class} [params.MediaDialog] Optional\n     */\n    openMediaDialog(params = {}) {\n        const sel = this.odooEditor.document.getSelection();\n\n        if (!sel.rangeCount) {\n            return;\n        }\n        const range = sel.getRangeAt(0);\n        // We lose the current selection inside the content editable when we\n        // click the media dialog button so we need to be able to restore the\n        // selection when the modal is closed.\n        const restoreSelection = preserveCursor(this.odooEditor.document);\n\n        const editable = OdooEditorLib.closestElement(params.node || range.startContainer, '.o_editable') || this.odooEditor.editable;\n        const { resModel, resId, field, type } = this._getRecordInfo(editable);\n\n        this.env.services.dialog.add(params.MediaDialog || MediaDialog, {\n            resModel,\n            resId,\n            useMediaLibrary: !!(field && (resModel === 'ir.ui.view' && field === 'arch' || type === 'html')),\n            media: params.node,\n            save: this._onMediaDialogSave.bind(this, {\n                node: params.node,\n                restoreSelection: restoreSelection,\n            }),\n            onAttachmentChange: this._onAttachmentChange.bind(this),\n            close: () => restoreSelection(),\n            ...this.options.mediaModalParams,\n            ...params,\n        });\n    }\n    // todo: test me\n    showEmojiPicker() {\n        const targetEl = this.odooEditor.document.getSelection();\n        const closest = closestBlock(targetEl.anchorNode);\n        const restoreSelection = preserveCursor(this.odooEditor.document);\n\n        this.popover.add(closest, EmojiPicker, {\n                onSelect: (str) => {\n                    restoreSelection();\n                    this.odooEditor.execCommand('insert', str);\n                },\n            }, {\n                onPositioned: (popover) => {\n                    restoreSelection();\n                    // Set the 'parentContextRect' option in 'options' when\n                    // 'getContextFromParentRect' is available. This facilitates\n                    // element positioning relative to a parent or reference\n                    // rectangle.\n                    const options = {};\n                    if (this.options.getContextFromParentRect) {\n                        options['parentContextRect'] = this.options.getContextFromParentRect();\n                    }\n                    const rangePosition = getRangePosition(popover, this.options.document, options);\n                    popover.style.top = rangePosition.top + 'px';\n                    popover.style.left = rangePosition.left + 'px';\n                    const oInputBox = popover.querySelector('input');\n                    oInputBox?.focus();\n                },\n            },\n        );\n    }\n    /**\n     * Sets custom CSS Variables on the snippet menu element.\n     * Used for color previews and color palette to get the color\n     * values of the editable. (e.g. if the editable is in an iframe\n     * with different SCSS color values as the top window.)\n     *\n     * @param {HTMLElement} element\n     */\n    setCSSVariables(element) {\n        const stylesToCopy = weUtils.EDITOR_COLOR_CSS_VARIABLES;\n\n        for (const style of stylesToCopy) {\n            element.style.setProperty(`--we-cp-${style}`, weUtils.getCSSVariableValue(style));\n        }\n\n        element.classList.toggle('o_we_has_btn_outline_primary',\n            weUtils.getCSSVariableValue('btn-primary-outline') === 'true');\n        element.classList.toggle('o_we_has_btn_outline_secondary',\n            weUtils.getCSSVariableValue('btn-secondary-outline') === 'true');\n    }\n    /**\n     * Detached function to allow overriding.\n     *\n     * @param {Object} params binded @see openMediaDialog\n     * @param {Element} element provided by the dialog\n     */\n    _onMediaDialogSave(params, element) {\n        params.restoreSelection();\n        if (!element) {\n            return;\n        }\n\n        if (params.node) {\n            const isIcon = (el) => el.matches('i.fa, span.fa');\n            const changedIcon = isIcon(params.node) && isIcon(element);\n            if (changedIcon) {\n                // Preserve tag name when changing an icon and not recreate the\n                // editors unnecessarily.\n                for (const attribute of element.attributes) {\n                    params.node.setAttribute(attribute.nodeName, attribute.nodeValue);\n                }\n            } else {\n                params.node.replaceWith(element);\n            }\n            this.odooEditor.unbreakableStepUnactive();\n            this.odooEditor.historyStep();\n            // Refocus again to save updates when calling `_onWysiwygBlur`\n            this.odooEditor.editable.focus();\n        } else {\n            return this.odooEditor.execCommand('insert', element);\n        }\n\n        if (this.snippetsMenu) {\n            this.snippetsMenu.activateSnippet($(element)).then(() => {\n                if (element.tagName === 'IMG') {\n                    $(element).trigger('image_changed');\n                }\n            });\n        }\n    }\n    getInSelection(selector) {\n        return getInSelection(this.odooEditor.document, selector);\n    }\n    /**\n     * Adds an empty action in the mutex. Can be used to wait for some options\n     * to be initialized before doing something else.\n     *\n     * @returns {Promise}\n     */\n    waitForEmptyMutexAction() {\n        if (this.snippetsMenu) {\n            return this.snippetsMenu.execWithLoadingEffect(() => null, false);\n        }\n        return Promise.resolve();\n    }\n    getColorpickerTemplate() {\n        // Public user using the editor may have a colorpalette but with\n        // the default wysiwyg ones.\n        if (!session.is_website_user) {\n            return this.getColorPickerTemplateService();\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    _getRecordInfo() {\n        const { res_model: resModel, res_id: resId } = this.options.recordInfo;\n        return { resModel, resId };\n    }\n    /**\n     * Returns an instance of the snippets menu.\n     *\n     * @param {Object} [options]\n     * @returns {widget}\n     */\n    async _createSnippetsMenuInstance(options={}) {\n        const snippetsEditor = await odoo.loader.modules.get('@web_editor/js/editor/snippets.editor')[Symbol.for('default')];\n        const { SnippetsMenu } = snippetsEditor;\n        return new SnippetsMenu(this, Object.assign({\n            wysiwyg: this,\n            selectorEditableArea: '.o_editable',\n        }, options));\n    }\n    _setToolbarProps() {\n        this.state.toolbarProps = {\n            ...this.options.toolbarOptions,\n            onColorpaletteDropdownShow: this.onColorpaletteDropdownShow.bind(this),\n            onColorpaletteDropdownHide: this.onColorpaletteDropdownHide.bind(this),\n            textColorPaletteProps: this.colorPalettesProps.text,\n            backgroundColorPaletteProps: this.colorPalettesProps.background,\n        }\n    }\n    _configureToolbar(options) {\n        const $toolbar = $(this.toolbarEl);\n        // Prevent selection loss when interacting with the toolbar buttons.\n        $toolbar.find('.btn-group').on('mousedown', e => {\n            if (\n                // Prevent when clicking on btn-group but not on dropdown items.\n                !e.target.closest('.dropdown-menu') ||\n                // Unless they have a data-call in which case there is an editor\n                // command that is bound to it so we need to preventDefault.\n                e.target.closest('.btn') && e.target.closest('.btn').getAttribute('data-call')\n            ) {\n                e.preventDefault();\n            }\n        });\n        const openTools = e => {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            switch (e.currentTarget.id) {\n                case 'create-link':\n                    this.toggleLinkTools();\n                    break;\n                case 'media-insert':\n                case 'media-replace':\n                    this.openMediaDialog({ node: this.lastMediaClicked });\n                    break;\n                case 'media-description': {\n                    const allEscQuots = /&quot;/g;\n                    const alt = ($(this.lastMediaClicked).attr('alt') || \"\").replace(allEscQuots, '\"');\n                    const tag_title = (\n                        $(this.lastMediaClicked).attr('title') ||\n                        $(this.lastMediaClicked).data('original-title') ||\n                        \"\"\n                    ).replace(allEscQuots, '\"');\n\n                    this.env.services.dialog.add(AltDialog, {\n                        alt,\n                        tag_title,\n                        confirm: (newAlt, newTitle) => {\n                            if (newAlt) {\n                                this.lastMediaClicked.setAttribute('alt', newAlt);\n                            } else {\n                                this.lastMediaClicked.removeAttribute('alt');\n                            }\n                            if (newTitle) {\n                                this.lastMediaClicked.setAttribute('title', newTitle);\n                            } else {\n                                this.lastMediaClicked.removeAttribute('title');\n                            }\n                        },\n                    });\n                    break;\n                }\n                case 'open-chatgpt': {\n                    this.openChatGPTDialog(this.odooEditor.document.getSelection()?.isCollapsed ? 'prompt' : 'alternatives');\n                    break;\n                }\n            }\n        };\n        if (!options.snippets) {\n            $toolbar.find('#justify, #media-insert').remove();\n        }\n        $toolbar.find('#image-fullscreen').click(() => {\n            if (!this.lastMediaClicked?.src) {\n                return;\n            }\n            this.showImageFullscreen(this.lastMediaClicked.src);\n    })\n        $toolbar.find('#media-insert, #media-replace, #media-description').click(openTools);\n        $toolbar.find('#create-link').click(openTools);\n        $toolbar.find('#open-chatgpt').click(openTools);\n        $toolbar.find('#image-shape div, #fa-spin').click(e => {\n            if (!this.lastMediaClicked) {\n                return;\n            }\n            this.lastMediaClicked.classList.toggle(e.target.id);\n            e.target.classList.toggle('active', $(this.lastMediaClicked).hasClass(e.target.id));\n        });\n        const $imageWidthButtons = $toolbar.find('#image-width div');\n        $imageWidthButtons.click(e => {\n            if (!this.lastMediaClicked) {\n                return;\n            }\n            this.lastMediaClicked.style.width = e.target.id;\n            for (const button of $imageWidthButtons) {\n                button.classList.toggle('active', this.lastMediaClicked.style.width === button.id);\n            }\n        });\n        $toolbar.find('#image-padding .dropdown-item').click(e => {\n            if (!this.lastMediaClicked) {\n                return;\n            }\n            $(this.lastMediaClicked).removeClass((index, className) => (\n                (className.match(/(^|\\s)padding-\\w+/g) || []).join(' ')\n            )).addClass(e.target.dataset.class);\n        });\n        $toolbar.on('mousedown', e => {\n            const justifyBtn = e.target.closest('#justify div.btn');\n            if (!justifyBtn || !this.lastMediaClicked) {\n                return;\n            }\n            e.originalEvent.stopImmediatePropagation();\n            e.originalEvent.stopPropagation();\n            e.originalEvent.preventDefault();\n            const mode = justifyBtn.id.replace('justify', '').toLowerCase();\n            const classes = mode === 'center' ? ['d-block', 'mx-auto'] : ['float-' + mode];\n            const doAdd = classes.some(className => !this.lastMediaClicked.classList.contains(className));\n            this.lastMediaClicked.classList.remove('float-start', 'float-end');\n            if (this.lastMediaClicked.classList.contains('mx-auto')) {\n                this.lastMediaClicked.classList.remove('d-block', 'mx-auto');\n            }\n            if (doAdd) {\n                this.lastMediaClicked.classList.add(...classes);\n            }\n            this._updateMediaJustifyButton(justifyBtn.id);\n        });\n        $toolbar.find('#image-crop').click(() => this._showImageCrop());\n        $toolbar.find('#image-transform').click(e => {\n            const sel = document.getSelection();\n            sel.removeAllRanges();\n            if (!this.lastMediaClicked) {\n                return;\n            }\n            const $image = $(this.lastMediaClicked);\n            if ($image.data('transfo-destroy')) {\n                $image.removeData('transfo-destroy');\n                return;\n            }\n            $image.transfo({document: this.odooEditor.document});\n            const destroyTransfo = () => {\n                $image.transfo('destroy');\n                $(this.odooEditor.document).off('mousedown', mousedown).off('mouseup', mouseup);\n                this.odooEditor.document.removeEventListener('keydown', keydown);\n            }\n            const mouseup = () => {\n                $('#image-transform').toggleClass('active', $image.is('[style*=\"transform\"]'));\n            };\n            $(this.odooEditor.document).on('mouseup', mouseup);\n            const mousedown = mousedownEvent => {\n                if (!$(mousedownEvent.target).closest('.transfo-container').length) {\n                    destroyTransfo();\n                }\n                if ($(mousedownEvent.target).closest('#image-transform').length) {\n                    $image.data('transfo-destroy', true).attr('style', ($image.attr('style') || '').replace(/[^;]*transform[\\w:]*;?/g, ''));\n                }\n                $image.trigger('content_changed');\n            };\n            $(this.odooEditor.document).on('mousedown', mousedown);\n            const keydown = keydownEvent => {\n                if (keydownEvent.key === 'Escape') {\n                    keydownEvent.stopImmediatePropagation();\n                    destroyTransfo();\n                }\n            };\n            this.odooEditor.document.addEventListener('keydown', keydown);\n        });\n        $toolbar.find('#image-delete').click(e => {\n            if (!this.lastMediaClicked) {\n                return;\n            }\n            $(this.lastMediaClicked).remove();\n            this.lastMediaClicked = undefined;\n            this.odooEditor.toolbarHide();\n        });\n        $toolbar.find('#fa-resize div').click(e => {\n            if (!this.lastMediaClicked) {\n                return;\n            }\n            const $target = $(this.lastMediaClicked);\n            const sValue = e.target.dataset.value;\n            $target.attr('class', $target.attr('class').replace(/\\s*fa-[0-9]+x/g, ''));\n            if (+sValue > 1) {\n                $target.addClass('fa-' + sValue + 'x');\n            }\n            this._updateFaResizeButtons();\n        });\n        if (!options.snippets) {\n            // Scroll event does not bubble.\n            document.addEventListener('scroll', this._onScroll, true);\n        }\n    }\n\n    _showImageCrop() {\n        if (!this.lastMediaClicked) {\n            return;\n        }\n        this.imageCropProps.media = this.lastMediaClicked;\n        this.imageCropProps.showCount++;\n        this.odooEditor.toolbarHide();\n        $(this.lastMediaClicked).on('image_cropper_destroyed', () => this.odooEditor.toolbarShow());\n    }\n    /**\n     * @private\n     * @param {jQuery} $\n     * @param {String} colorType 'text' or 'background'\n     * @returns {String} color\n     */\n    _getSelectedColor($, colorType) {\n        const selection = this.odooEditor.document.getSelection();\n        if (!selection) return;\n        const range = selection.rangeCount && selection.getRangeAt(0);\n        const targetNode = range && range.startContainer;\n        const targetElement = targetNode && targetNode.nodeType === Node.ELEMENT_NODE\n            ? targetNode\n            : targetNode && targetNode.parentNode;\n        const backgroundImage = $(targetElement).css('background-image');\n        let backgroundGradient = false;\n        if (weUtils.isColorGradient(backgroundImage)) {\n            const textGradient = targetElement.classList.contains('text-gradient');\n            if (colorType === \"text\" && textGradient || colorType !== \"text\" && !textGradient) {\n                backgroundGradient = backgroundImage;\n            }\n        }\n        return backgroundGradient || $(targetElement).css(colorType === \"text\" ? 'color' : 'backgroundColor');\n    }\n    onColorpaletteDropdownHide(ev) {\n        return !(ev.clickEvent && ev.clickEvent.__isColorpickerClick);\n    }\n    onColorpaletteDropdownShow(colorType) {\n        const selectedColor = this._getSelectedColor($, colorType);\n        this.colorPalettesProps[colorType].resetTabCount++;\n        this.colorPalettesProps[colorType].selectedColor = selectedColor;\n\n        const selection = this.odooEditor.document.getSelection();\n        const range = selection.rangeCount && selection.getRangeAt(0);\n        this.hadNonCollapsedSelectionBeforeColorpicker = range && !selection.isCollapsed;\n\n        // The color_leave event will revert the mutations with\n        // `historyRevertCurrentStep`. We must stash the current\n        // mutations to prevent them from being reverted.\n        this.odooEditor.historyStash();\n    }\n    getColorPaletteTabChangeHandler(colorType) {\n        return (selectedTab) => {\n            this.colorPalettesProps[colorType].selectedTab = selectedTab;\n        }\n    }\n    _processAndApplyColor(colorType, color, previewMode) {\n        if (color && !isCSSColor(color) && !weUtils.isColorGradient(color)) {\n            color = (colorType === \"text\" ? 'text-' : 'bg-') + color;\n        }\n        const selectedTds = this.odooEditor.document.querySelectorAll('td.o_selected_td');\n        const applyTransparency =\n            color.startsWith('#') && // Check for hex color.\n            !selectedTds.length && // Do not apply to table cells.\n            colorType === 'background' && // Only apply on bg color.\n            // Check if color is coming from theme-colors tab.\n            this.colorPalettesProps.background.selectedTab === 'theme-colors';\n        // Apply default transparency to the selected common color to make\n        // text highlighting more usable between light and dark modes.\n        if (applyTransparency) {\n            const HEX_OPACITY = '99';\n            color = color.concat(HEX_OPACITY);\n        }\n        let coloredElements = this.odooEditor.execCommand('applyColor', color, colorType === 'text' ? 'color' : 'backgroundColor', this.lastMediaClicked);\n        // Some nodes returned by applyColor can be removed of the document by the sanitization in historyStep\n        coloredElements = coloredElements.filter(element => this.odooEditor.document.contains(element));\n\n        const coloredTds = coloredElements && coloredElements.length && Array.isArray(coloredElements) && coloredElements.filter(coloredElement => coloredElement.classList.contains('o_selected_td'));\n        if (coloredTds.length) {\n            const propName = colorType === 'text' ? 'color' : 'background-color';\n            for (const td of coloredTds) {\n                // Make it important so it has priority over selection color.\n                td.style.setProperty(propName, td.style[propName], previewMode ? 'important' : '');\n            }\n        } else if (!this.lastMediaClicked && coloredElements && coloredElements.length && Array.isArray(coloredElements)) {\n            // Ensure the selection in the fonts tags, otherwise an undetermined\n            // race condition could generate a wrong selection later.\n            const first = coloredElements[0];\n            const last = coloredElements[coloredElements.length - 1];\n\n            const sel = this.odooEditor.document.getSelection();\n            sel.removeAllRanges();\n            const range = new Range();\n            range.setStart(first, 0);\n            range.setEnd(...endPos(last));\n            sel.addRange(getDeepRange(this.odooEditor.editable, { range }));\n        }\n\n        const hexColor = this._colorToHex(color);\n        this.odooEditor.updateColorpickerLabels({\n            [colorType === 'text' ? 'text' : 'hiliteColor']: hexColor,\n        });\n    }\n    _colorToHex(color) {\n        if (color.startsWith('#')) {\n            return color;\n        } else if (weUtils.isColorGradient(color)) {\n            // return gradient the way it is: updateColorpickerLabels will handle it\n            return color;\n        } else {\n            let rgbColor;\n            if (color.startsWith('rgb')) {\n                rgbColor = color;\n            } else {\n                const $font = $(`<font class=\"${color}\"/>`);\n                $(document.body).append($font);\n                const propertyName = color.startsWith('text') ? 'color' : 'backgroundColor';\n                rgbColor = $font.css(propertyName);\n                $font.remove();\n            }\n            return rgbToHex(rgbColor);\n        }\n    }\n    /**\n     * Handle custom keyboard shortcuts.\n     */\n    _handleShortcuts(e) {\n        // Open the link tool when CTRL+K is pressed.\n        if (this.options.bindLinkTool && e && e.key === 'k' && (e.ctrlKey || e.metaKey)) {\n            e.preventDefault();\n            this.openLinkToolsFromSelection();\n        }\n        // Override selectAll (CTRL+A) to restrict it to the editable zone / current snippet and prevent traceback.\n        if (e && e.key === 'a' && (e.ctrlKey || e.metaKey)) {\n            e.preventDefault();\n            const selection = this.odooEditor.document.getSelection();\n            const containerSelector = '#wrap>*, .oe_structure>*, [contenteditable]';\n            const container =\n                (selection &&\n                    closestElement(selection.anchorNode, containerSelector)) ||\n                // In case a suitable container could not be found then the\n                // selection is restricted inside the editable area.\n                this.$editable.find(containerSelector)[0];\n            if (container) {\n                const range = document.createRange();\n                range.selectNodeContents(container);\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        }\n    }\n    /**\n     * Update any editor UI that is not handled by the editor itself.\n     */\n    _updateEditorUI(e) {\n        let selection = this.odooEditor.document.getSelection();\n        if (!selection) return;\n        const anchorNode = selection.anchorNode;\n        if (isProtected(anchorNode)) {\n            return;\n        }\n\n        this.odooEditor.automaticStepSkipStack();\n        // We need to use the editor's window so the tooltip displays in its\n        // document even if it's in an iframe.\n        const editorWindow = this.odooEditor.document.defaultView;\n        const $target = e ? editorWindow.$(e.target) : editorWindow.$();\n        // Restore paragraph dropdown button's default ID.\n        this.toolbarEl.querySelector('#mediaParagraphDropdownButton')?.setAttribute('id', 'paragraphDropdownButton');\n        // Only show the media tools in the toolbar if the current selected\n        // snippet is a media.\n        const isInMedia = $target.is(mediaSelector) && !$target.parent().hasClass('o_stars') && e.target &&\n            (e.target.isContentEditable || (e.target.parentElement && e.target.parentElement.isContentEditable));\n        this.toolbarEl.classList.toggle('oe-media', isInMedia);\n\n        for (const el of this.toolbarEl.querySelectorAll([\n            '#image-preview',\n            '#image-shape',\n            '#image-width',\n            '#image-padding',\n            '#image-edit',\n            '#media-replace',\n            ].join(','))) {\n            el.classList.toggle('d-none', !isInMedia);\n        }\n        // The image replace button is in the image options when the sidebar\n        // exists.\n        if (this.snippetsMenu && !this.snippetsMenu.folded && $target.is('img')) {\n            this.toolbarEl.querySelector('#media-replace')?.classList.toggle('d-none', true);\n        }\n        // Only show the image-transform, image-crop and media-description\n        // buttons if the current selected snippet is an image.\n        for (const el of this.toolbarEl.querySelectorAll([\n            '#image-transform',\n            '#image-crop',\n            '#media-description',\n            ].join(','))) {\n            el.classList.toggle('d-none', !isInMedia || !$target.is('img'));\n        }\n        this.lastMediaClicked = isInMedia && e.target;\n        this.lastElement = $target[0];\n        // Hide the irrelevant text buttons for media.\n        for (const el of this.toolbarEl.querySelectorAll([\n            '#style',\n            '#decoration',\n            '#font-size',\n            '#justifyFull',\n            '#list',\n            '#colorInputButtonGroup',\n            '#media-insert', // \"Insert media\" should be replaced with \"Replace media\".\n            '#chatgpt', // Chatgpt should be removed when media is in selection.\n        ].join(','))){\n            el.classList.toggle('d-none', isInMedia);\n        }\n        // Some icons are relevant for icons, that aren't for other media.\n        for (const el of this.toolbarEl.querySelectorAll('#colorInputButtonGroup')) {\n            el.classList.toggle('d-none', isInMedia && !$target.is('.fa'));\n        }\n        for (const el of this.toolbarEl.querySelectorAll('.only_fa')) {\n            el.classList.toggle('d-none', !isInMedia || !$target.is('.fa'));\n        }\n        // Hide unsuitable buttons for icon\n        if ($target.is('.fa')) {\n            for (const el of this.toolbarEl.querySelectorAll([\n                '#image-shape',\n                '#image-width',\n                '#image-edit',\n            ].join(','))) {\n                el.classList.toggle('d-none', true);\n            }\n        }\n        // Toggle the toolbar arrow.\n        this.toolbarEl.classList.toggle('noarrow', isInMedia);\n        // Unselect all media.\n        this.$editable.find('.o_we_selected_image').removeClass('o_we_selected_image');\n        if (isInMedia) {\n            this.odooEditor.automaticStepSkipStack();\n            // Select the media in the DOM.\n            const selection = this.odooEditor.document.getSelection();\n            const range = this.odooEditor.document.createRange();\n            range.selectNode(this.lastMediaClicked);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            // Toggle the 'active' class on the active image tool buttons.\n            for (const button of this.toolbarEl.querySelectorAll('#image-shape div, #fa-spin')) {\n                button.classList.toggle('active', $(e.target).hasClass(button.id));\n            }\n            for (const button of this.toolbarEl.querySelectorAll('#image-width div')) {\n                button.classList.toggle('active', e.target.style.width === button.id);\n            }\n            this._updateMediaJustifyButton();\n            this._updateFaResizeButtons();\n        }\n        if (isInMedia && !this.options.onDblClickEditableMedia) {\n            // Handle the media/link's tooltip.\n            this.showTooltip = true;\n            this.tooltipTimeouts.push(setTimeout(() => {\n                // Do not show tooltip on double-click and if there is already one\n                if (!this.showTooltip || $target.attr('title') !== undefined) {\n                    return;\n                }\n                // Tooltips need to be cleared before leaving the editor.\n                this.saving_mutex.exec(() => {\n                    const removeTooltip = this.popover.add(e.target, Tooltip, { tooltip: _t('Double-click to edit') });\n                    this.tooltipTimeouts.push(setTimeout(() => removeTooltip(), 800));\n                });\n            }, 400));\n        }\n        // Toolbar might have changed size, update its position.\n        this.odooEditor.updateToolbarPosition();\n        // Update color of already opened colorpickers.\n        setTimeout(() => {\n            for (const colorType in this.colorPalettesProps) {\n                const selectedColor = this._getSelectedColor($, colorType);\n                if (selectedColor) {\n                    // If the palette was already opened (e.g. modifying a gradient), the new DOM state\n                    // must be reflected in the palette, but the tab selection must not be impacted.\n                    this.colorPalettesProps[colorType].selectedColor = selectedColor;\n                }\n            }\n        });\n    }\n    _updateMediaJustifyButton(commandState) {\n        if (!this.lastMediaClicked) {\n            return;\n        }\n        const $paragraphDropdownButton = $(this.toolbarEl).find('#paragraphDropdownButton, #mediaParagraphDropdownButton');\n        // Change the ID to prevent OdooEditor from controlling it as this is\n        // custom behavior for media.\n        $paragraphDropdownButton.attr('id', 'mediaParagraphDropdownButton');\n        let resetAlignment = true;\n        if (!commandState) {\n            const justifyMapping = [\n                ['float-start', 'justifyLeft'],\n                ['mx-auto', 'justifyCenter'],\n                ['float-end', 'justifyRight'],\n            ];\n            commandState = (justifyMapping.find(pair => (\n                this.lastMediaClicked.classList.contains(pair[0]))\n            ) || [])[1];\n            resetAlignment = !commandState;\n        }\n        let newClass;\n        if (commandState) {\n            const direction = commandState.replace('justify', '').toLowerCase();\n            newClass = `fa-align-${direction === 'full' ? 'justify' : direction}`;\n            resetAlignment = !['float-start', 'mx-auto', 'float-end'].some(className => (\n                this.lastMediaClicked.classList.contains(className)\n            ));\n        }\n        for (const button of this.toolbarEl.querySelectorAll('#justify div.btn')) {\n            button.classList.toggle('active', !resetAlignment && button.id === commandState);\n        }\n        $paragraphDropdownButton.removeClass((index, className) => (\n            (className.match(/(^|\\s)fa-align-\\w+/g) || []).join(' ')\n        ));\n        if (commandState && !resetAlignment) {\n            $paragraphDropdownButton.addClass(newClass);\n        } else {\n            // Ensure we always display an icon in the align toolbar button.\n            $paragraphDropdownButton.addClass('fa-align-justify');\n        }\n    }\n    _updateFaResizeButtons() {\n        if (!this.lastMediaClicked) {\n            return;\n        }\n        const match = this.lastMediaClicked.className.match(/\\s*fa-([0-9]+)x/);\n        const value = match && match[1] ? match[1] : '1';\n        for (const button of this.toolbarEl.querySelectorAll('#fa-resize div')) {\n            button.classList.toggle('active', button.dataset.value === value);\n        }\n    }\n    _getEditorOptions(options) {\n        const finalOptions = {...this.defaultOptions, ...options};\n        // autohideToolbar is true by default (false by default if navbar present).\n        finalOptions.autohideToolbar = typeof finalOptions.autohideToolbar === 'boolean'\n            ? finalOptions.autohideToolbar\n            : !finalOptions.snippets;\n        if (finalOptions.inlineStyle) {\n            finalOptions.dropImageAsAttachment = false;\n        }\n\n        return finalOptions;\n    }\n    _getBannerCommand(title, alertClass, iconClass, description, priority) {\n        return {\n            category: _t('Banners'),\n            name: title,\n            priority: priority,\n            description: description,\n            fontawesome: iconClass,\n            isDisabled: () => isSelectionInSelectors('.o_editor_banner') || !this.odooEditor.isSelectionInBlockRoot(),\n            callback: () => {\n                const bannerElement = parseHTML(this.odooEditor.document, `\n                    <div class=\"o_editor_banner o_not_editable lh-1 d-flex align-items-center alert alert-${alertClass} pb-0 pt-3\" role=\"status\" data-oe-protected=\"true\">\n                        <i class=\"fs-4 fa ${iconClass} mb-3\" aria-label=\"${_t(title)}\"></i>\n                        <div class=\"w-100 px-3\" data-oe-protected=\"false\">\n                            <p><br></p>\n                        </div>\n                    </div>\n                `).childNodes[0];\n                this.odooEditor.execCommand('insert', bannerElement);\n                this.odooEditor.activateContenteditable();\n                setSelection(bannerElement.querySelector('.o_editor_banner > div > p'), 0);\n            },\n        }\n    }\n    _insertSnippetMenu() {\n        return this.snippetsMenu.insertBefore(this.$el);\n    }\n    /**\n     * If the element holds a translation, saves it. Otherwise, fallback to the\n     * standard saving but with the lang kept.\n     *\n     * @override\n     */\n    _saveTranslationElement($el, context, withLang = true) {\n        if ($el.data('oe-translation-initial-sha')) {\n            const $els = $el;\n            const translations = {};\n            translations[context.lang] = Object.assign({}, ...$els.toArray().map(\n                (x) => ({\n                    [$(x).data('oe-translation-initial-sha')]: this._getEscapedElement($(x)).html()\n                })\n            ));\n            return this.orm.call(\n                $els.data('oe-model'),\n                'update_field_translations_sha',\n                [\n                    [+$els.data('oe-id')],\n                    $els.data('oe-field'),\n                    translations,\n                ], { context });\n        } else {\n            var viewID = $el.data('oe-id');\n            if (!viewID) {\n                return Promise.resolve();\n            }\n\n            return this.orm.call(\n                'ir.ui.view',\n                'save',\n                [\n                    viewID,\n                    this._getEscapedElement($el).prop('outerHTML'),\n                    !$el.data('oe-expression') && $el.data('oe-xpath') || null, // Note: hacky way to get the oe-xpath only if not a t-field\n                ], { context }\n            );\n        }\n    }\n    _getPowerboxOptions() {\n        const editorOptions = this.options;\n        const categories = [{ name: _t('Banners'), priority: 65 },];\n        const commands = [\n            this._getBannerCommand(_t('Banner Info'), 'info', 'fa-info-circle', _t('Insert an info banner'), 24),\n            this._getBannerCommand(_t('Banner Success'), 'success', 'fa-check-circle', _t('Insert a success banner'), 23),\n            this._getBannerCommand(_t('Banner Warning'), 'warning', 'fa-exclamation-triangle', _t('Insert a warning banner'), 22),\n            this._getBannerCommand(_t('Banner Danger'), 'danger', 'fa-exclamation-circle', _t('Insert a danger banner'), 21),\n            {\n                category: _t('Structure'),\n                name: _t('Quote'),\n                priority: 30,\n                description: _t('Add a blockquote section'),\n                fontawesome: 'fa-quote-right',\n                isDisabled: () => !this.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    this.odooEditor.execCommand('setTag', 'blockquote');\n                },\n            },\n            {\n                category: _t('Structure'),\n                name: _t('Code'),\n                priority: 20,\n                description: _t('Add a code section'),\n                fontawesome: 'fa-code',\n                isDisabled: () => !this.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    this.odooEditor.execCommand('setTag', 'pre');\n                },\n            },\n            {\n                category: _t('Basic blocks'),\n                name: _t('Signature'),\n                description: _t('Insert your signature'),\n                fontawesome: 'fa-pencil-square-o',\n                isDisabled: () => !this.odooEditor.isSelectionInBlockRoot(),\n                callback: async () => {\n                    const uid = Array.isArray(session.user_id) ? session.user_id[0] : session.user_id;\n                    const [user] = await this.orm.read(\n                        'res.users',\n                        [uid],\n                        ['signature'],\n                    );\n                    if (user && user.signature) {\n                        this.odooEditor.execCommand('insert', parseHTML(this.odooEditor.document, user.signature));\n                    }\n                },\n            },\n            {\n                category: _t('AI Tools'),\n                name: _t('ChatGPT'),\n                description: _t('Generate or transform content with AI.'),\n                fontawesome: 'fa-magic',\n                priority: 1,\n                isDisabled: () => !this.odooEditor.isSelectionInBlockRoot(),\n                callback: async () => this.openChatGPTDialog(),\n            },\n        ];\n        if (!editorOptions.inlineStyle) {\n            commands.push(\n                {\n                    category: _t('Structure'),\n                    name: _t('2 columns'),\n                    priority: 13,\n                    description: _t('Convert into 2 columns'),\n                    fontawesome: 'fa-columns',\n                    callback: () => this.odooEditor.execCommand('columnize', 2, editorOptions.insertParagraphAfterColumns),\n                    isDisabled: () => {\n                        if (!this.odooEditor.isSelectionInBlockRoot()) {\n                            return true;\n                        }\n                        const anchor = this.odooEditor.document.getSelection().anchorNode;\n                        const row = closestElement(anchor, '.o_text_columns .row');\n                        return row && row.childElementCount === 2;\n                    },\n                },\n                {\n                    category: _t('Structure'),\n                    name: _t('3 columns'),\n                    priority: 12,\n                    description: _t('Convert into 3 columns'),\n                    fontawesome: 'fa-columns',\n                    callback: () => this.odooEditor.execCommand('columnize', 3, editorOptions.insertParagraphAfterColumns),\n                    isDisabled: () => {\n                        if (!this.odooEditor.isSelectionInBlockRoot()) {\n                            return true;\n                        }\n                        const anchor = this.odooEditor.document.getSelection().anchorNode;\n                        const row = closestElement(anchor, '.o_text_columns .row');\n                        return row && row.childElementCount === 3;\n                    },\n                },\n                {\n                    category: _t('Structure'),\n                    name: _t('4 columns'),\n                    priority: 11,\n                    description: _t('Convert into 4 columns'),\n                    fontawesome: 'fa-columns',\n                    callback: () => this.odooEditor.execCommand('columnize', 4, editorOptions.insertParagraphAfterColumns),\n                    isDisabled: () => {\n                        if (!this.odooEditor.isSelectionInBlockRoot()) {\n                            return true;\n                        }\n                        const anchor = this.odooEditor.document.getSelection().anchorNode;\n                        const row = closestElement(anchor, '.o_text_columns .row');\n                        return row && row.childElementCount === 4;\n                    },\n                },\n                {\n                    category: _t('Structure'),\n                    name: _t('Remove columns'),\n                    priority: 10,\n                    description: _t('Back to one column'),\n                    fontawesome: 'fa-columns',\n                    callback: () => this.odooEditor.execCommand('columnize', 0),\n                    isDisabled: () => {\n                        if (!this.odooEditor.isSelectionInBlockRoot()) {\n                            return true;\n                        }\n                        const anchor = this.odooEditor.document.getSelection().anchorNode;\n                        const row = closestElement(anchor, '.o_text_columns .row');\n                        return !row;\n                    },\n                },\n                {\n                    category: _t('Widgets'),\n                    name: _t('Emoji'),\n                    priority: 70,\n                    description: _t('Add an emoji'),\n                    fontawesome: 'fa-smile-o',\n                    callback: () => {\n                        this.showEmojiPicker();\n                    },\n                },\n            );\n        }\n        if (editorOptions.allowCommandLink) {\n            categories.push({ name: _t('Navigation'), priority: 40 });\n            commands.push(\n                {\n                    category: _t('Navigation'),\n                    name: _t('Link'),\n                    priority: 40,\n                    description: _t('Add a link'),\n                    fontawesome: 'fa-link',\n                    callback: () => {\n                        this.toggleLinkTools({forceDialog: true});\n                    },\n                },\n                {\n                    category: _t('Navigation'),\n                    name: _t('Button'),\n                    priority: 30,\n                    description: _t('Add a button'),\n                    fontawesome: 'fa-link',\n                    callback: () => {\n                        this.toggleLinkTools({forceDialog: true});\n                        // Force the button style after the link modal is open.\n                        setTimeout(() => {\n                            $(\".o_link_dialog .link-style[value=primary]\").click();\n                        }, 150);\n                    },\n                },\n            );\n        }\n        if (editorOptions.allowCommandImage || editorOptions.allowCommandVideo) {\n            categories.push({ name: _t('Media'), priority: 50 });\n        }\n        if (editorOptions.allowCommandImage) {\n            commands.push({\n                category: _t('Media'),\n                name: _t('Image'),\n                priority: 40,\n                description: _t('Insert an image'),\n                fontawesome: 'fa-file-image-o',\n                callback: () => {\n                    this.openMediaDialog();\n                },\n            });\n        }\n        if (editorOptions.allowCommandVideo) {\n            commands.push({\n                category: _t('Media'),\n                name: _t('Video'),\n                priority: 30,\n                description: _t('Insert a video'),\n                fontawesome: 'fa-file-video-o',\n                callback: () => {\n                    this.openMediaDialog({noVideos: false, noImages: true, noIcons: true, noDocuments: true});\n                },\n            });\n        }\n        if (editorOptions.powerboxCategories) {\n            categories.push(...editorOptions.powerboxCategories);\n        }\n        if (editorOptions.powerboxCommands) {\n            commands.push(...editorOptions.powerboxCommands);\n        }\n        return {commands, categories};\n    }\n\n    /**\n     * Returns the editable areas on the page.\n     *\n     * @returns {jQuery}\n     */\n    editable() {\n        return $('#wrapwrap [data-oe-model]')\n            .not('.o_not_editable')\n            .filter(function () {\n                return !$(this).closest('.o_not_editable').length;\n            })\n            .not('link, script')\n            .not('[data-oe-readonly]')\n            .not('img[data-oe-field=\"arch\"], br[data-oe-field=\"arch\"], input[data-oe-field=\"arch\"]')\n            .not('.oe_snippet_editor')\n            .add('.o_editable');\n    }\n\n    /**\n     * Searches all the dirty element on the page or given element and saves them one by one. If\n     * one cannot be saved, this notifies it to the user and restarts rte\n     * edition.\n     *\n     * @param {Object} [context] - the context to use for saving rpc, default to\n     *                           the editor context found on the page\n     * @param {Object} [element] - Specific given element to save\n     * @return {Promise} rejected if the save cannot be done\n     */\n    _saveViewBlocks(context, element = false) {\n        // TODO should be review to probably not search in the whole body,\n        // iframe or not.\n        // If the element is given, then search within not from the document.\n        const $ = element ? getJqueryFromDocument(element) : getJqueryFromDocument(this.$editable[0].ownerDocument);\n        const $allBlocks = $((this.options || {}).savableSelector).filter(\n            this.options.enableTranslation\n            ? '.o_dirty, .o_delay_translation'\n            : '.o_dirty');\n\n        const $dirty = $('.o_dirty');\n        $dirty\n            .removeAttr('contentEditable')\n            .removeClass('o_dirty oe_carlos_danger o_is_inline_editable');\n\n        const $delay_translation = $('.o_delay_translation');\n        $delay_translation.removeClass('o_delay_translation');\n\n        $('.o_editable')\n            .removeClass('o_editable o_is_inline_editable o_editable_date_field_linked o_editable_date_field_format_changed');\n\n        const saveElementFuncName = this.options.enableTranslation\n            ? '_saveTranslationElement'\n            : '_saveElement';\n\n        // Group elements to save if possible.\n        const groupedElements = groupBy($allBlocks.toArray(), el => {\n            const model = el.dataset.oeModel;\n            const field = el.dataset.oeField;\n\n            // There are elements which have no linked model as something\n            // special is to be done \"to save them\" (potential override to\n            // `_saveElement` which is expected to be called for each unique\n            // dirty element). In that case, do not group those elements.\n            if (!model) {\n                return uniqueId(\"special-element-to-save-\");\n            }\n\n            // Do not group elements which are parts of views, unless we are\n            // in translate mode.\n            if (!this.options.enableTranslation\n                    && (model === 'ir.ui.view' && field === 'arch')) {\n                return uniqueId(\"view-part-to-save-\");\n            }\n\n            // Otherwise, group elements which are from the same field of the\n            // same record (`_saveElement` will only consider the first one and\n            // `_saveTranslationElement` can handle the set if it makes sense).\n            return `${model}::${el.dataset.oeId}::${field}`;\n        });\n        const proms = Object.values(groupedElements).map(els => {\n            const $els = $(els);\n\n            $els.find('[class]').filter(function () {\n                if (!this.getAttribute('class').match(/\\S/)) {\n                    this.removeAttribute('class');\n                }\n            });\n\n            // TODO: Add a queue with concurrency limit in webclient\n            return new Promise((resolve, reject) => {\n                return this.saving_mutex.exec(() => {\n                    return this[saveElementFuncName]($els, context || this.options.context)\n                    .then(function () {\n                        $els.removeClass('o_dirty');\n                        resolve();\n                    })\n                    .catch(error => {\n                        // because ckeditor regenerates all the dom, we can't just\n                        // setup the popover here as everything will be destroyed by\n                        // the DOM regeneration. Add markings instead, and returns a\n                        // new rejection with all relevant info\n                        var id = uniqueId(\"carlos_danger_\");\n                        $els.addClass('o_dirty o_editable oe_carlos_danger ' + id);\n                        $('.o_editable.' + id)\n                            .removeClass(id)\n                            .popover({\n                                trigger: 'hover',\n                                content: error.data?.message || '',\n                                placement: 'auto',\n                            })\n                            .popover('show');\n                        reject();\n                    });\n                });\n            });\n        });\n        return Promise.all(proms).then(function () {\n            window.onbeforeunload = null;\n        });\n    }\n    // TODO unused => remove or reuse as it should be\n    _attachTooltips() {\n        $(document.body)\n            .tooltip({\n                selector: '[data-oe-readonly]',\n                container: 'body',\n                trigger: 'hover',\n                delay: {'show': 1000, 'hide': 100},\n                placement: 'bottom',\n                title: _t(\"Readonly field\")\n            })\n            .on('click', function () {\n                $(this).tooltip('hide');\n            });\n    }\n    /**\n     * Gets jQuery cloned element with internal text nodes escaped for XML\n     * storage.\n     *\n     * @private\n     * @param {jQuery} $el\n     * @return {jQuery}\n     */\n    _getEscapedElement($el) {\n        var escaped_el = $el.clone();\n        var to_escape = escaped_el.find('*').addBack();\n        to_escape = to_escape.not(to_escape.filter('object,iframe,script,style,[data-oe-model][data-oe-model!=\"ir.ui.view\"]').find('*').addBack());\n        to_escape.contents().each(function () {\n            if (this.nodeType === 3) {\n                this.nodeValue = $('<div />').text(this.nodeValue).html();\n            }\n        });\n        return escaped_el;\n    }\n    /**\n     * Saves one (dirty) element of the page.\n     *\n     * @private\n     * @param {jQuery} $el - the element to save\n     * @param {Object} context - the context to use for the saving rpc\n     */\n    async _saveElement($el, context) {\n        var viewID = $el.data('oe-id');\n        if (!viewID) {\n            return Promise.resolve();\n        }\n\n        // remove ZeroWidthSpace from odoo field value\n        // ZeroWidthSpace may be present from OdooEditor edition process\n        let escapedHtml = this._getEscapedElement($el).prop('outerHTML');\n\n        const result = this.orm.call('ir.ui.view', 'save', [\n            viewID,\n            escapedHtml,\n            !$el.data('oe-expression') && $el.data('oe-xpath') || null\n        ], {\n            context: {\n                ...context,\n                // TODO: Restore the delay translation feature once it's fixed,\n                //       see commit msg for more info.\n                delay_translations: false,\n            },\n        });\n        return result;\n    }\n\n    /**\n     * Reloads the page in non-editable mode, with the right scrolling.\n     *\n     * @private\n     * @returns {Promise} (never resolved, the page is reloading anyway)\n     */\n    _reload() {\n        window.location.hash = 'scrollTop=' + window.document.body.scrollTop;\n        if (window.location.search.indexOf('enable_editor') >= 0) {\n            window.location.href = window.location.href.replace(/&?enable_editor(=[^&]*)?/g, '');\n        } else {\n            window.location.reload(true);\n        }\n        return new Promise(function () {});\n    }\n    _onAttachmentChange(attachment) {\n        if (this.options.onAttachmentChange) {\n            this.options.onAttachmentChange(attachment);\n        }\n    }\n    _onDblClickEditableMedia(ev) {\n        const $el = $(ev.currentTarget);\n        $el.selectElement();\n        if (!$el.parent().hasClass('o_stars')) {\n            // Waiting for all the options to be initialized before\n            // opening the media dialog and only if the media has not\n            // been deleted in the meantime.\n            this.waitForEmptyMutexAction().then(() => {\n                if ($el[0].parentElement) {\n                    this.openMediaDialog({ node: $el[0] });\n                }\n            });\n        }\n    }\n    _onSelectionChange() {\n        if (this.odooEditor.autohideToolbar && this.linkPopover) {\n            const selectionInLink = getInSelection(this.odooEditor.document, 'a') === this.linkPopover.target;\n            const isVisible = this.linkPopover.el.offsetParent;\n            if (isVisible && !selectionInLink) {\n                this.linkPopover.hide();\n            }\n        }\n    }\n    _onDocumentMousedown(e) {\n        if (!e.target.classList.contains('o_editable_date_field_linked')) {\n            this.$editable.find('.o_editable_date_field_linked').removeClass('o_editable_date_field_linked');\n        }\n        const closestDialog = e.target.closest('.o_dialog, .o_web_editor_dialog');\n        if (\n            e.target.closest('.oe-toolbar,.oe-powerbox-wrapper,.o_we_crop_widget') ||\n            (closestDialog && closestDialog.querySelector('.o_select_media_dialog, .o_link_dialog'))\n        ) {\n            this._shouldDelayBlur = true;\n        } else {\n            if (this._pendingBlur && !e.target.closest('.o_wysiwyg_wrapper')) {\n                this.options.onWysiwygBlur && this.options.onWysiwygBlur();\n                this._pendingBlur = false;\n            }\n            this._shouldDelayBlur = false;\n        }\n    }\n    _onBlur() {\n        if (this._shouldDelayBlur) {\n            this._pendingBlur = true;\n        } else {\n            this.options.onWysiwygBlur && this.options.onWysiwygBlur();\n        }\n    }\n    _onScroll(ev) {\n        if (ev.target.contains(this.$editable[0])) {\n            this.scrollContainer = ev.target;\n            this.odooEditor.updateToolbarPosition();\n        }\n    }\n    _signalOffline() {\n        this._isOnline = false;\n    }\n    async _signalOnline() {\n        clearTimeout(this._offlineTimeout);\n        this._offlineTimeout = undefined;\n\n        if (this._isOnline || !navigator.onLine) {\n            return;\n        }\n        this._isOnline = true;\n        if (!this.ptp) return;\n\n        // If it was disconnected to some peers, send the join signal again.\n        this.ptp.notifyAllClients('ptp_join');\n        // Send last step to all peers. If the peers cannot add the step, they\n        // will ask for missing steps.\n        this.ptp.notifyAllClients('oe_history_step', peek(this.odooEditor.historyGetSteps()), { transport: 'rtc' });\n    }\n    /**\n     * Process missing steps received from a peer.\n     *\n     * @private\n     * @param {Array<Object>|-1} missingSteps\n     * @return {Promise<boolean>} true if missing steps have been processed\n     */\n    async _processMissingSteps(missingSteps) {\n        // If missing steps === -1, it means that either:\n        // - the step.clientId has a stale document\n        // - the step.clientId has a snapshot and does not includes the step in\n        //   its history\n        // - if another share history id\n        //   - because the step.clientId has reset from the server and\n        //     step.clientId is not synced with this client\n        //   - because the step.clientId is in a network partition\n        if (missingSteps === -1 || !missingSteps.length) {\n            return false;\n        }\n        this.ptp && this.odooEditor.onExternalHistorySteps(missingSteps);\n        return true;\n    }\n    _showConflictDialog() {\n        if (this._conflictDialogOpened) return;\n        const content = markup(this.odooEditor.editable.cloneNode(true).outerHTML);\n        this._conflictDialogOpened = true;\n        this.env.services.dialog.add(ConflictDialog, {\n            content,\n            close: () => this._conflictDialogOpened = false,\n        });\n    }\n    _getLastHistoryStepId(value) {\n        const matchId = value.match(/data-last-history-steps=\"(?:[0-9]+,)*([0-9]+)\"/);\n        return matchId && matchId[1];\n    }\n    _generateClientId() {\n        // No need for secure random number.\n        return Math.floor(Math.random() * Math.pow(2, 52)).toString();\n    }\n    _getNewPtp() {\n        const rpcMutex = new Mutex();\n        const {collaborationChannel} = this.options;\n        const modelName = collaborationChannel.collaborationModelName;\n        const fieldName = collaborationChannel.collaborationFieldName;\n        const resId = collaborationChannel.collaborationResId;\n\n        // Wether or not the history has been sent or received at least\n        // once.\n        this._historySyncAtLeastOnce = false;\n\n        return new PeerToPeer({\n            peerConnectionConfig: { iceServers: this._iceServers },\n            currentClientId: this._currentClientId,\n            broadcastAll: (rpcData) => {\n                return rpcMutex.exec(async () => {\n                    return this._serviceRpc('/web_editor/bus_broadcast', {\n                        model_name: modelName,\n                        field_name: fieldName,\n                        res_id: resId,\n                        bus_data: rpcData,\n                    });\n                });\n            },\n            onRequest: {\n                get_start_time: () => this._startCollaborationTime,\n                get_client_name: async () => {\n                    if (!this._userName) {\n                        const [user] = await this.orm.read(\n                            'res.users',\n                            [session.uid],\n                            ['name'],\n                        );\n                        this._userName = user.name;\n                    }\n                    return this._userName;\n                },\n                get_client_avatar: () => `${browser.location.origin}/web/image?model=res.users&field=avatar_128&id=${encodeURIComponent(session.uid)}`,\n                get_missing_steps: (params) => this.odooEditor.historyGetMissingSteps(params.requestPayload),\n                get_history_from_snapshot: () => this._getHistorySnapshot(),\n                get_collaborative_selection: () => this.odooEditor.getCurrentCollaborativeSelection(),\n                recover_document: (params) => {\n                    const { serverDocumentId, fromStepId } = params.requestPayload;\n                    if (!this.odooEditor.historyGetBranchIds().includes(serverDocumentId)) {\n                        return;\n                    }\n                    return {\n                        missingSteps: this.odooEditor.historyGetMissingSteps({ fromStepId }),\n                        snapshot: this._getHistorySnapshot(),\n                    };\n                },\n            },\n            onNotification: async ({ fromClientId, notificationName, notificationPayload }) => {\n                switch (notificationName) {\n                    case 'ptp_remove':\n                        this.odooEditor.multiselectionRemove(notificationPayload);\n                        break;\n                    case 'ptp_disconnect':\n                        this.ptp.removeClient(fromClientId);\n                        this.odooEditor.multiselectionRemove(fromClientId);\n                        break;\n                    case 'rtc_data_channel_open': {\n                        fromClientId = notificationPayload.connectionClientId;\n                        const remoteStartTime = await this.requestClient(fromClientId, 'get_start_time', undefined, { transport: 'rtc' });\n                        if (remoteStartTime === REQUEST_ERROR) return;\n                        this.ptp.clientsInfos[fromClientId].startTime = remoteStartTime;\n\n                        if (!this._historySyncAtLeastOnce) {\n                            const localClient = { id: this._currentClientId, startTime: this._startCollaborationTime };\n                            const remoteClient = { id: fromClientId, startTime: remoteStartTime };\n                            if (isClientFirst(localClient, remoteClient)) {\n                                this._historySyncAtLeastOnce = true;\n                                this._historySyncFinished = true;\n                            } else {\n                                this._resetCollabRequests();\n                                const response = await this._resetFromClient(fromClientId, this._lastCollaborationResetId);\n                                if (response === REQUEST_ERROR) {\n                                    return;\n                                }\n                            }\n                        } else {\n                            // Make both send their last step to each other to\n                            // ensure they are in sync.\n                            this.ptp.notifyAllClients('oe_history_step', peek(this.odooEditor.historyGetSteps()), { transport: 'rtc' });\n                            this._setCollaborativeSelection(fromClientId);\n                        }\n\n                        const getClientNamePromise = this.requestClient(\n                            fromClientId, 'get_client_name', undefined, { transport: 'rtc' }\n                        ).then((clientName) => {\n                            if (clientName === REQUEST_ERROR) return;\n                            this.ptp.clientsInfos[fromClientId].clientName = clientName;\n                            this.odooEditor.multiselectionRefresh();\n                        });\n                        const getClientAvatar = this.requestClient(\n                            fromClientId, 'get_client_avatar', undefined, { transport: 'rtc' }\n                        ).then(clientAvatarUrl => {\n                            if (clientAvatarUrl === REQUEST_ERROR) return;\n                            this.ptp.clientsInfos[fromClientId].clientAvatarUrl = clientAvatarUrl;\n                            this.odooEditor.multiselectionRefresh();\n                        });\n                        await Promise.all([getClientAvatar, getClientNamePromise]);\n                        break;\n                    }\n                    case 'oe_history_step':\n                        if (this._historySyncFinished) {\n                            this.odooEditor.onExternalHistorySteps([notificationPayload]);\n                        } else {\n                            this._historyStepsBuffer.push(notificationPayload);\n                        }\n                        break;\n                    case 'oe_history_set_selection': {\n                        const client = this.ptp.clientsInfos[fromClientId];\n                        if (!client) {\n                            return;\n                        }\n                        const selection = notificationPayload;\n                        selection.clientName = client.clientName;\n                        selection.clientAvatarUrl = client.clientAvatarUrl;\n                        this.odooEditor.onExternalMultiselectionUpdate(selection);\n                        break;\n                    }\n                }\n            }\n        });\n    }\n    _getCollaborationClientAvatarUrl() {\n        return `${browser.location.origin}/web/image?model=res.users&field=avatar_128&id=${encodeURIComponent(session.uid)}`\n    }\n    _stopPeerToPeer() {\n        this._joiningPtp = false;\n        this._ptpJoined = false;\n        this._resetCollabRequests();\n        this.ptp && this.ptp.stop();\n    }\n    _joinPeerToPeer() {\n        this.$editable[0].removeEventListener('focus', this._joinPeerToPeer);\n        if (this._peerToPeerLoading) {\n            return this._peerToPeerLoading.then(async () => {\n                this._joiningPtp = true;\n                if (this._isDocumentStale) {\n                    const success = await this._resetFromServerAndResyncWithClients();\n                    if (!success) return;\n                }\n                this.ptp.notifyAllClients('ptp_join');\n                this._joiningPtp = false;\n                this._ptpJoined = true;\n            });\n        }\n    }\n    async _setCollaborativeSelection(fromClientId) {\n        const remoteSelection = await this.requestClient(fromClientId, 'get_collaborative_selection', undefined, { transport: 'rtc' });\n        if (remoteSelection === REQUEST_ERROR) return;\n        if (remoteSelection) {\n            this.odooEditor.onExternalMultiselectionUpdate(remoteSelection);\n        }\n    }\n    /**\n     * Get peer to peer clients.\n     */\n    _getPtpClients() {\n        const clients = Object.entries(this.ptp.clientsInfos).map(([clientId, clientInfo]) => ({id: clientId, ...clientInfo}));\n        return clients.sort((a, b) => isClientFirst(a, b) ? -1 : 1);\n    }\n    async _getCurrentRecord() {\n        const [record] = await this.orm.read(\n            this.options.collaborationChannel.collaborationModelName,\n            [this.options.collaborationChannel.collaborationResId],\n            [this.options.collaborationChannel.collaborationFieldName],\n        );\n        return record;\n    }\n    _isLastDocumentStale() {\n        if (!this._serverLastStepId) {\n            return false;\n        }\n        return !this.odooEditor.historyGetBranchIds().includes(this._serverLastStepId);\n    }\n    /**\n     * Update the server document last step id and recover from a stale document\n     * if this client does not have that step in its history.\n     */\n    _onServerLastIdUpdate(last_step_id) {\n        this._serverLastStepId = last_step_id;\n        // Check if the current document is stale.\n        this._isDocumentStale = this._isLastDocumentStale();\n        if (this._isDocumentStale && this._ptpJoined) {\n            return this._recoverFromStaleDocument();\n        } else if (this._isDocumentStale && this._joiningPtp) {\n            // In case there is a stale document while a previous recovery is\n            // ongoing.\n            this._resetCollabRequests();\n            this._joinPeerToPeer();\n        }\n    }\n    /**\n     * Try to recover from a stale document.\n     *\n     * The strategy is:\n     *\n     * 1.  Try to get a converging document from the other peers.\n     *\n     * 1.1 By recovery from missing steps: it is the best possible case of\n     *     retrieval.\n     *\n     * 1.2 By recovery from snapshot: it reset the whole editor (destroying\n     *     changes and selection made by the user).\n     *\n     * 2. Reset from the server:\n     *    If the recovery from the other peers fails, reset from the server.\n     *\n     *    As we know we have a stale document, we need to reset it at least from\n     *    the server. We shouldn't wait too long for peers to respond because\n     *    the longer we wait for an unresponding peer, the longer a user can\n     *    edit a stale document.\n     *\n     *    The peers timeout is set to PTP_MAX_RECOVERY_TIME.\n     */\n    async _recoverFromStaleDocument() {\n        return new Promise((resolve) => {\n            // 1. Try to recover a converging document from other peers.\n            const resetCollabCount = this._lastCollaborationResetId;\n\n            const allPeers = this._getPtpClients().map(client => client.id);\n\n            if (allPeers.length === 0) {\n                if (this._isDocumentStale) {\n                    this._showConflictDialog();\n                    resolve();\n                    return this._resetFromServerAndResyncWithClients();\n                }\n            }\n\n            let hasRetrievalBudgetTimeout = false;\n            let snapshots = [];\n            let nbPendingResponses = allPeers.length;\n\n            const success = () => {\n                resolve();\n                clearTimeout(timeout);\n            };\n\n            for (const peerId of allPeers) {\n                this.requestClient(\n                    peerId,\n                    'recover_document', {\n                        serverDocumentId: this._serverLastStepId,\n                        fromStepId: peek(this.odooEditor.historyGetBranchIds()),\n                    },\n                    { transport: 'rtc' }\n                ).then((response) => {\n                    nbPendingResponses--;\n                    if (\n                        response === REQUEST_ERROR ||\n                        resetCollabCount !== this._lastCollaborationResetId ||\n                        hasRetrievalBudgetTimeout ||\n                        !response ||\n                        !this._isDocumentStale\n                    ) {\n                        if (nbPendingResponses <= 0) {\n                            processSnapshots();\n                        }\n                        return;\n                    }\n                    this._processMissingSteps(response.missingSteps);\n                    this._isDocumentStale = this._isLastDocumentStale();\n                    snapshots.push(response.snapshot);\n                    if (nbPendingResponses < 1) {\n                        processSnapshots();\n                    }\n                });\n            }\n\n            // Only process the snapshots after having received a response from all\n            // the peers or after PTP_MAX_RECOVERY_TIME in order to try to recover\n            // from missing steps.\n            const processSnapshots = async () => {\n                this._isDocumentStale = this._isLastDocumentStale();\n                if (!this._isDocumentStale) {\n                    return success();\n                }\n                if (snapshots[0]) {\n                    this._showConflictDialog();\n                }\n                for (const snapshot of snapshots) {\n                    this._applySnapshot(snapshot);\n                    this._isDocumentStale = this._isLastDocumentStale();\n                    // Prevent reseting from another snapshot if the document\n                    // converge.\n                    if (!this._isDocumentStale) {\n                        return success();\n                    }\n                }\n\n                // 2. If the document is still stale, try to recover from the server.\n                if (this._isDocumentStale) {\n                    this._showConflictDialog();\n                    await this._resetFromServerAndResyncWithClients();\n                }\n\n                success();\n            }\n\n            // Wait PTP_MAX_RECOVERY_TIME to retrieve data from other peers to\n            // avoid reseting from the server if possible.\n            const timeout = setTimeout(() => {\n                if (resetCollabCount !== this._lastCollaborationResetId) return;\n                hasRetrievalBudgetTimeout = true;\n                this._onRecoveryClientTimeout(processSnapshots);\n            }, PTP_MAX_RECOVERY_TIME);\n        });\n    }\n    /**\n     * Callback for when the timeout PTP_MAX_RECOVERY_TIME fires.\n     *\n     * Used to be hooked in tests.\n     *\n     * @param {Function} processSnapshots The snapshot processing function.\n     */\n    async _onRecoveryClientTimeout(processSnapshots) {\n        processSnapshots();\n    }\n    /**\n     * Reset the document from the server and resync with the clients.\n     */\n    async _resetFromServerAndResyncWithClients() {\n        let collaborationResetId = this._lastCollaborationResetId;\n        const record = await this._getCurrentRecord();\n        if (collaborationResetId !== this._lastCollaborationResetId) return;\n\n        const content = record[this.options.collaborationChannel.collaborationFieldName];\n        const lastHistoryId = content && this._getLastHistoryStepId(content);\n        // If a change was made in the document while retrieving it, the\n        // lastHistoryId will be different if the odoo bus did not have time to\n        // notify the user.\n        if (this._serverLastStepId !== lastHistoryId) {\n            // todo: instrument it to ensure it never happens\n            throw new Error('Concurency detected while recovering from a stale document. The last history id of the server is different from the history id received by the html_field_write event.');\n        }\n\n        this._isDocumentStale = false;\n        this.resetValue(content);\n\n        // After resetting from the server, try to resynchronise with a peer as\n        // if it was the first time connecting to a peer in order to retrieve a\n        // proper snapshot (e.g. This case could arise if we tried to recover\n        // from a client but the timeout (PTP_MAX_RECOVERY_TIME) was reached\n        // before receiving a response).\n        this._historySyncAtLeastOnce = false;\n        this._resetCollabRequests();\n        collaborationResetId = this._lastCollaborationResetId;\n        this._startCollaborationTime = new Date().getTime();\n        await Promise.all(this._getPtpClients().map((client) => {\n            // Reset from the fastest client. The first client to reset will set\n            // this._historySyncAtLeastOnce to true canceling the other peers\n            // resets.\n            return this._resetFromClient(client.id, collaborationResetId);\n        }));\n        return true;\n    }\n    _resetCollabRequests() {\n        this._lastCollaborationResetId++;\n        // By aborting the current requests from ptp, we ensure that the ongoing\n        // `Wysiwyg.requestClient` will return REQUEST_ERROR. Most requests that\n        // calls `Wysiwyg.requestClient` might want to check if the response is\n        // REQUEST_ERROR.\n        this.ptp && this.ptp.abortCurrentRequests();\n    }\n    async _resetFromClient(fromClientId, resetCollabCount) {\n        this._historySyncFinished = false;\n        this._historyStepsBuffer = [];\n        const snapshot = await this.requestClient(fromClientId, 'get_history_from_snapshot', undefined, { transport: 'rtc' });\n        if (snapshot === REQUEST_ERROR) {\n            return REQUEST_ERROR;\n        }\n        if (resetCollabCount !== this._lastCollaborationResetId) {\n            return;\n        }\n        // Ensure that the history hasn't been synced by another client before\n        // this `get_history_from_snapshot` finished.\n        if (this._historySyncAtLeastOnce) {\n            return;\n        }\n        const applied = this._applySnapshot(snapshot);\n        if (!applied) {\n            return;\n        }\n        this._historySyncFinished = true;\n        // In case there are steps received in the meantime, process them.\n        if (this._historyStepsBuffer.length) {\n            this.odooEditor.onExternalHistorySteps(this._historyStepsBuffer);\n            this._historyStepsBuffer = [];\n        }\n        this.options.onHistoryResetFromSteps();\n        this._setCollaborativeSelection(fromClientId);\n    }\n    async requestClient(clientId, requestName, requestPayload, params) {\n        return this.ptp.requestClient(clientId, requestName, requestPayload, params).catch((e) => {\n            if (e instanceof RequestError) {\n                return REQUEST_ERROR;\n            } else {\n                throw e;\n            }\n        });\n    }\n    /**\n     * Reset the value and history of the editor.\n     */\n    async resetValue(value) {\n        this.setValue(value);\n        this.odooEditor.historyReset();\n        this._historyShareId = Math.floor(Math.random() * Math.pow(2,52)).toString();\n        this._serverLastStepId = value && this._getLastHistoryStepId(value);\n        if (this._serverLastStepId) {\n            this.odooEditor.historySetInitialId(this._serverLastStepId);\n        }\n    }\n    /**\n     * Reset the editor with a new value and potientially new options.\n     */\n    async resetEditor(value, options) {\n        await this._peerToPeerLoading;\n        this.$editable[0].removeEventListener('focus', this._joinPeerToPeer);\n        if (options) {\n            this.options = this._getEditorOptions(options);\n        }\n        const {collaborationChannel} = this.options;\n        this._stopPeerToPeer();\n        this._collaborationStopBus && this._collaborationStopBus();\n        this._isDocumentStale = false;\n        this._rulesCache = undefined; // Reset the cache of rules.\n        // If there is no collaborationResId, the record has been deleted.\n        if (!this._isCollaborationEnabled(this.options)) {\n            this._currentClientId = undefined;\n            this.resetValue(value);\n            return;\n        }\n        this._currentClientId = this._generateClientId();\n        this.odooEditor.collaborationSetClientId(this._currentClientId);\n        this.resetValue(value);\n        this.setupCollaboration(collaborationChannel);\n        if (this.options.collaborativeTrigger === 'start') {\n            this._joinPeerToPeer();\n        } else if (this.options.collaborativeTrigger === 'focus') {\n            // Wait until editor is focused to join the peer to peer network.\n            this.$editable[0].addEventListener('focus', this._joinPeerToPeer);\n        }\n\n        await this._peerToPeerLoading;\n    }\n    _getHistorySnapshot() {\n        return Object.assign(\n            {},\n            this.odooEditor.historyGetSnapshotSteps(),\n            { historyShareId: this._historyShareId }\n        );\n    }\n    _applySnapshot(snapshot) {\n        const { steps, historyIds, historyShareId } = snapshot;\n        // If there is no serverLastStepId, it means that we use a document\n        // that is not versionned yet.\n        const isStaleDocument = this._serverLastStepId && !historyIds.includes(this._serverLastStepId);\n        if (isStaleDocument) {\n            return;\n        }\n        this._historyShareId = historyShareId;\n        this._historySyncAtLeastOnce = true;\n        this.odooEditor.historyResetFromSteps(steps, historyIds);\n        this.odooEditor.historyResetLatestComputedSelection();\n        return true;\n    }\n    /**\n     * Set `contenteditable` according to `.o_not_editable` and `.o_editable`.\n     *\n     * @param {Node} node\n     */\n    _onPostSanitize(node) {\n        // _fixLinkMutatedElements check to be removed after the new link edge\n        // solution is merged.\n        if (node?.querySelectorAll && this.odooEditor && !this.odooEditor._fixLinkMutatedElements) {\n            // TODO rethink o_editable as a content-editable marker without\n            // breaking the o_editable behaviors (website, mass_mailing, ...)\n            for (const element of node.querySelectorAll('.o_not_editable')) {\n                if (element.isContentEditable !== false) {\n                    element.contentEditable = false;\n                }\n            }\n        }\n    }\n    _attachHistoryIds(editable = this.odooEditor.editable) {\n        if (this.options.collaborative) {\n            // clean existig 'data-last-history-steps' attributes\n            editable.querySelectorAll('[data-last-history-steps]').forEach(\n                el => el.removeAttribute('data-last-history-steps')\n            );\n\n            const historyIds = this.odooEditor.historyGetBranchIds().join(',');\n            const firstChild = editable.children[0];\n            if (firstChild) {\n                firstChild.setAttribute('data-last-history-steps', historyIds);\n            }\n        }\n    }\n    _bindOnBlur() {\n        this.$editable.on('blur', this._onBlur);\n    }\n\n    _hasICEServers() {\n        // Hack: check if mail module is installed.\n        return session.notification_type;\n    }\n    _isCollaborationEnabled(options) {\n        return options.collaborationChannel && options.collaborationChannel.collaborationResId && this._hasICEServers() && this.busService;\n    }\n\n    /**\n     * Saves a base64 encoded image as an attachment.\n     * Relies on _saveModifiedImage being called after it for webp.\n     *\n     * @private\n     * @param {Element} el\n     * @param {string} resModel\n     * @param {number} resId\n     */\n    async _saveB64Image(el, resModel, resId) {\n        el.classList.remove('o_b64_image_to_save');\n        const imageData = el.getAttribute('src').split('base64,')[1];\n        if (!imageData) {\n            // Checks if the image is in base64 format for RPC call. Relying\n            // only on the presence of the class \"o_b64_image_to_save\" is not\n            // robust enough.\n            return;\n        }\n        const attachment = await this._serviceRpc(\n            '/web_editor/attachment/add_data',\n            {\n                name: el.dataset.fileName || '',\n                data: imageData,\n                is_image: true,\n                res_model: resModel,\n                res_id: resId,\n            },\n        );\n        if (attachment.mimetype === 'image/webp') {\n            el.classList.add('o_modified_image_to_save');\n            el.dataset.originalId = attachment.id;\n            el.dataset.mimetype = attachment.mimetype;\n            el.dataset.fileName = attachment.name;\n            this._saveModifiedImage(el, resModel, resId);\n        } else {\n            let src = attachment.image_src;\n            if (!attachment.public) {\n                let accessToken = attachment.access_token;\n                if (!accessToken) {\n                    [accessToken] = await this.orm.call(\n                        'ir.attachment',\n                        'generate_access_token',\n                        [attachment.id],\n                    );\n                }\n                src += `?access_token=${encodeURIComponent(accessToken)}`;\n            }\n            el.setAttribute('src', src);\n        }\n    }\n    /**\n     * Saves a modified image as an attachment.\n     *\n     * @private\n     * @param {Element} el\n     * @param {string} resModel\n     * @param {number} resId\n     */\n    async _saveModifiedImage(el, resModel, resId) {\n        const isBackground = !el.matches('img');\n        // Modifying an image always creates a copy of the original, even if\n        // it was modified previously, as the other modified image may be used\n        // elsewhere if the snippet was duplicated or was saved as a custom one.\n        let altData = undefined;\n        const isImageField = !!el.closest(\"[data-oe-type=image]\");\n        if (el.dataset.mimetype === 'image/webp' && isImageField) {\n            // Generate alternate sizes and format for reports.\n            altData = {};\n            const image = document.createElement('img');\n            image.src = isBackground ? el.dataset.bgSrc : el.getAttribute('src');\n            await new Promise(resolve => image.addEventListener('load', resolve));\n            const originalSize = Math.max(image.width, image.height);\n            const smallerSizes = [1024, 512, 256, 128].filter(size => size < originalSize);\n            for (const size of [originalSize, ...smallerSizes]) {\n                const ratio = size / originalSize;\n                const canvas = document.createElement('canvas');\n                canvas.width = image.width * ratio;\n                canvas.height = image.height * ratio;\n                const ctx = canvas.getContext('2d');\n                ctx.fillStyle = 'rgb(255, 255, 255)';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n                ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n                altData[size] = {\n                    'image/jpeg': canvas.toDataURL('image/jpeg', 0.75).split(',')[1],\n                };\n                if (size !== originalSize) {\n                    altData[size]['image/webp'] = canvas.toDataURL('image/webp', 0.75).split(',')[1];\n                }\n            }\n        }\n        const newAttachmentSrc = await this._serviceRpc(\n            `/web_editor/modify_image/${encodeURIComponent(el.dataset.originalId)}`,\n            {\n                res_model: resModel,\n                res_id: parseInt(resId),\n                data: (isBackground ? el.dataset.bgSrc : el.getAttribute('src')).split(',')[1],\n                alt_data: altData,\n                mimetype: (isBackground ? el.dataset.mimetype : el.getAttribute('src').split(\":\")[1].split(\";\")[0]),\n                name: (el.dataset.fileName ? el.dataset.fileName : null),\n            },\n        );\n        el.classList.remove('o_modified_image_to_save');\n        if (isBackground) {\n            const parts = weUtils.backgroundImageCssToParts($(el).css('background-image'));\n            parts.url = `url('${newAttachmentSrc}')`;\n            const combined = weUtils.backgroundImagePartsToCss(parts);\n            $(el).css('background-image', combined);\n            delete el.dataset.bgSrc;\n        } else {\n            el.setAttribute('src', newAttachmentSrc);\n            // Also update carousel thumbnail.\n            weUtils.forwardToThumbnail(el);\n        }\n    }\n\n    /**\n     * @private\n     */\n    _beforeAnyCommand() {\n        // Remove any marker of default text in the selection on which the\n        // command is being applied. Note that this needs to be done *before*\n        // the command and not after because some commands (e.g. font-size)\n        // rely on some elements not to have the class to fully work.\n        for (const node of OdooEditorLib.getSelectedNodes(this.$editable[0])) {\n            const el = node.nodeType === Node.TEXT_NODE ? node.parentElement : node;\n            const defaultTextEl = el.closest('.o_default_snippet_text');\n            if (defaultTextEl) {\n                defaultTextEl.classList.remove('o_default_snippet_text');\n            }\n        }\n    }\n\n    // -----------------------------------------------------------------------------\n    // Legacy compatibility layer\n    // Remove me when all legacy widgets using wysiwyg are converted to OWL.\n    // -----------------------------------------------------------------------------\n    _trigger_up(ev) {\n        const evType = ev.name;\n        const payload = ev.data;\n        if (evType === 'call_service') {\n            this._callService(payload);\n        }\n    }\n    _callService(payload) {\n        const service = this.env.services[payload.service];\n        const result = service[payload.method].apply(service, payload.args || []);\n        payload.callback(result);\n    }\n    _serviceRpc(route, params, settings = {}) {\n        if (status(this) === \"destroyed\") {\n            return;\n        }\n        if (params && params.kwargs) {\n            params.kwargs.context = {\n                ...this.env.services.user.context,\n                ...params.kwargs.context,\n            };\n        }\n        return this.rpc(route, params, {\n            silent: settings.shadow,\n            xhr: settings.xhr,\n        });\n    }\n}\nWysiwyg.activeCollaborationChannelNames = new Set();\nWysiwyg.activeWysiwygs = new Set();\n//--------------------------------------------------------------------------\n// Public helper\n//--------------------------------------------------------------------------\n/**\n * @param {Node} [ownerDocument] (document on which to get the selection)\n * @returns {Object}\n * @returns {Node} sc - start container\n * @returns {Number} so - start offset\n * @returns {Node} ec - end container\n * @returns {Number} eo - end offset\n */\nWysiwyg.getRange = function (ownerDocument) {\n    const selection = (ownerDocument || document).getSelection();\n    if (selection.rangeCount === 0) {\n        return {\n            sc: null,\n            so: 0,\n            ec: null,\n            eo: 0,\n        };\n    }\n    const range = selection.getRangeAt(0);\n\n    return {\n        sc: range.startContainer,\n        so: range.startOffset,\n        ec: range.endContainer,\n        eo: range.endOffset,\n    };\n};\n/**\n * @param {Node} startNode\n * @param {Number} startOffset\n * @param {Node} endNode\n * @param {Number} endOffset\n */\nWysiwyg.setRange = function (startNode, startOffset = 0, endNode = startNode, endOffset = startOffset) {\n    const selection = document.getSelection();\n    selection.removeAllRanges();\n\n    const range = new Range();\n    range.setStart(startNode, startOffset);\n    range.setEnd(endNode, endOffset);\n    selection.addRange(range);\n};\n\n// Check wether clientA is before clientB.\nfunction isClientFirst(clientA, clientB) {\n    if (clientA.startTime === clientB.startTime) {\n        return clientA.id.localeCompare(clientB.id) === -1;\n    } if (clientA.startTime === undefined || clientB.startTime === undefined) {\n        return Boolean(clientA.startTime);\n    } else {\n        return clientA.startTime < clientB.startTime;\n    }\n}\n\nexport function stripHistoryIds(value) {\n    return value && value.replace(/\\sdata-last-history-steps=\"[^\"]*?\"/, '') || value;\n}\n", "/** @odoo-module **/\n\nimport { Wysiwyg } from '@web_editor/js/wysiwyg/wysiwyg';\nimport { patch } from \"@web/core/utils/patch\";\nimport { getBundle } from \"@web/core/assets\";\nimport { isMobileOS } from \"@web/core/browser/feature_detection\";\n\nvar promiseJsAssets;\n\n/**\n * Add option (inIframe) to load Wysiwyg in an iframe.\n **/\n\npatch(Wysiwyg.prototype, {\n    /**\n     * Add options to load Wysiwyg in an iframe.\n     *\n     * @override\n     * @param {boolean} options.inIframe\n     **/\n    init() {\n        super.init();\n        if (this.options.inIframe) {\n            this._onUpdateIframeId = 'onLoad_' + this.id;\n        }\n    },\n    /**\n     * @override\n     **/\n    async startEdition() {\n        if (!this.options.inIframe) {\n            return super.startEdition();\n        } else {\n            this.defAsset = this._getAssets();\n            await this.defAsset;\n            await this._loadIframe();\n            return super.startEdition();\n        }\n    },\n\n    /**\n     * @override\n     **/\n    destroy() {\n        if (this.options.inIframe) {\n            this.$iframe?.[0].contentDocument.removeEventListener('scroll', this._onScroll, true);\n        }\n        super.destroy();\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     **/\n    _getEditorOptions() {\n        const options = super._getEditorOptions(...arguments);\n        if (!(\"getContextFromParentRect\" in options)) {\n            options.getContextFromParentRect = () => {\n                return this.$iframe && this.$iframe.length ? this.$iframe[0].getBoundingClientRect() : { top: 0, left: 0 };\n            };\n        }\n        if (this.$iframe && this.$iframe.length) {\n            options.document = this.$iframe[0].contentWindow.document;\n        }\n        return options;\n    },\n    /**\n     * Create iframe, inject css and create a link with the content,\n     * then inject the target inside.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _loadIframe() {\n        var self = this;\n        const isEditableRoot = this.$editable === this.$root;\n        this.$editable = $('<div class=\"note-editable oe_structure odoo-editor-editable\"></div>');\n        this.$el.removeClass('note-editable oe_structure odoo-editor-editable');\n        if (isEditableRoot) {\n            this.$root = this.$editable;\n        }\n        this.$iframe = $('<iframe class=\"wysiwyg_iframe o_iframe\">').css({\n            width: '100%'\n        });\n        var avoidDoubleLoad = 0; // this bug only appears on some configurations.\n\n        // resolve promise on load\n        var def = new Promise(function (resolve) {\n            window.top[self._onUpdateIframeId] = function (_avoidDoubleLoad) {\n                if (_avoidDoubleLoad !== avoidDoubleLoad) {\n                    console.warn('Wysiwyg iframe double load detected');\n                    return;\n                }\n                delete window.top[self._onUpdateIframeId];\n                var $iframeTarget = self.$iframe.contents().find('#iframe_target');\n                // copy the html in itself to have the node prototypes relative\n                // to this window rather than the iframe window.\n                const $targetClone = $iframeTarget.clone();\n                $targetClone.find('script').remove();\n                $iframeTarget.html($targetClone.html());\n                self.$iframeBody = $iframeTarget;\n                $iframeTarget.attr(\"isMobile\", isMobileOS());\n                const $utilsZone = $('<div class=\"iframe-utils-zone\">');\n                self.$utilsZone = $utilsZone;\n\n                const $iframeWrapper = $('<div class=\"iframe-editor-wrapper odoo-editor\">');\n                const $codeview = $('<textarea class=\"o_codeview d-none\"/>');\n                self.$editable.addClass('o_editable oe_structure');\n\n                $iframeTarget.append($codeview);\n                $iframeTarget.append($iframeWrapper);\n                $iframeTarget.append($utilsZone);\n                $iframeWrapper.append(self.$editable);\n\n                self.options.toolbarHandler = $('#web_editor-top-edit', self.$iframe[0].contentWindow.document);\n                $iframeTarget.on('click', '.o_fullscreen_btn', function () {\n                    $(\"body\").toggleClass(\"o_field_widgetTextHtml_fullscreen\");\n                    var full = $(\"body\").hasClass(\"o_field_widgetTextHtml_fullscreen\");\n                    self.$iframe.parents().toggleClass('o_form_fullscreen_ancestor', full);\n                    $(window).trigger(\"resize\"); // induce a resize() call and let other backend elements know (the navbar extra items management relies on this)\n                });\n                resolve();\n            };\n        });\n        this.$iframe.data('loadDef', def); // for unit test\n\n        // inject content in iframe\n\n        this.$iframe.on('load', function onLoad (ev) {\n            var _avoidDoubleLoad = ++avoidDoubleLoad;\n            self.defAsset.then(function (assets) {\n                if (_avoidDoubleLoad !== avoidDoubleLoad) {\n                    console.warn('Wysiwyg immediate iframe double load detected');\n                    return;\n                }\n\n                const iframeContent = getWysiwygIframeContent({\n                    assets: assets,\n                    updateIframeId: self._onUpdateIframeId,\n                    avoidDoubleLoad: _avoidDoubleLoad\n                });\n                self.$iframe[0].contentWindow.document\n                    .open(\"text/html\", \"replace\")\n                    .write(`<!DOCTYPE html><html${\n                        self.options.iframeHtmlClass ? ' class=\"' + self.options.iframeHtmlClass +'\"' : ''\n                    }>${iframeContent}</html>`);\n                // Closing the document might trigger a new 'load' event.\n                self.$iframe.off('load', onLoad);\n                self.$iframe[0].contentWindow.document.close();\n            });\n            self.options.document = self.$iframe[0].contentWindow.document;\n        });\n\n        this.$el.append(this.$iframe);\n\n        return def.then(() => {\n            this.options.onIframeUpdated();\n        });\n    },\n\n    _insertSnippetMenu() {\n        if (this.options.inIframe) {\n            return this.snippetsMenu.appendTo(this.$utilsZone);\n        } else {\n            return super._insertSnippetMenu(...arguments);\n        }\n    },\n    /**\n     * Get assets for the iframe.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    async _getAssets() {\n        promiseJsAssets = promiseJsAssets || await getBundle('web_editor.wysiwyg_iframe_editor_assets');\n        const assetsPromises = [promiseJsAssets];\n        if (this.options.iframeCssAssets) {\n            assetsPromises.push(getBundle(this.options.iframeCssAssets));\n        }\n        return Promise.all(assetsPromises);\n    },\n\n    /**\n     * Bind the blur event on the iframe so that it would not blur when using\n     * the sidebar.\n     *\n     * @override\n     */\n    _bindOnBlur() {\n        if (!this.options.inIframe) {\n            super._bindOnBlur(...arguments);\n        } else {\n            this.$iframe[0].contentWindow.addEventListener('blur', this._onBlur);\n        }\n    },\n\n    /**\n     * When the editable is inside an iframe, we want to update the toolbar\n     * position in 2 scenarios:\n     * 1. scroll event in the top document, if the iframe is a descendant of\n     * the scroll container.\n     * 2. scroll event in the iframe's document.\n     * \n     * @override\n     */\n    _onScroll(ev) {\n        if (this.options.inIframe) {\n            const iframeDocument = this.$iframe[0].contentDocument;\n            const scrollInIframe = ev.target === iframeDocument || ev.target.ownerDocument === iframeDocument;\n            if (ev.target.contains(this.$iframe[0]))  {\n                this.scrollContainer = ev.target;\n                this.odooEditor.updateToolbarPosition();\n            } else if (scrollInIframe) {\n                // UpdateToolbarPosition needs a scroll container in the top document.\n                this.scrollContainer = this.$iframe[0];\n                this.odooEditor.updateToolbarPosition();\n            }\n        } else {\n            return super._onScroll(...arguments);\n        }\n    },\n\n    /**\n     * @override\n     */\n    _configureToolbar(options) {\n        super._configureToolbar(...arguments);\n        if (this.options.inIframe && !options.snippets) {\n            this.$iframe[0].contentDocument.addEventListener('scroll', this._onScroll, true);\n        }\n    },\n});\n\nfunction getWysiwygIframeContent(params) {\n    const assets = {\n        cssLibs: [],\n        cssContents: [],\n        jsLibs: [],\n        jsContents: [],\n    };\n    for (const asset of params.assets) {\n        for (const cssLib of asset.cssLibs) {\n            assets.cssLibs.push(`<link type=\"text/css\" rel=\"stylesheet\" href=\"${cssLib}\"/>`);\n        }\n        for (const cssContent of asset.cssContents) {\n            assets.cssContents.push(`<style type=\"text/css\">${cssContent}</style>`);\n        }\n        for (const jsLib of asset.jsLibs) {\n            assets.jsLibs.push(`<script type=\"text/javascript\" src=\"${jsLib}\"/>`);\n        }\n        for (const jsContent of asset.jsContents) {\n            if (jsContent.indexOf('inline asset') !== -1) {\n                assets.jsContents.push(`<script type=\"text/javascript\">${jsContent}</script>`);\n            }\n        }\n    }\n    return `\n        <meta charset=\"utf-8\"/>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"/>\n        ${assets.cssLibs.join('\\n')}\n        ${assets.cssContents.join('\\n')}\n        ${assets.jsLibs.join('\\n')}\n        ${assets.jsContents.join('\\n')}\n\n        <script type=\"text/javascript\">\n            odoo.define('root.widget', ['@web/legacy/js/core/widget'], function (require) {\n                'use strict';\n                var Widget = require('@web/legacy/js/core/widget')[Symbol.for(\"default\")];\n                var widget = new Widget();\n                widget.appendTo(document.body);\n                return widget;\n            });\n        </script>\n    </head>\n    <body class=\"o_in_iframe\">\n        <div id=\"iframe_target\"/>\n        <script type=\"text/javascript\">\n            odoo.define('web_editor.wysiwyg.iniframe', [], function (require) {\n                'use strict';\n                if (window.top.${params.updateIframeId}) {\n                    window.top.${params.updateIframeId}(${params.avoidDoubleLoad});\n                }\n            });\n        </script>\n    </body>`;\n}\n"], "file": "/web/assets/ed71fc4/web_editor.backend_assets_wysiwyg.js", "sourceRoot": "../../../"}